********************************************************************************
*
* Knight Lore
*
* For the TI-99/4A Home Computer (TMS9900 CPU)
*
* Converted from the ZX Spectrum (Z80) version by
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
* June-July 2017
*
* Based on:
*
* +--------------------------------------------------+
* | ZX Spectrum Knight Lore Disassembly v1.00rc7     |
* |    - by tcdev (msmcdoug@gmail.com)               |
* | http://retroports.blogspot.dk/p/blog-page.html   |
* |                                                  |
* | Processor       : z80 []                         |
* | Target assembler: ASxxxx by Alan R. Baldwin v1.5 |
* +--------------------------------------------------+
*
* ZX Spectrum Memory Map:
*
* $4000-$57FF - spectrum video memory
* $5800-$5AFF - spectrum attribute memory
*       $5B9F - stack
* $5BA0-$6107 - variables
* $6108-$D8F2 - code and data
* $D8F3-$F0F2 - video buffer
* $F100-$FFFF - bit-shift & bit-reverse lookup tables
*             - (built at run-time)
*
********************************************************************************

       def  start

invincible:
       equ  0
delay_on:
       equ  0
lives_init:
       equ  5
sound_on:
       equ  1

**
* Memory mapped addresses
*
VDPWD  EQU  >8C00                      ; VDP write data
VDPWA  EQU  >8C02                      ; VDP set read/write address
VDPRD  EQU  >8800                      ; VDP read data
VDPSTA EQU  >8802                      ; VDP status
SOUND  EQU  >8400

**
* VDP memory map
*
PTRNTB EQU  >0000                      ; Pattern table base
SPRPTB EQU  >1800                      ; Sprite pattern table base
COLRTB EQU  >2000                      ; Color table base
NAMETB EQU  >3800                      ; Name table base 1
SPRATB EQU  >3B00                      ; Sprite attribute table base

**
* Scratch pad
*
rndsd  equ  >83C0                      ; Random number seed
pad    equ  >8300
wrksp  equ  pad                        ; Workspace
r0lb   equ  wrksp+1
r1lb   equ  wrksp+3
r2lb   equ  wrksp+5
r3lb   equ  wrksp+7
r4lb   equ  wrksp+9
r5lb   equ  wrksp+11
r6lb   equ  wrksp+13
r7lb   equ  wrksp+15
r8lb   equ  wrksp+17
r9lb   equ  wrksp+19
wrksp2 equ  wrksp+>20
padvar equ  wrksp2+>20
*
* Variables from here are zeroed at start of game
*
static_variables_start:
       equ  padvar
seed_1:
       equ  padvar
seed_2:
       equ  seed_1+2
* bit   3 : directional
* bit 2-1 : 00=keybd, 01=kempston, 10=cursor, 11=i/f-ii
user_input_method:
       equ  seed_2+2
seed_3:
       equ  user_input_method+1
old_input_method:
       equ  seed_3+1
*
* Variables from here are zeroed each game
*
volatile_variables_start:
       equ  old_input_method+2
tmp_SP:                                ; Swapped tmp_SP and objs_wiped_cnt
       equ  volatile_variables_start
objs_wiped_cnt:
       equ  tmp_SP+2
room_size_X:
       equ  objs_wiped_cnt+1
room_size_Y:
       equ  room_size_X+1
curr_room_attrib:
       equ  room_size_Y+1
room_size_Z:
       equ  curr_room_attrib+1
portcullis_moving:
       equ  room_size_Z+1
portcullis_move_cnt:
       equ  portcullis_moving+1
transform_flag_graphic:
       equ  portcullis_move_cnt+1
not_1st_screen:
       equ  transform_flag_graphic+1
pickup_drop_pressed:
       equ  not_1st_screen+1
objects_carried_changed:
       equ  pickup_drop_pressed+1
* b5=???
* b4=pickup/drop
* b3=jump
* b2=forward
* b1=right
* b0=left
user_input:
       equ  objects_carried_changed+1
tmp_attrib:
       equ  user_input+1
render_status_info:
       equ  tmp_attrib+1
suppress_border:
       equ  render_status_info+1
days:
       equ  suppress_border+1
lives:
       equ  days+1
objects_put_in_cauldron:
       equ  lives+1
fire_seed:
       equ  objects_put_in_cauldron+1
ball_bounce_height:
       equ  fire_seed+1
rendered_objs_cnt:
       equ  ball_bounce_height+1
is_spike_ball_dropping:
       equ  rendered_objs_cnt+1
disable_spike_ball_drop:
       equ  is_spike_ball_dropping+1
tmp_dZ:
       equ  disable_spike_ball_drop+1
tmp_bouncing_ball_dZ:
       equ  tmp_dZ+1
all_objs_in_cauldron:
       equ  tmp_bouncing_ball_dZ+1
obj_dropping_into_cauldron:
       equ  all_objs_in_cauldron+1
rising_blocks_z:
       equ  obj_dropping_into_cauldron+1
num_scrns_visited:
       equ  rising_blocks_z+1
audio_played:                          ; Moved from after render_obj_2
       equ  num_scrns_visited+1
gfxbase_8x8:
       equ  audio_played+1
percent_msw:
       equ  gfxbase_8x8+2
percent_lsw:
       equ  percent_msw+1
tmp_objects_to_draw:
       equ  percent_lsw+1
render_obj_1:
       equ  tmp_objects_to_draw+2
render_obj_2:
       equ  render_obj_1+2
debounce_5:
       equ  render_obj_2+2
cant_drop:
       equ  debounce_5+1
inventory:
       equ  cant_drop+5
objects_carried:
       equ  inventory+4
unk_5BE3:
       equ  objects_carried+7
object_carried_2:
       equ  unk_5BE3+1
end_of_objects_carried:
       equ  object_carried_2+3
variables_end:
       equ  end_of_objects_carried+1

stack  equ  variables_end              ; Stack grows up

**
* Z80 register mapping
*
tmp0   equ  0
tmp1   equ  1
one    equ  2
mone   equ  3
af     equ  4
a      equ  4
bc     equ  5
b      equ  5
c      equ  R5LB
de     equ  6
d      equ  6
e      equ  R6LB
hl     equ  7
h      equ  7
l      equ  R7LB
ix     equ  8
iy     equ  9
sp     equ  10
af_    equ  12
bc_    equ  13
de_    equ  14
hl_    equ  15

**
* ZX Spectrum video memory
*
zx_vram:
     equ    >4000

**
* ZX Spectrum attribute memory
*
zx_aram:
       equ  >5800

*
*===========================================================================
*
* Upper memory
*
       aorg >A000

       copy "main_code.a99"
       copy "subroutines.a99"
       copy "pickup-drop-objects.a99"
       copy "start-menu.a99"
       copy "game-over.a99"
       copy "sound.a99"
*      Data
       copy "font.a99"
       copy "locations.a99"
       copy "block-types.a99"
       copy "background-types.a99"
       copy "special-objects.a99"
       copy "update-sprite-jump-table.a99"
       copy "tiplayer.a99"
       copy "byte-constants.a99"
*
upper_memory_end:
       data -1
* ===========================================================================
*
* Lower memory
*
       aorg >2000

       copy "object_data.a99"
*
* Linear video memory buffer, length >1800
*
vidbuf:
       equ >2800
*
lower_memory_end:
       data -1
* ===========================================================================
*
* End of file
*
       end  start
*
*===========================================================================
