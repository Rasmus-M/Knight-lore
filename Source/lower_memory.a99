*
* Start of game
*
start:
*      Init TI-99/4A
       bl   @ti_99_4a_init
;RAM:AF6C 21 A0 5B                    ld      hl, #seed_1                             ; location to clear
       li   hl,static_variables_start
;RAM:AF6F 01 68 05                    ld      bc, #0x568                              ; # bytes to clear
       li   bc,variables_end-static_variables_start
;RAM:AF72 3A 78 5C                    ld      a, (0x5C78)                             ; FRAMES system variable (LSB)
       movb @RNDSD,a
;      clr  a
;RAM:AF75 F5                          push    af
       mov  af,*sp+
;RAM:AF76 CD 3A D5                    call    clr_mem
       bl   @clr_mem
;RAM:AF79 F1                          pop     af
       dect sp
       mov  *sp,af
;RAM:AF7A 32 A0 5B                    ld      (seed_1), a
       movb a,@seed_1
;RAM:AF7D 18 09                       jr      main
       jmp  main
* ---------------------------------------------------------------------------
* START OF FUNCTION CHUNK FOR main
*
start_menu:                                                                           ; location to clear
;RAM:AF7F 21 A8 5B                    ld      hl, #objs_wiped_cnt
       li   hl,volatile_variables_start
;RAM:AF82 01 60 05                    ld      bc, #0x560                              ; # bytes to clear
       li   bc,variables_end-volatile_variables_start
;RAM:AF85 CD 3A D5                    call    clr_mem
       bl   @clr_mem
main:                                                                                 ; for bit reversal & shifting
;RAM:AF88 CD 9E D6                    call    build_lookup_tbls
;      bl   @build_lookup_tbls        ; Only bit reversal implemented
;RAM:AF8B AF                          xor     a
       clr  a
;RAM:AF8C 32 B2 5B                    ld      (not_1st_screen), a
       movb a,@not_1st_screen
;RAM:AF8F 32 6D D1                    ld      (flags12_1), a                          ; plyr_spr_1_scratchpad
       movb a,@flags12_1
;RAM:AF92 3E 05                       ld      a, #5                                   ; 5 lives to start
;RAM:AF94 32 BA 5B                    ld      (lives), a
       movb @b05h,@lives
;RAM:AF97 21 A0 5B                    ld      hl, #seed_1
       li   hl,seed_1
;RAM:AF9A 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:AF9D 86                          add     a, (hl)                                 ; seed_1 += seed_2
       ab   *hl,a
;RAM:AF9E 77                          ld      (hl), a                                 ; update seed
       movb a,*hl
;RAM:AF9F CD 5F D5                    call    clear_scrn                              ; colour is bright yellow on black
       bl   @clear_scrn
;RAM:AFA2 CD 0C BD                    call    do_menu_selection
       bl   @do_menu_selection        ; TODO
;RAM:AFA5 11 0E B2                    ld      de, #start_game_tune
       li   de,start_game_tune
;RAM:AFA8 CD CF B2                    call    play_audio                              ; play tune
       bl   @play_audio
;RAM:AFAB CD 44 B5                    call    shuffle_objects_required                ; randomise order of required objects
       bl   @shuffle_objects_required
;RAM:AFAE CD B1 D1                    call    init_start_location                     ; randomise player start location
       bl   @init_start_location
;RAM:AFB1 CD 6D C4                    call    init_sun
       bl   @init_sun
;RAM:AFB4 CD 7E C4                    call    init_special_objects                    ; randomise special object locations
       bl   @init_special_objects
player_dies:
;RAM:AFB7 CD 2A D1                    call    lose_life
       bl   @lose_life
game_loop:
;RAM:AFBA CD E6 D1                    call    build_screen_objects
       bl   @build_screen_objects
onscreen_loop:
;RAM:AFBD 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:AFC0 32 BC 5B                    ld      (fire_seed), a
       movb a,@fire_seed
;RAM:AFC3 DD 21 08 5C                 ld      ix, #graphic_objs_tbl                   ; start of table
       li   ix,graphic_objs_tbl
update_sprite_loop:
;RAM:AFC7 31 A0 5B                    ld      sp, #seed_1                             ; init stack
       li   sp,stack
;RAM:AFCA 21 BC 5B                    ld      hl, #fire_seed
       li   hl,fire_seed
;RAM:AFCD 34                          inc     (hl)
       ab   one,*hl
;RAM:AFCE 21 E4 AF                    ld      hl, #ret_from_tbl_jp
       li   hl,ret_from_tbl_jp
;RAM:AFD1 E5                          push    hl                                      ; set return address
       mov  hl,*sp+
;RAM:AFD2 CD 49 CE                    call    save_2d_info
       bl   @save_2d_info
jump_to_upd_object:
;RAM:AFD5 DD 6E 00                    ld      l, 0(ix)                                ; sprite graphic to render
       movb *ix,@l
;RAM:AFD8 01 96 B0                    ld      bc, #upd_sprite_jmp_tbl
       li   bc,upd_sprite_jmp_tbl
* ---------------------------------------------------------------------------
* This jump table routine is used in many places
jump_to_tbl_entry:
;RAM:AFDB 26 00                       ld      h, #0
       szcb mone,h
;RAM:AFDD 29                          add     hl, hl                                  ; word offset
       a    hl,hl
;RAM:AFDE 09                          add     hl, bc                                  ; get ptr jump entry
       a    bc,hl
;RAM:AFDF 7E                          ld      a, (hl)                                 ; little endian!
;RAM:AFE0 23                          inc     hl
;RAM:AFE1 66                          ld      h, (hl)
;RAM:AFE2 6F                          ld      l, a                                    ; HL=jump address
       mov  *hl,hl
;RAM:AFE3 E9                          jp      (hl)                                    ; go
       b    *hl
* ---------------------------------------------------------------------------
* END OF FUNCTION CHUNK FOR main
* ---------------------------------------------------------------------------
*
ret_from_tbl_jp:
;RAM:AFE4 ED 5F                       ld      a, r
       bl   @ld_a_r
;RAM:AFE6 4F                          ld      c, a
       movb a,@c
;RAM:AFE7 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:AFEA 81                          add     a, c
       ab   @c,a
;RAM:AFEB 32 A5 5B                    ld      (seed_3), a                             ; update seed #3
       movb a,@seed_3
;RAM:AFEE 01 20 00                    ld      bc, #32
       li   bc,32
;RAM:AFF1 DD 09                       add     ix, bc                                  ; next sprite to render
       a    bc,ix
;RAM:AFF3 DD E5                       push    ix
;RAM:AFF5 E1                          pop     hl
       mov  ix,hl
;RAM:AFF6 01 08 61                    ld      bc, #font                               ; end of table
       li   bc,graphic_objs_tbl_end
;RAM:AFF9 A7                          and     a
*      Clear carry flag
;RAM:AFFA ED 42                       sbc     hl, bc                                  ; past end of table?
       c    hl,bc
;RAM:AFFC 30 02                       jr      NC, loc_B000                            ; yes, exit
       jhe  loc_B000
;RAM:AFFE 18 C7                       jr      update_sprite_loop                      ; loop
       jmp  update_sprite_loop
*
* ---------------------------------------------------------------------------
*
loc_B000:
;RAM:B000 2A A2 5B                    ld      hl, (seed_2)
       mov  @seed_2,hl
;RAM:B003 23                          inc     hl
       swpb hl                        ; Little endian!
       inc  hl
       swpb hl
;RAM:B004 22 A2 5B                    ld      (seed_2), hl
       mov  hl,@seed_2
;RAM:B007 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:B00A 86                          add     a, (hl)
       ab   *hl,a
;RAM:B00B 85                          add     a, l
       ab   @l,a
;RAM:B00C 84                          add     a, h
       ab   h,a
;RAM:B00D 32 A5 5B                    ld      (seed_3), a
       movb a,@seed_3
;RAM:B010 21 B2 5B                    ld      hl, #not_1st_screen
       li   hl,not_1st_screen
;RAM:B013 CB C6                       set     0, (hl)                                 ; update special objects table next time
       socb one,*hl
;RAM:B015 CD 0E D5                    call    handle_pause                            ; handle pause key
       bl   @handle_pause             ; TODO
;RAM:B018 CD A9 B8                    call    init_cauldron_bubbles
       bl   @init_cauldron_bubbles
;RAM:B01B CD 62 CE                    call    list_objects_to_draw                    ; builds a list of screen objects
       bl   @list_objects_to_draw
;RAM:B01E CD 9F D5                    call    render_dynamic_objects                  ; renders above list
       bl   @render_dynamic_objects
;RAM:B021 3A C5 5B                    ld      a, (rising_blocks_z)
       movb @rising_blocks_z,a
;RAM:B024 A7                          and     a                                       ; any blocks rising?
;RAM:B025 C4 54 B4                    call    NZ, audio_B454                          ; yes, play audio
       jeq  !
       bl   @audio_B454
!:
;RAM:B028 3A BE 5B                    ld      a, (rendered_objs_cnt)
       movb @rendered_objs_cnt,a
;RAM:B02B ED 44                       neg
       inv  a
       ab   one,a
;RAM:B02D C6 06                       add     a, #6                                   ; calculate delay loop value
       ai   a,>0600
;RAM:B02F 47                          ld      b, a
       movb a,b
;RAM:B030 FA 3F B0                    jp      M, no_delay
       jlt  no_delay
;RAM:B033 28 0A                       jr      Z, no_delay
       jeq  no_delay
game_delay:
;RAM:B035 21 00 05                    ld      hl, #0x500
       li   hl,>800
delay_loop:
;RAM:B038 2B                          dec     hl
       dec  hl
;RAM:B039 7D                          ld      a, l
;RAM:B03A B4                          or      h
;RAM:B03B 20 FB                       jr      NZ, delay_loop
       jne  delay_loop
;RAM:B03D 10 F6                       djnz    game_delay
       sb   one,b
       jne  game_delay
no_delay:
;RAM:B03F 3A B7 5B                    ld      a, (render_status_info)
       movb @render_status_info,a
;RAM:B042 A7                          and     a                                       ; rendered before?
;RAM:B043 28 2F                       jr      Z, loc_B074                             ; yes, skip
       jeq  loc_B074
;RAM:B045 AF                          xor     a                                       ; reset flag
       clr  a
;RAM:B046 32 B7 5B                    ld      (render_status_info), a
       movb a,@render_status_info
;RAM:B049 3A AD 5B                    ld      a, (curr_room_attrib)                   ; attribute
       movb @curr_room_attrib,a
;RAM:B04C CD 56 D5                    call    fill_attr                               ; set screen colour
       bl   @fill_attr
;RAM:B04F CD 4E BF                    call    display_objects                         ; inventory
       bl   @display_objects
;RAM:B052 CD EF D2                    call    colour_panel
       bl   @colour_panel
;RAM:B055 CD 0D D3                    call    colour_sun_moon
       bl   @colour_sun_moon
;RAM:B058 CD 55 D2                    call    display_panel
       bl   @display_panel
;RAM:B05B DD 21 4D C4                 ld      ix, #sun_moon_scratchpad
       li   ix,sun_moon_scratchpad
;RAM:B05F CD A4 C3                    call    display_sun_moon_frame
       bl   @display_sun_moon_frame
;RAM:B062 CD CA BC                    call    display_day
       bl   @display_day
;RAM:B065 CD 66 BC                    call    print_days
       bl   @print_days
;RAM:B068 CD 7A BC                    call    print_lives_gfx
       bl   @print_lives_gfx
;RAM:B06B CD A3 BC                    call    print_lives
       bl   @print_lives
;RAM:B06E CD 6F D5                    call    update_screen                           ; copy to display
       bl   @update_screen
;RAM:B071 CD 88 B0                    call    reset_objs_wipe_flag
       bl   @reset_objs_wipe_flag
loc_B074:
;RAM:B074 AF                          xor     a
       clr  a
;RAM:B075 32 C5 5B                    ld      (rising_blocks_z), a                    ; clear
       movb a,@rising_blocks_z
;RAM:B078 DD 21 08 5C                 ld      ix, #graphic_objs_tbl
       li   ix,graphic_objs_tbl
;RAM:B07C DD 7E 00                    ld      a, 0(ix)                                ; player sprite half
       movb *ix,a
;RAM:B07F DD B6 20                    or      0x20(ix)                                ; player other sprite half
       socb @>20(ix),a
;RAM:B082 CA B7 AF                    jp      Z, player_dies                          ; both null? yes, lose a life
       jne  !
       b    @player_dies
;RAM:B085 C3 BD AF                    jp      onscreen_loop
!      b    @onscreen_loop
*
* =============== S U B R O U T I N E =======================================
*
reset_objs_wipe_flag:
;RAM:B088 06 28                       ld      b, #40                                  ; max #objects in draw table
       li   b,>2800
;RAM:B08A 11 20 00                    ld      de, #32                                 ; object size
       li   de,32
;RAM:B08D 21 0F 5C                    ld      hl, # graphic_objs_tbl+7                ; offset to flags
       li   hl,graphic_objs_tbl+7
loc_B090:
;RAM:B090 CB AE                       res     5, (hl)                                 ; reset wipe flag
       szcb @b20h,*hl
;RAM:B092 19                          add     hl, de                                  ; next entry
       a    de,hl
;RAM:B093 10 FB                       djnz    loc_B090                                ; loop until done
       sb   one,b
       jne  loc_B090
;RAM:B095 C9                          ret
       rt
*
* End of function reset_objs_wipe_flag
*
* =============== S U B R O U T I N E =======================================
*
* Sets zero flag if object is ignored
*
is_object_not_ignored:
;RAM:B538 FD 7E 00                    ld      a, 0(iy)                                ; graphic no.
       movb *iy,a
;RAM:B53B A7                          and     a                                       ; null?
;RAM:B53C C8                          ret     Z                                       ; yes, exit
       jne  !
       rt
;RAM:B53D FD 7E 07                    ld      a, 7(iy)                                ; flags
!      movb @7(iy),a
;RAM:B540 2F                          cpl
       inv  a
;RAM:B541 E6 02                       and     #2                                      ; test bit 1
       andi a,>0200
;RAM:B543 C9                          ret
       rt
*
* End of function is_object_not_ignored
*
* =============== S U B R O U T I N E =======================================
*
shuffle_objects_required:
;RAM:B544 3A A0 5B                    ld      a, (seed_1)
       movb @seed_1,a
;RAM:B547 E6 03                       and     #3
       andi a,>0300
;RAM:B549 F6 04                       or      #4
       ori  a,>0400
;RAM:B54B 4F                          ld      c, a                                    ; random 4-7
       movb a,@c
loc_B54C:
;RAM:B54C 06 0D                       ld      b, #13                                  ; 14 items (13 swaps)
       movb @b0dh,b
;RAM:B54E FD 21 7D C2                 ld      iy, #objects_required
       li   iy,objects_required
;RAM:B552 FD 5E 00                    ld      e, 0(iy)
       movb *iy,@e
loc_B555:
;RAM:B555 FD 7E 01                    ld      a, 1(iy)
       movb @1(iy),a
;RAM:B558 FD 77 00                    ld      0(iy), a
       movb a,*iy
;RAM:B55B FD 23                       inc     iy
       inc  iy
;RAM:B55D 10 F6                       djnz    loc_B555
       sb   one,b
       jne  loc_B555
;RAM:B55F FD 73 00                    ld      0(iy), e
       movb @e,*iy
;RAM:B562 0D                          dec     c
       sb   one,@c
;RAM:B563 20 E7                       jr      NZ, loc_B54C
       jne  loc_B54C
;RAM:B565 C9                          ret
       rt
*
* End of function shuffle_objects_required
*
* =============== S U B R O U T I N E =======================================
*
init_cauldron_bubbles:
       mov  r11,*sp+
;RAM:B8A9 3A 10 5C                    ld      a, (graphic_objs_tbl+8)                 ; plyr_spr_1 screen
       movb @graphic_objs_tbl+8,a
;RAM:B8AC FE 88                       cp      #136                                    ; cauldron room?
       cb   a,@b88h
;RAM:B8AE C0                          ret     NZ                                      ; no, exit
       jne  init_cauldron_bubbles_return
;RAM:B8AF 11 68 5C                    ld      de, #special_objs_here_1                ; special_objs_here[1]
       li   de,special_objs_here_1
;RAM:B8B2 1A                          ld      a, (de)                                 ; graphic no.
       movb *de,a
;RAM:B8B3 A7                          and     a                                       ; null?
;RAM:B8B4 C0                          ret     NZ                                      ; no, return
       jne  init_cauldron_bubbles_return
;RAM:B8B5 3A C3 5B                    ld      a, (all_objs_in_cauldron)
       movb @all_objs_in_cauldron,a
;RAM:B8B8 A7                          and     a
;RAM:B8B9 C0                          ret     NZ
       jne  init_cauldron_bubbles_return
;RAM:B8BA 21 C8 B8                    ld      hl, #cauldron_bubbles                   ; source data
       li   hl,cauldron_bubbles
;RAM:B8BD 01 12 00                    ld      bc, #18                                 ; 18 bytes to copy
       li   bc,18
;RAM:B8C0 D5                          push    de
;RAM:B8C1 DD E1                       pop     ix                                      ; save destination
       mov  de,ix
;RAM:B8C3 ED B0                       ldir                                            ; copy
       bl   @ldir
;RAM:B8C5 C3 D8 C4                    jp      adj_m4_m12
       b     @adj_m4_m12_1
init_cauldron_bubbles_return:
       dect sp
       movb *sp,r11
       rt
*
cauldron_bubbles:
       byte >A0, >80, >80, >80, >05, >05, >0C, >10, >B4
       byte >00, >00, >00, >00, >A0, >00, >00, >00, >00
*
* End of function init_cauldron_bubbles
*
* ---------------------------------------------------------------------------
* sparkles from the blocks in the cauldron room at the end of the game
*
upd_131_to_133:
;RAM:B566 CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:B569 DD 7E 03                    ld      a, 3(ix)                                ; Z
       movb @3(ix),a
;RAM:B56C FE A4                       cp      #164                                    ; <164?
       cb   a,@ba4h
;RAM:B56E 30 54                       jr      NC, loc_B5C4                            ; no, go
       jhe  loc_B5C4
;RAM:B570 DD 36 0B 03                 ld      11(ix), #3                              ; dZ=3
       movb @b03h,@11(ix)
;RAM:B574 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:B577 07                          rlca
;RAM:B578 E6 01                       and     #1
;RAM:B57A 6F                          ld      l, a                                    ; X bit7->bit0
;RAM:B57B DD 7E 02                    ld      a, 2(ix)                                ; Y
;RAM:B57E E6 80                       and     #0x80 ; '�'                             ; Y bit7
;RAM:B580 B5                          or      l
;RAM:B581 07                          rlca                                            ; bit0->bit1, bit7->bit1
;RAM:B582 E6 03                       and     #3
;RAM:B584 6F                          ld      l, a
       srl  a,6                       ; Bit 7 to bit 1
       andi a,>0200                   ; Isolate
       movb a,@l
       movb @2(ix),a
       srl  a,7                       ; Bit 7 to bit 0
       socb a,@l                      ; Combine
;RAM:B585 01 8B B5                    ld      bc, #dX_dY_tbl                          ; jump table
       li   bc,dX_dY_tbl
;RAM:B588 C3 DB AF                    jp      jump_to_tbl_entry
       b    @jump_to_tbl_entry
* ---------------------------------------------------------------------------
dX_dY_tbl:
       data p4_m4                                       ; +4, -4
       data p4_p4                                       ; +4, +4
       data m4_m4                                       ; -4, -4
       data m4_p4                                       ; -4, +4
* ---------------------------------------------------------------------------
p4_m4:
;RAM:B593 21 FC 04                    ld      hl, #0x4FC                              ; +4, -4
       li   hl,>04fc
save_dX_dY:
;RAM:B596 DD 75 09                    ld      9(ix), l                                ; dX
       movb @l,@9(ix)
;RAM:B599 DD 74 0A                    ld      10(ix), h                               ; dY
       movb h,@10(ix)
;RAM:B59C 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:B59F E6 03                       and     #3                                      ; rnd 0-3
       andi a,>0300
;RAM:B5A1 20 01                       jr      NZ, loc_B5A4                            ; >0, skip
       jne  loc_B5A4
;RAM:B5A3 3C                          inc     a                                       ; =1
       ab   one,a
loc_B5A4:
;RAM:B5A4 C6 82                       add     a, #130                                 ; rnd twinkly sprite
       ab   @b82h,a
;RAM:B5A6 DD 77 00                    ld      0(ix), a                                ; set graphic no.
       movb a,*ix
loc_B5A9:
;RAM:B5A9 DD 7E 03                    ld      a, 3(ix)                                ; Z
       movb @3(ix),a
;RAM:B5AC 32 C5 5B                    ld      (rising_blocks_z), a
       movb a,@rising_blocks_z
dec_dZ_wipe_and_draw:
;RAM:B5AF CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B5B2 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
p4_p4:                                                          ; +4, +4
;RAM:B5B5 21 04 04                    ld      hl, #0x404
       li   hl,>0404
;RAM:B5B8 18 DC                       jr      save_dX_dY
       jmp  save_dX_dY
* ---------------------------------------------------------------------------
m4_m4:                                                          ; -4, -4
;RAM:B5BA 21 FC FC                    ld      hl, #0xFCFC
       li   hl,>fcfc
;RAM:B5BD 18 D7                       jr      save_dX_dY
       jmp  save_dX_dY
* ---------------------------------------------------------------------------
m4_p4:                                                          ; -4, +4
;RAM:B5BF 21 04 FC                    ld      hl, #0xFC04
       li   hl,>fc04
;RAM:B5C2 18 D2                       jr      save_dX_dY
       jmp  save_dX_dY
* ---------------------------------------------------------------------------
loc_B5C4:
;RAM:B5C4 3A 09 5C                    ld      a, (graphic_objs_tbl+1)                 ; plyr_spr_1 X
       movb @graphic_objs_tbl+1,a
;RAM:B5C7 DD 96 01                    sub     1(ix)                                   ; object X
       sb    @1(ix),a
;RAM:B5CA F2 CF B5                    jp      P, loc_B5CF
;RAM:B5CD ED 44                       neg                                             ; abs(delta x)
loc_B5CF:
       abs  a
;RAM:B5CF FE 06                       cp      #6                                      ; less than 6?
       cb   a,@b06h
;RAM:B5D1 30 10                       jr      NC, loc_B5E3                            ; no, skip
       jhe  loc_B5E3
;RAM:B5D3 3A 0A 5C                    ld      a, (graphic_objs_tbl+2)                 ; plyr_spr_1 Y
       movb @graphic_objs_tbl+2,a
;RAM:B5D6 DD 96 02                    sub     2(ix)                                   ; object Y
       sb    @2(ix),a
;RAM:B5D9 F2 DE B5                    jp      P, loc_B5DE
;RAM:B5DC ED 44                       neg                                             ; abs(delta y)
loc_B5DE:
       abs  a
;RAM:B5DE FE 06                       cp      #6                                      ; less than 6?
       cb   a,@b06h
;RAM:B5E0 DA 22 BA                    jp      C, game_over                            ; yes, exit
       jhe  loc_B5E3
       b    @game_over
loc_B5E3:
;RAM:B5E3 DD CB 0D FE                 set     7, 13(ix)                               ; fatal if it hits player
       socb @b80h,@13(ix)
;RAM:B5E7 DD CB 07 CE                 set     1, 7(ix)                                ; ignore object in 3D calculations
       socb @b02h,@7(ix)
;RAM:B5EB DD 36 0B 01                 ld      11(ix), #1                              ; dZ=1
       movb one,@11(ix)
;RAM:B5EF 01 04 04                    ld      bc, #0x404                              ; dX,dY=4
       li   bc,>0404
;RAM:B5F2 CD 65 B9                    call    move_towards_plyr
       bl   @move_towards_plyr
;RAM:B5F5 18 B2                       jr      loc_B5A9
       jmp  loc_B5A9
* ---------------------------------------------------------------------------
* ball (bouncing around)
* - bounces towards wulf
* - bounces away from sabreman
*
upd_182_183:
;RAM:B5FF CD F2 C4                    call    upd_12_to_15                            ; adj(-4,-8)
       bl   @upd_12_to_15_0
;RAM:B602 DD 6E 09                    ld      l, 9(ix)                                ; dX
       movb @9(ix),@l
;RAM:B605 DD 66 0A                    ld      h, 10(ix)                               ; dY
       movb @10(ix),h
;RAM:B608 E5                          push    hl
       mov  hl,*sp+
;RAM:B609 DD 7E 0B                    ld      a, 11(ix)                               ; dZ
;RAM:B60C 32 C2 5B                    ld      (tmp_bouncing_ball_dZ), a               ; tmp store
       movb @11(ix),@tmp_bouncing_ball_dZ
;RAM:B60F CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B612 E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:B613 DD 75 09                    ld      9(ix), l                                ; preserve old dX
       movb @l,@9(ix)
;RAM:B616 DD 74 0A                    ld      10(ix), h                               ; preserve old dY
       movb h,@10(ix)
;RAM:B619 3A 08 5C                    ld      a, (graphic_objs_tbl)                   ; plyr graphic_no
       movb @graphic_objs_tbl,a
;RAM:B61C D6 10                       sub     #0x10
       sb   @b10h,a
;RAM:B61E FE 20                       cp      #0x20 ; ' '                             ; wulf?
;RAM:B620 3E 30                       ld      a, #0x30 ; '0'                          ; jr nc,___
;RAM:B622 30 02                       jr      NC, loc_B626                            ; yes, skip
       cb   a,@b20h                   ; Wulf?
       jhe  !
       movb @b14h,a                  ; jhe
       jmp  loc_B626
;RAM:B624 C6 08                       add     a, #8                                   ; jr,c___
!      movb @b1ah,a                  ; jl
loc_B626:
;RAM:B626 32 5D B6                    ld      (loc_B65D), a                           ; self-modifying code
       movb a,@loc_B65D
;RAM:B629 32 76 B6                    ld      (loc_B676), a                           ; self-modifying code
       movb a,@loc_B676
;RAM:B62C 3A 10 5C                    ld      a, (graphic_objs_tbl+8)                 ; plyr_spr_1 screen
       movb @graphic_objs_tbl+8,tmp0
;RAM:B62F E6 01                       and     #1
;RAM:B631 3E 04                       ld      a, #4
       movb @b04h,a
       andi tmp0,>0100
;RAM:B633 28 07                       jr      Z, loc_B63C
       jeq  loc_B63C
;RAM:B635 47                          ld      b, a
       movb a,b
;RAM:B636 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:B639 E6 03                       and     #3
       andi a,>0300
;RAM:B63B 80                          add     a, b
       ab   b,a
loc_B63C:
;RAM:B63C DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:B640 28 26                       jr      Z, loc_B668                             ; no, skip
       jeq  loc_B668
;RAM:B642 DD 77 0B                    ld      11(ix), a                               ; new dZ
       movb a,@11(ix)
;RAM:B645 3A C2 5B                    ld      a, (tmp_bouncing_ball_dZ)               ; old dZ
       movb @tmp_bouncing_ball_dZ,a
;RAM:B648 A7                          and     a                                       ; >=0?
;RAM:B649 F2 4F B6                    jp      P, loc_B64F                             ; yes, skip
       jgt  loc_B64F
       jeq  loc_B64F
;RAM:B64C CD 2E B4                    call    audio_B42E
;      TODO
loc_B64F:
;RAM:B64F ED 5F                       ld      a, r                                    ; random
       bl   @ld_a_r
;RAM:B651 E6 01                       and     #1
       andi a,>0100
;RAM:B653 28 19                       jr      Z, loc_B66E
       jeq  loc_B66E
;RAM:B655 3A 0A 5C                    ld      a, (graphic_objs_tbl+2)                 ; plyr_spr_1 Y
       movb @graphic_objs_tbl+2,a
;RAM:B658 DD BE 02                    cp      2(ix)                                   ; <objY?
;RAM:B65B 3E 02                       ld      a, #2
       cb   a,@2(ix)
loc_B65D:
;RAM:B65D 30 02                       jr      NC, loc_B661                            ; no, skip (self-modifying)
       jhe  loc_B661
;RAM:B65F ED 44                       neg                                             ; towards player
       movb @bfeh,a                   ; a=-2
       jmp  !
loc_B661:
       movb @b02h,a                   ; a=2
;RAM:B661 DD 77 0A                    ld      10(ix), a                               ; new dY
!      movb a,@10(ix)
;RAM:B664 DD 36 09 00                 ld      9(ix), #0                               ; new dX=0
       szcb mone,@9(ix)
loc_B668:
;RAM:B668 CD 85 B9                    call    toggle_next_prev_sprite
       bl   @toggle_next_prev_sprite
;RAM:B66B C3 56 B8                    jp      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
* ---------------------------------------------------------------------------
loc_B66E:
;RAM:B66E 3A 09 5C                    ld      a, (graphic_objs_tbl+1)                 ; plyr_spr_1 X
       movb @graphic_objs_tbl+1,a
;RAM:B671 DD BE 01                    cp      1(ix)                                   ; < objX?
       cb   a,@1(ix)
;RAM:B674 3E 02                       ld      a, #2
loc_B676:
;RAM:B676 30 02                       jr      NC, loc_B67A                            ; (self-modifying)
       jl   loc_B67A
;RAM:B678 ED 44                       neg                                             ; towards player
       movb @bfeh,a                   ; a=-2
       jmp  !
loc_B67A:
       movb @b02h,a                   ; a=2
;RAM:B67A DD 77 09                    ld      9(ix), a                                ; new dX
!      movb a,@9(ix)
;RAM:B67D DD 36 0A 00                 ld      10(ix), #0                              ; new dY=0
       szcb mone,@10(ix)
;RAM:B681 18 E5                       jr      loc_B668
       jmp  loc_B668
*
* ---------------------------------------------------------------------------
* block (dropping)
upd_91:
;RAM:B683 CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
;RAM:B686 DD CB 0D 5E                 bit     3, 13(ix)                               ; triggered?
       movb  @13(ix),tmp0
       andi tmp0,>0800
;RAM:B68A C8                          ret     Z                                       ; no, exit
       jne  !
       dect sp
       mov  *sp,r11
       rt
;RAM:B68B DD CB 0D 9E                 res     3, 13(ix)                               ; reset triggered
!      szcb @b08h,@13(ix)
;RAM:B68F DD 36 0B 00                 ld      11(ix), #0                              ; dZ=0
       szcb mone,@11(ix)
;RAM:B693 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B696 DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:B69A 20 03                       jr      NZ, loc_B69F                            ; yes, skip
       jne  loc_B69F
;RAM:B69C CD 51 B4                    call    audio_B451
;      TODO
loc_B69F:
;RAM:B69F C3 92 C6                    jp      set_wipe_and_draw_flags
       bl   @set_deadly_wipe_and_draw_flags
* ---------------------------------------------------------------------------
* collapsing block
upd_143:
;RAM:B6A2 CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
;RAM:B6A5 DD CB 0D 5E                 bit     3, 13(ix)                               ; triggered?
       movb @13(ix),tmp0
       andi tmp0,>0800
;RAM:B6A9 C8                          ret     Z                                       ; no, return
       jne  !
       dect sp
       mov  *sp,r11
       rt
;RAM:B6AA DD 36 00 B8                 ld      0(ix), #184                             ; graphic_no = sparkles
       movb @bb8h,*ix
;RAM:B6AE C3 2B BF                    jp      upd_112_to_118_184
       b    @upd_112_to_118_184
* ---------------------------------------------------------------------------
* block (moving NS)
upd_55:
;RAM:B6B1 CD 62 B4                    call    audio_B462
;      TODO
;RAM:B6B4 21 0A 02                    ld      hl, #0x20A                              ; IX+2,IX+10 (Y,dY)
       li   hl,>020a
;RAM:B6B7 18 06                       jr      loc_B6BF
       jmp  loc_B6BF
* ---------------------------------------------------------------------------
* block (moving EW)
upd_54:
;RAM:B6B9 CD 5D B4                    call    audio_B45D
;      TODO
;RAM:B6BC 21 09 01                    ld      hl, #0x109                              ; IX+1,IX+9 (X,dX)
       li   hl,>0109
loc_B6BF:
;RAM:B6BF 7C                          ld      a, h
       movb h,a
;RAM:B6C0 32 E0 B6                    ld      (loc_B6DE+2), a                         ; IX+2/1
       movb a,@loc_B6DE+3             ; one more byte on TI
;RAM:B6C3 7D                          ld      a, l
       movb @l,a
;RAM:B6C4 32 F1 B6                    ld      (loc_B6EF+2), a                         ; IX+10/9
       movb a,@loc_B6EF+3             ; one more byte on TI
;RAM:B6C7 CD E3 C4                    call    upd_6_7                                 ; adj(-8,-16)
       bl   @upd_6_7_0
;RAM:B6CA DD E5                       push    ix
;RAM:B6CC C1                          pop     bc
       mov  ix,bc
;RAM:B6CD 79                          ld      a, c
       movb @c,a
;RAM:B6CE 0F                          rrca
       srl  a,1
;RAM:B6CF E6 10                       and     #0x10
       andi a,>1000
;RAM:B6D1 4F                          ld      c, a
       movb a,@c
;RAM:B6D2 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:B6D5 81                          add     a, c
       ab   @c,a
;RAM:B6D6 CB 67                       bit     4, a
       movb a,tmp0
       andi tmp0,>1000
;RAM:B6D8 28 01                       jr      Z, loc_B6DB
       jeq  loc_B6DB
;RAM:B6DA 2F                          cpl
       inv  a
loc_B6DB:
;RAM:B6DB E6 0F                       and     #0xF
       andi a,>0f00
;RAM:B6DD 4F                          ld      c, a
       movb a,@c
loc_B6DE:
;RAM:B6DE DD 7E 01                    ld      a, 1(ix)                                ; modified code - X/Y
       movb @1(ix),a
;RAM:B6E1 C6 08                       add     a, #8
       ab   @b08h,a
;RAM:B6E3 E6 0F                       and     #0xF
       andi a,>0f00
;RAM:B6E5 B9                          cp      c
       movb a,tmp0
       cb   a,@c
;RAM:B6E6 CA 92 C6                    jp      Z, set_wipe_and_draw_flags
       jne  !
       b    @set_wipe_and_draw_flags
;RAM:B6E9 3E 01                       ld      a, #1
!      movb one,a
;RAM:B6EB 38 02                       jr      C, loc_B6EF
       cb   tmp0,@c
       jl   loc_B6EF
;RAM:B6ED ED 44                       neg
       inv  a
       ab   one,a
loc_B6EF:
;RAM:B6EF DD 77 09                    ld      9(ix), a                                ; modified code - dX/dY
       movb a,@9(ix)
;RAM:B6F2 DD 36 0B 01                 ld      11(ix), #1                              ; pre-load dZ=1 (no falling)
       movb one,@11(ix)
;RAM:B6F6 C3 AF B5                    jp      dec_dZ_wipe_and_draw
       b    @dec_dZ_wipe_and_draw
* ---------------------------------------------------------------------------
* guard and wizard (bottom half)
upd_144_to_149_152_to_157:
;RAM:B6F9 CD DD C4                    call    adj_m6_m12
       bl   @adj_m6_m12
;RAM:B6FC DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:B6FF DD B6 0A                    or      10(ix)                                  ; dX & dY both 0?
       socb @10(ix),a
;RAM:B702 C8                          ret     Z                                       ; yes, exit
       jne  !
       dect sp
       mov  *sp,r11
       rt
;RAM:B703 CD AD B4                    call    audio_guard_wizard
!
;RAM:B706 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:B709 DD BE 0A                    cp      10(ix)                                  ; dX<dY?
       cb   a,@10(ix)
;RAM:B70C 38 18                       jr      C, loc_B726                             ; yes, go
       jl   loc_B726
;RAM:B70E CB 7F                       bit     7, a                                    ; dX<0?
       movb a,a
;RAM:B710 20 0E                       jr      NZ, loc_B720                            ; yes, go
       jlt  loc_B720
;RAM:B712 DD CB 00 DE                 set     3, 0(ix)                                ; graphic_no
       socb @b08h,*ix
loc_B716:
;RAM:B716 DD CB 07 B6                 res     6, 7(ix)                                ; clr hflip
       szcb @b40h,@7(ix)
loc_B71A:
;RAM:B71A CD 7F C9                    call    animate_human_legs
       bl   @animate_human_legs
;RAM:B71D C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
loc_B720:
;RAM:B720 DD CB 00 9E                 res     3, 0(ix)                                ; graphic_no
       szcb @b08h,*ix
;RAM:B724 18 F0                       jr      loc_B716
       jmp  loc_B716
* ---------------------------------------------------------------------------
loc_B726:
;RAM:B726 DD CB 0A 7E                 bit     7, 10(ix)                               ; dY<0?
       movb @10(ix),tmp0
       andi tmp0,>8000
;RAM:B72A 28 0A                       jr      Z, loc_B736                             ; no, go
       jeq  loc_B736
;RAM:B72C DD CB 00 DE                 set     3, 0(ix)                                ; graphic_no
       socb @b08h,*ix
loc_B730:
;RAM:B730 DD CB 07 F6                 set     6, 7(ix)                                ; set hflip
       socb @b40h,@7(ix)
;RAM:B734 18 E4                       jr      loc_B71A
       jmp  loc_B71A
* ---------------------------------------------------------------------------
loc_B736:
;RAM:B736 DD CB 00 9E                 res     3, 0(ix)                                ; graphic_no
       szcb @b08h,*ix
;RAM:B73A 18 F4                       jr      loc_B730
       jmp  loc_B730
* ---------------------------------------------------------------------------
;RAM:B73C             ; guard (EW)
;RAM:B73C
upd_150_151:
;RAM:B73C CD 0B C5                    call    adj_p7_m12
       bl   @adj_p7_m12
;RAM:B73F DD CB 0D 46                 bit     0, 13(ix)                               ; E or W?
       movb @13(ix),tmp0
;RAM:B743 3E 02                       ld      a, #2
       movb @b02h,a
;RAM:B745 20 02                       jr      NZ, loc_B749                            ; E, skip
       andi tmp0,>0100
       jne  loc_B749
;RAM:B747 ED 44                       neg
       inv  a
       ab   one,a
loc_B749:
;RAM:B749 DD 77 09                    ld      9(ix), a                                ; dX=+/-2
       movb a,@9(ix)
;RAM:B74C DD 77 29                    ld      0x29(ix), a                             ; and for botton half
       movb a,@>29(ix)
;RAM:B74F CD 6C B7                    call    set_guard_wizard_sprite
       bl   @set_guard_wizard_sprite
;RAM:B752 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B755 DD CB 0C 46                 bit     0, 12(ix)                               ; X OOB?
       movb @12(ix),tmp0
       andi tmp0,>0100
;RAM:B759 28 08                       jr      Z, loc_B763                             ; no, skip
       jeq  loc_B763
;RAM:B75B DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:B75E EE 01                       xor     #1                                      ; toggle direction
       xor  one,a
;RAM:B760 DD 77 0D                    ld      13(ix), a
       movb a,@13(ix)
loc_B763:
;RAM:B763 DD 7E 01                    ld      a, 1(ix)                                ; X
;RAM:B766 DD 77 21                    ld      0x21(ix), a                             ; copy to bottom half
       movb @1(ix),@>21(ix)
;RAM:B769 C3 56 B8                    jp      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
*
* =============== S U B R O U T I N E =======================================
set_guard_wizard_sprite:
;RAM:B76C DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:B76F DD B6 0A                    or      10(ix)                                  ; dY - both zero?
       socb @10(ix),a
;RAM:B772 C8                          ret     Z                                       ; yes, exit
       jne  !
       rt
;RAM:B773 DD 7E 09                    ld      a, 9(ix)                                ; dX
!      movb @9(ix),a
;RAM:B776 DD BE 0A                    cp      10(ix)                                  ; dX<dY?
       cb   a,@10(ix)
;RAM:B779 38 13                       jr      C, loc_B78E                             ; yes, go
       jl   loc_B78E
;RAM:B77B CB 7F                       bit     7, a                                    ; dX<0?
       movb a,a
;RAM:B77D 20 09                       jr      NZ, loc_B788                            ; yes, go
       jlt  loc_B788
;RAM:B77F DD CB 00 C6                 set     0, 0(ix)                                ; sprite 31/159
       socb one,*ix
loc_B783:
;RAM:B783 DD CB 07 B6                 res     6, 7(ix)                                ; clear hflip
       szcb @b40h,@7(ix)
;RAM:B787 C9                          ret
       rt
* ---------------------------------------------------------------------------
loc_B788:
;RAM:B788 DD CB 00 86                 res     0, 0(ix)                                ; sprite 30/158
       szcb one,*ix
;RAM:B78C 18 F5                       jr      loc_B783
       jmp  loc_B783
* ---------------------------------------------------------------------------
loc_B78E:
;RAM:B78E DD CB 0A 7E                 bit     7, 10(ix)                               ; dY<0?
       movb @10(ix),tmp0
       andi tmp0,>8000
;RAM:B792 28 09                       jr      Z, loc_B79D                             ; no, go
       jeq  loc_B79D
;RAM:B794 DD CB 00 C6                 set     0, 0(ix)                                ; sprite 31/139
       socb one,*ix
loc_B798:
;RAM:B798 DD CB 07 F6                 set     6, 7(ix)                                ; set hflip
       socb @b40h,@7(ix)
;RAM:B79C C9                          ret
       rt
* ---------------------------------------------------------------------------
loc_B79D:
;RAM:B79D DD CB 00 86                 res     0, 0(ix)                                ; sprite 30/158
       szcb one,*ix
;RAM:B7A1 18 F5                       jr      loc_B798
       jmp  loc_B798
*
* End of function set_guard_wizard_sprite
*
* ---------------------------------------------------------------------------
* gargoyle
*
upd_22:
;RAM:B7A3 CD 5C B8                    call    set_both_deadly_flags
       bl   @set_both_deadly_flags
;RAM:B7A6 C3 FC C4                    jp      adj_m7_m12                              ; adj(-7,-12)
       b    @adj_m7_m12_1
* ---------------------------------------------------------------------------
;RAM:B7A9             ; spiked ball
;RAM:B7A9
upd_63:
;RAM:B7A9 CD 5C B8                    call    set_both_deadly_flags
       bl   @set_both_deadly_flags
;RAM:B7AC CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
;RAM:B7AF 3A C0 5B                    ld      a, (disable_spike_ball_drop)
       movb @disable_spike_ball_drop,a
;RAM:B7B2 A7                          and     a
;RAM:B7B3 C0                          ret     NZ
       jne  upd_63_return
;RAM:B7B4 DD CB 0D 56                 bit     2, 13(ix)                               ; is this one dropping?
       movb @13(ix),tmp0
       andi tmp0,>0400
;RAM:B7B8 20 13                       jr      NZ, spiked_ball_drop                    ; yes, go
       jne  spiked_ball_drop
;RAM:B7BA 21 BF 5B                    ld      hl, #is_spike_ball_dropping
       li   hl,is_spike_ball_dropping
;RAM:B7BD 7E                          ld      a, (hl)
       movb *hl,a
;RAM:B7BE A7                          and     a                                       ; is another ball already dropping?
;RAM:B7BF C0                          ret     NZ                                      ; yes, exit
       jne  upd_63_return
;RAM:B7C0 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:B7C3 FE 10                       cp      #16                                     ; 1-in-16 chance
       cb   a,@b10h
;RAM:B7C5 D0                          ret     NC
       jhe  upd_63_return
;RAM:B7C6 DD CB 0D D6                 set     2, 13(ix)                               ; flag this one as dropping
       socb @b04h,@13(ix)
;RAM:B7CA 36 01                       ld      (hl), #1                                ; flag a spike ball dropping
       movb one,*hl
;RAM:B7CC C9                          ret
upd_63_return:
       dect sp
       mov  *sp,r11
       b    *r11
* ---------------------------------------------------------------------------
spiked_ball_drop:
;RAM:B7CD CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B7D0 DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB? (hit the floor?)
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:B7D4 20 06                       jr      NZ, loc_B7DC                            ; yes, go
       jne  loc_B7DC
;RAM:B7D6 CD 51 B4                    call    audio_B451
;      TODO
draw_spiked_ball:
;RAM:B7D9 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
loc_B7DC:
;RAM:B7DC DD CB 0D 96                 res     2, 13(ix)                               ; flag this no longer dropping
       szcb @b04h,@13(ix)
;RAM:B7E0 21 BF 5B                    ld      hl, #is_spike_ball_dropping
       li   hl,is_spike_ball_dropping
;RAM:B7E3 36 00                       ld      (hl), #0                                ; flag no spiked balls dropping
       szcb mone,*hl
;RAM:B7E5 18 F2                       jr      draw_spiked_ball
       jmp  draw_spiked_ball
* ---------------------------------------------------------------------------
* spikes
upd_23:
;RAM:B7E7 CD 5C B8                    call    set_both_deadly_flags
       bl   @set_both_deadly_flags
;RAM:B7EA C3 E3 C4                    jp      upd_6_7
       b    @upd_6_7
* ---------------------------------------------------------------------------
* fire (moving EW)
upd_86_87:
;RAM:B7ED CD F2 C4                    call    upd_12_to_15
       bl   @upd_12_to_15_0
;RAM:B7F0 DD 36 0B 01                 ld      11(ix), #1                              ; pre-load dZ=1
       movb one,@11(ix)
;RAM:B7F4 DD CB 0D 46                 bit     0, 13(ix)                               ; moving east?
;RAM:B7F8 3E 02                       ld      a, #2
       movb @b02h,a
       movb @13(ix),tmp0
       andi tmp0,>0100
;RAM:B7FA 20 02                       jr      NZ, loc_B7FE                            ; yes, skip
       jne  loc_B7FE
;RAM:B7FC ED 44                       neg
       inv  a
       ab   one,a
loc_B7FE:
;RAM:B7FE DD 77 09                    ld      9(ix), a                                ; dX=+/-2
       movb a,@9(ix)
;RAM:B801 CD 5D B4                    call    audio_B45D
;      TODO
;RAM:B804 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B807 DD CB 0C 46                 bit     0, 12(ix)                               ; X OOB?
;RAM:B80B 3E 01                       ld      a, #1
       movb one,a
       movb @12(ix),tmp0
       andi tmp0,>0100
;RAM:B80D 18 20                       jr      loc_B82F
       jmp  loc_B82F
* ---------------------------------------------------------------------------
* fire (moving NS)
upd_180_181:
;RAM:B80F CD F2 C4                    call    upd_12_to_15
       bl   @upd_12_to_15_0
;RAM:B812 DD 36 0B 01                 ld      11(ix), #1                              ; dZ=1
       movb one,@11(ix)
;RAM:B816 DD CB 0D 4E                 bit     1, 13(ix)                               ; moving north?
;RAM:B81A 3E 02                       ld      a, #2
       movb @b02h,a
       movb @13(ix),tmp0
       andi tmp0,>0200
;RAM:B81C 20 02                       jr      NZ, loc_B820                            ; yes, skip
       jne  loc_B820
;RAM:B81E ED 44                       neg
       inv  a
       ab   one,a
loc_B820:
;RAM:B820 DD 77 0A                    ld      10(ix), a                               ; dY=+/-2
       movb a,@10(ix)
;RAM:B823 CD 62 B4                    call    audio_B462
;      TODO
;RAM:B826 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B829 DD CB 0C 4E                 bit     1, 12(ix)                               ; Y OOB?
;RAM:B82D 3E 02                       ld      a, #2
       movb @b02h,a
       movb @12(ix),tmp0
       andi tmp0,>0200
loc_B82F:
;RAM:B82F 28 09                       jr      Z, loc_B83A
       jeq  loc_B83A
;RAM:B831 DD AE 0D                    xor     13(ix)                                  ; toggle bit 1/2
       movb @13(ix),tmp0
       xor tmp0,a
;RAM:B834 DD 77 0D                    ld      13(ix), a
       movb a,@13(ix)
;RAM:B837 CD 2E B4                    call    audio_B42E
;      TODO
loc_B83A:
;RAM:B83A CD 85 B9                    call    toggle_next_prev_sprite
       bl   @toggle_next_prev_sprite
;RAM:B83D 18 17                       jr      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
* ---------------------------------------------------------------------------
* fire (stationary) (not used)
upd_176_177:
;RAM:B83F CD F2 C4                    call    upd_12_to_15
       bl   @upd_12_to_15_0
;RAM:B842 3A BC 5B                    ld      a, (fire_seed)
       movb @fire_seed,a
;RAM:B845 E6 01                       and     #1
       andi a,>0100
;RAM:B847 C8                          ret     Z
       jne  !
       dect sp
       mov  *sp,r11
       rt
;RAM:B848 3A A5 5B                    ld      a, (seed_3)
!      movb @seed_3,a
;RAM:B84B E6 40                       and     #0x40 ; '@'
       andi a,>4000
;RAM:B84D DD AE 07                    xor     7(ix)                                   ; randomise hflip
       movb @7(ix),tmp0
       xor  tmp0,a
;RAM:B850 DD 77 07                    ld      7(ix), a
       movb a,@7(ix)
;RAM:B853 CD 85 B9                    call    toggle_next_prev_sprite
       bl   @toggle_next_prev_sprite
* ---------------------------------------------------------------------------
set_deadly_wipe_and_draw_flags:
;RAM:B856 CD 5C B8                    call    set_both_deadly_flags
       bl   @set_both_deadly_flags
;RAM:B859 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
*
* =============== S U B R O U T I N E =======================================
*
set_both_deadly_flags:
;RAM:B85C DD 7E 0D                    ld      a, 13(ix)
;RAM:B85F F6 A0                       or      #0xA0 ; '�'                             ; fatal if you hit it, it hits you
;RAM:B861 DD 77 0D                    ld      13(ix), a
       socb @ba0h,@13(ix)
       rt
*
* End of function set_both_deadly_flags
*
* ---------------------------------------------------------------------------
* ball up/down
upd_178_179:
;       szcb @b02h,@7(ix)              ; TODO: Reset ignore bit, sometimes this bit is set
;RAM:B865 CD F2 C4                    call    upd_12_to_15                            ; adjust (-4,-8)
       bl   @upd_12_to_15_0
;RAM:B868 3A BD 5B                    ld      a, (ball_bounce_height)
       movb @ball_bounce_height,a
;RAM:B86B A7                          and     a                                       ; bouncing?
;RAM:B86C 20 08                       jr      NZ, loc_B876                            ; yes, skip
       jne  loc_B876
;RAM:B86E DD 7E 03                    ld      a, 3(ix)                                ; Z
       movb @3(ix),a
;RAM:B871 C6 20                       add     a, #32                                  ; calc bounce height
       ab   @b20h,a
;RAM:B873 32 BD 5B                    ld      (ball_bounce_height), a
       movb a,@ball_bounce_height
loc_B876:
;RAM:B876 CD 85 B9                    call    toggle_next_prev_sprite                 ; toggle 178/179
       bl   @toggle_next_prev_sprite
;RAM:B879 CD 51 B4                    call    audio_B451
;      TODO
;RAM:B87C DD CB 0D 56                 bit     2, 13(ix)                               ; dir=up?
       movb @13(ix),tmp0
       andi tmp0,>0400
;RAM:B880 20 12                       jr      NZ, ball_up                             ; yes, skip
       jne  ball_up
;RAM:B882 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B885 DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:B889 28 07                       jr      Z, loc_B892                             ; no, skip
       jeq  loc_B892
;RAM:B88B DD CB 0D D6                 set     2, 13(ix)                               ; set dir=up
       socb @b04h,@13(ix)
;RAM:B88F CD 2E B4                    call    audio_B42E
;      TODO
loc_B892:
;RAM:B892 18 C2                       jr      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
* ---------------------------------------------------------------------------
ball_up:
;RAM:B894 DD 36 0B 03                 ld      11(ix), #3                              ; dZ=3
       movb @b03h,@11(ix)
;RAM:B898 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl  @dec_dZ_and_update_XYZ
;RAM:B89B 3A BD 5B                    ld      a, (ball_bounce_height)
       movb @ball_bounce_height,a
;RAM:B89E DD BE 03                    cp      3(ix)                                   ; Z < ball_bounce_height?
       cb   a,@3(ix)
;RAM:B8A1 30 EF                       jr      NC, loc_B892                            ; yes, go
       jhe  loc_B892
;RAM:B8A3 DD CB 0D 96                 res     2, 13(ix)                               ; set dir=down
       szcb @b04h,@13(ix)
;RAM:B8A7 18 E9                       jr      loc_B892
       jmp  loc_B892
* ---------------------------------------------------------------------------
* even more sparkles (showing next object required)
upd_160_to_163:
;RAM:B8DA CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:B8DD 3A 48 5C                    ld      a, (special_objs_here)
       movb @special_objs_here,a
;RAM:B8E0 A7                          and     a                                       ; null?
;RAM:B8E1 C2 5E B9                    jp      NZ, upd_111                             ; no, skip
       jne  upd_111
;RAM:B8E4 DD CB 07 CE                 set     1, 7(ix)                                ; ignore in 3D calcs
       socb @b02h,@7(ix)
;RAM:B8E8 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B8EB CD 8C B9                    call    next_graphic_no_mod_4
       bl   @next_graphic_no_mod_4
;RAM:B8EE DD 7E 03                    ld      a, 3(ix)                                ; Z
;RAM:B8F3 DD 36 0B 02                 ld      11(ix), #2                              ; dZ=2
;RAM:B8F1 FE A0                       cp      #160
       movb @b02h,@11(ix)
       movb @3(ix),a
       cb   a,@ba0h
;RAM:B8F7 38 1D                       jr      C, loc_B916
       jl   loc_B916
;RAM:B8F9 DD 36 0B 01                 ld      11(ix), #1                              ; dZ=1
       movb one,@11(ix)
;RAM:B8FD 3A 08 5C                    ld      a, (graphic_objs_tbl)                   ; plyr_spr_1 (legs) graphic_no
       movb @graphic_objs_tbl,a
;RAM:B900 D6 30                       sub     #0x30 ; '0'
       sb   @b30h,a
;RAM:B902 FE 10                       cp      #0x10                                   ; wulf?
       cb   a,@b10h
;RAM:B904 38 13                       jr      C, loc_B919                             ; yes, go
       jl   loc_B919
;RAM:B906 DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
       movb *ix,a
;RAM:B909 E6 03                       and     #3
       andi a,>0300
;RAM:B90B 20 09                       jr      NZ, loc_B916
       jne  loc_B916
;RAM:B90D CD 74 C2                    call    ret_next_obj_required
       bl   @ret_next_obj_required
;RAM:B910 7E                          ld      a, (hl)
       movb *hl,a
;RAM:B911 F6 A8                       or      #168
       socb @ba8h,a
;RAM:B913 DD 77 00                    ld      0(ix), a                                ; show next object required
       movb a,*ix
loc_B916:
;RAM:B916 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
* if wulf, no reveal of next object
loc_B919:
;RAM:B919 DD CB 00 D6                 set     2, 0(ix)                                ; graphic_no
       socb @b04h,*ix
;RAM:B91D DD CB 07 8E                 res     1, 7(ix)                                ; don't ignore in 3D calcs
       szcb @b02h,@7(ix)
;RAM:B921 18 F3                       jr      loc_B916
       jmp  loc_B916
* ---------------------------------------------------------------------------
* special objs when 1st being put into cauldron
upd_168_to_175:
;RAM:B923 CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:B926 DD 36 00 A0                 ld      0(ix), #160                             ; graphic_no (sparkles)
       movb @ba0h,*ix
;RAM:B92A 18 EA                       jr      loc_B916
       jmp  loc_b916
* ---------------------------------------------------------------------------
* repel spell
upd_164_to_167:
;RAM:B92C CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:B92F DD 7E 08                    ld      a, 8(ix)                                ; object screen
       movb @8(ix),a
;RAM:B932 FE 88                       cp      #136                                    ; cauldron room?
       cb   a,@b88h
;RAM:B934 28 0C                       jr      Z, loc_B942                             ; yes, go
       jeq  loc_B942
;RAM:B936 3A 0F 5C                    ld      a, (graphic_objs_tbl+7)
       movb @graphic_objs_tbl+7,a
;RAM:B939 CB 47                       bit     0, a                                    ; near arch?
       movb a,tmp0
       andi a,>0100
;RAM:B93B 28 05                       jr      Z, loc_B942                             ; no, go
       jeq  loc_B942
;RAM:B93D 01 01 01                    ld      bc, #0x101                              ; dX,dY=1
       li   bc,>0101
;RAM:B940 18 03                       jr      loc_B945
       jmp  loc_B945
* ---------------------------------------------------------------------------
loc_B942:
;RAM:B942 01 04 04                    ld      bc, #0x404                              ; dX,dY=4
       li   bc,>0404
loc_B945:
;RAM:B945 CD 65 B9                    call    move_towards_plyr
       bl   @move_towards_plyr
;RAM:B948 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B94B CD 8C B9                    call    next_graphic_no_mod_4
       bl   @next_graphic_no_mod_4
;RAM:B94E DD 7E 08                    ld      a, 8(ix)                                ; object screen
       movb @8(ix),a
;RAM:B951 FE 88                       cp      #136                                    ; cauldron room?
       cb   a,@b88h
;RAM:B953 20 0D                       jr      NZ, loc_B962                            ; no, skip
       jne  loc_B962
;RAM:B955 3A 08 5C                    ld      a, (graphic_objs_tbl)                   ; plyr_spr_1 graphic_no
       movb @graphic_objs_tbl,a
;RAM:B958 D6 10                       sub     #0x10
       sb   @b10h,a
;RAM:B95A FE 40                       cp      #0x40 ; '@'
       cb   a,@b40h
;RAM:B95C 38 04                       jr      C, loc_B962
       jl   loc_B962
*
* final sparkles in cauldron
*
upd_111:
;RAM:B95E DD 36 00 01                 ld      0(ix), #1                               ; invalid
       movb one,*ix
loc_B962:
;RAM:B962 C3 32 C2                    jp      audio_B467_wipe_and_draw
       b    @audio_B467_wipe_and_draw
*
* =============== S U B R O U T I N E =======================================
*
move_towards_plyr:
;RAM:B965 21 09 5C                    ld      hl, # graphic_objs_tbl+1                ; plyr_spr_1 X
       li   hl,graphic_objs_tbl+1
;RAM:B968 DD 7E 01                    ld      a, 1(ix)                                ; object X
       movb @1(ix),a
;RAM:B96B 96                          sub     (hl)                                    ; -plyrX
;RAM:B96C 23                          inc     hl                                      ; plyr_spr_1 Y
       sb   one,*hl+
;RAM:B96D 79                          ld      a, c                                    ; 1or4
       movb @c,a
;RAM:B96E FA 73 B9                    jp      M, loc_B973                             ; plyr E? yes, go
       jlt  loc_B973
;RAM:B971 ED 44                       neg
       inv  a
       ab   one,a
loc_B973:
;RAM:B973 DD 77 09                    ld      9(ix), a                                ; dX (towards player)
       movb a,@9(ix)
;RAM:B976 DD 7E 02                    ld      a, 2(ix)                                ; object Y
       movb @2(ix),a
;RAM:B979 96                          sub     (hl)                                    ; -plyrY
;RAM:B97A 23                          inc     hl                                      ; plyrZ
       sb   one,*hl+
;RAM:B97B 78                          ld      a, b                                    ; 1or4
       movb b,a
;RAM:B97C FA 81 B9                    jp      M, loc_B981                             ; plyr N? yes, go
       jlt  loc_B981
;RAM:B97F ED 44                       neg
       inv  a
       ab   one,a
loc_B981:
;RAM:B981 DD 77 0A                    ld      10(ix), a                               ; dY (towards player)
       movb a,@10(ix)
;RAM:B984 C9                          ret
       rt
*
* End of function move_towards_plyr
*
* =============== S U B R O U T I N E =======================================
*
toggle_next_prev_sprite:
;RAM:B985 DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
       movb *ix,a
;RAM:B988 EE 01                       xor     #1                                      ; toggle next/prev sprite
       xor  one,a
;RAM:B98A 18 0C                       jr      save_graphic_no
       jmp  save_graphic_no
* ---------------------------------------------------------------------------
next_graphic_no_mod_4:
;RAM:B98C DD 7E 00                    ld      a, 0(ix)                                 ; graphic no.
       movb *ix,a
;RAM:B98F 4F                          ld      c, a
       movb a,@c
;RAM:B990 E6 FC                       and     #0xFC ; '�'                             ; mask off low 2 bits
       andi a,>fc00
;RAM:B992 47                          ld      b, a
       movb a,b
;RAM:B993 79                          ld      a, c
       movb @c,a
;RAM:B994 3C                          inc     a
       ab   one,a
;RAM:B995 E6 03                       and     #3                                      ; inc low 2 bits
       andi a,>0300
;RAM:B997 B0                          or      b                                       ; mask them back in
       socb b,a
save_graphic_no:
;RAM:B998 DD 77 00                    ld      0(ix), a                                ; store new graphic no
       movb a,*ix
;RAM:B99B C9                          ret
       rt
*
* End of function toggle_next_prev_sprite
*
* ---------------------------------------------------------------------------
* cauldron (bottom)
upd_141:
;RAM:B99C C3 06 C5                    jp      upd_88_to_90
       b    @upd_88_to_90
* ---------------------------------------------------------------------------
* cauldron (top)
upd_142:
;RAM:B99F 21 E8 0C                    ld      hl, #0xCE8                              ; +12, -24
       li   hl,>0ce8
;RAM:B9A2 C3 2B C7                    jp      set_pixel_adj
       b    @set_pixel_adj_1
* ---------------------------------------------------------------------------
* guard and wizard (top half)
upd_30_31_158_159:
;RAM:B9A5 CD 10 C5                    call    adj_p3_m12
       bl   @adj_p3_m12
;RAM:B9A8 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:B9AB CD CC B9                    call    move_guard_wizard_NSEW
       bl   @move_guard_wizard_NSEW
;RAM:B9AE DD 75 09                    ld      9(ix), l                                ; dX
       movb @l,@9(ix)
;RAM:B9B1 DD 75 29                    ld      0x29(ix), l                             ; next obj dX
       movb @l,@>29(ix)
;RAM:B9B4 DD 74 0A                    ld      10(ix), h                               ; dY
       movb h,@10(ix)
;RAM:B9B7 DD 74 2A                    ld      0x2A(ix), h                             ; next obj dY
       movb h,@>2A(ix)
;RAM:B9BA DD 7E 01                    ld      a, 1(ix)                                ; X
;RAM:B9BD DD 77 21                    ld      0x21(ix), a                             ; copy to next obj X
       movb @1(ix),@>21(ix)
;RAM:B9C0 DD 7E 02                    ld      a, 2(ix)                                ; Y
;RAM:B9C3 DD 77 22                    ld      0x22(ix), a                             ; copy to next obj Y
       movb @2(ix),@>22(ix)
;RAM:B9C6 CD 6C B7                    call    set_guard_wizard_sprite
       bl   @set_guard_wizard_sprite
;RAM:B9C9 C3 56 B8                    jp      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
*
* =============== S U B R O U T I N E =======================================
*
move_guard_wizard_NSEW:
;RAM:B9CC 01 D8 B9                    ld      bc, #guard_NSEW_tbl                     ; jump table
       li   bc,guard_NSEW_tbl
;RAM:B9CF DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:B9D2 E6 03                       and     #3                                      ; direction (N/S/E/W)
       andi a,>0300
;RAM:B9D4 6F                          ld      l, a
       movb a,@l
;RAM:B9D5 C3 DB AF                    jp      jump_to_tbl_entry
       b   @jump_to_tbl_entry
*
* End of function move_guard_wizard_NSEW
* ---------------------------------------------------------------------------
guard_NSEW_tbl:
       data guard_W
       data guard_N
       data guard_E
       data guard_S
* ---------------------------------------------------------------------------
guard_W:
;RAM:B9E0 21 FE 00                    ld      hl, #0xFE ; '�'                        ; dY=0, dX=-2
       li   hl,>00fe
;RAM:B9E3 DD CB 0C 46                 bit     0, 12(ix)                               ; X OOB?
       movb @12(ix),tmp0
       andi tmp0,>0100
;RAM:B9E7 C8                          ret     Z                                       ; no, exit
       jne  !
       rt
;RAM:B9E8 21 00 02                    ld      hl, #0x200                              ; dY=2, dX=0
!      li   hl,>0200
next_guard_dir:
;RAM:B9EB DD 7E 0D                    ld      a, 13(ix)                               ; direction
       movb @13(ix),a
;RAM:B9EE 4F                          ld      c, a
       movb a,@c
;RAM:B9EF 3C                          inc     a
       ab   one,a
;RAM:B9F0 E6 03                       and     #3                                      ; relevant bits
       andi a,>0300
;RAM:B9F2 47                          ld      b, a
       movb a,b
;RAM:B9F3 79                          ld      a, c
       movb @c,a
;RAM:B9F4 E6 FC                       and     #0xFC ; '�'
       andi a,>fc00
;RAM:B9F6 B0                          or      b                                       ; inc lowest 2 bits (mod 4)
       socb b,a
;RAM:B9F7 DD 77 0D                    ld      13(ix), a
       movb a,@13(ix)
;RAM:B9FA C9                          ret
       rt
* ---------------------------------------------------------------------------
guard_N:                                                        ; dY=+2, dX=0
;RAM:B9FB 21 00 02                    ld      hl, #0x200
       li   hl,>0200
;RAM:B9FE DD CB 0C 4E                 bit     1, 12(ix)                               ; Y OOB?
       movb @12(ix),tmp0
       andi tmp0,>0200
;RAM:BA02 C8                          ret     Z                                       ; no, exit
       jne  !
       rt
;RAM:BA03 21 02 00                    ld      hl, #2                                  ; dY=0, dX=+2
!      swpb hl
;RAM:BA06 18 E3                       jr      next_guard_dir
       jmp  next_guard_dir
* ---------------------------------------------------------------------------
guard_E:                                                        ; dY=0, dX=+2
;RAM:BA08 21 02 00                    ld      hl, #2
       li   hl,>0002
;RAM:BA0B DD CB 0C 46                 bit     0, 12(ix)                               ; X OOB?
       movb @12(ix),tmp0
       andi tmp0,>0100
;RAM:BA0F C8                          ret     Z                                       ; no, exit
       jne  !
       rt
;RAM:BA10 21 00 FE                    ld      hl, #0xFE00                             ; dY=-2, dX=0
!      li   hl,>fe00
;RAM:BA13 18 D6                       jr      next_guard_dir
       jmp  next_guard_dir
* ---------------------------------------------------------------------------
guard_S:                                                        ; dY=-2, dX=0
;RAM:BA15 21 00 FE                    ld      hl, #0xFE00
       li   hl,>fe00
;RAM:BA18 DD CB 0C 4E                 bit     1, 12(ix)                               ; Y OOB?
       movb @12(ix),tmp0
       andi tmp0,>0200
;RAM:BA1C C8                          ret     Z                                       ; no, exit
       jne  !
       rt
;RAM:BA1D 21 FE 00                    ld      hl, #0xFE ; '�'                         ; dY=0, dX=-2
!      swpb hl
;RAM:BA20 18 C9                       jr      next_guard_dir
       jmp  next_guard_dir
*
* ---------------------------------------------------------------------------
* player appear sparkles
upd_120_to_126:
;RAM:BEFE CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:BF01 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:BF04 2F                          cpl
       inv  a
;RAM:BF05 E6 01                       and     #1
       andi a,>0100
;RAM:BF07 C0                          ret     NZ
       jeq  !
       dect sp
       mov  *sp,r11
       rt
;RAM:BF08 DD 34 00                    inc     0(ix)                                   ; next sprite
!      ab   one,*ix
;RAM:BF0B CD 19 B4                    call    audio_B419                              ; make a sound?
;RAM:BF0E C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
* last player appears sparkle
upd_127:
;RAM:BF11 CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:BF14 DD CB 0D B6                 res     6, 13(ix)
       szcb @b40h,@13(ix)
;RAM:BF18 DD 7E 10                    ld      a, 16(ix)                               ; player graphic_no
;RAM:BF1B DD 77 00                    ld      0(ix), a                                ; set as object graphic_no
       movb @16(ix),*ix
;RAM:BF1E C3 D5 AF                    jp      jump_to_upd_object
       b    @jump_to_upd_object
* ---------------------------------------------------------------------------
* START OF FUNCTION CHUNK FOR chk_and_init_transform
init_death_sparkles:                                                                  ; twinkly transform
;RAM:BF21 DD 36 00 70                 ld      0(ix), #112
       movb @b70h,*ix
;RAM:BF25 DD CB 07 CE                 set     1, 7(ix)                                ; ignore in 3D calcs
       socb @b02h,@7(ix)
;RAM:BF29 18 06                       jr      loc_BF31
       jmp  loc_BF31
* END OF FUNCTION CHUNK FOR chk_and_init_transform
* ---------------------------------------------------------------------------
* death sparkles
upd_112_to_118_184:
;RAM:BF2B CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:BF2E DD 34 00                    inc     0(ix)                                   ; graphic_no
       ab   one,*ix
* START OF FUNCTION CHUNK FOR chk_and_init_transform
loc_BF31:
;RAM:BF31 CD 03 B4                    call    audio_B403
;      TODO
;RAM:BF34 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* END OF FUNCTION CHUNK FOR chk_and_init_transform
* ---------------------------------------------------------------------------
* sparkles (object in cauldron)
upd_185_187:
;RAM:BF37 DD 6E 10                    ld      l, 16(ix)
       movb @16(ix),@l                ; TODO: Little endian!
;RAM:BF3A DD 66 11                    ld      h, 17(ix)
       movb @17(ix),h
;RAM:BF3D             ;
;RAM:BF3D             ;  BUG: this routine is primarily for special objects
;RAM:BF3D             ;       when dropped into cauldron etc (disappear)
;RAM:BF3D             ;  BUT: when the collapsing block disappears, the
;RAM:BF3D             ;       graphic_no is set to 184, which is then
;RAM:BF3D             ;       incremented to 185, and we end up here.
;RAM:BF3D             ;  ONLY: there's no special object entry (HL=0)
;RAM:BF3D             ;
;RAM:BF3D             ;  So it zaps [$0000] which is ROM
;RAM:BF3D             ;  - and harmless on the ZX Spectrum.
;RAM:BF3D             ;
;RAM:BF3D             ; BUG VERIFIED! on the Spectrum under MESS
;RAM:BF3D             ;
;RAM:BF3D 36 00                       ld      (hl), #0                                ; zap graphic_no in special_objs_tbl
       szcb mone,*hl
* last death sparkle
upd_119:
;RAM:BF3F CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:BF42 C3 5E B9                    jp      upd_111
       b    @upd_111
*
* =============== S U B R O U T I N E =======================================
*
display_objects_carried:
;RAM:BF45 3A B4 5B                    ld      a, (objects_carried_changed)
       movb @objects_carried_changed,a
;RAM:BF48 A7                          and     a                                       ; anything changed?
;RAM:BF49 C8                          ret     Z                                       ; no, return
       jne  !
       rt
;RAM:BF4A AF                          xor     a                                       ; clear changed flag
;RAM:BF4B 32 B4 5B                    ld      (objects_carried_changed), a
!      szcb mone,@objects_carried_changed
*
* End of function display_objects_carried
*
* =============== S U B R O U T I N E =======================================
*
display_objects:
       mov r11,*sp+
;RAM:BF4E DD E5                       push    ix
       mov  ix,*sp+
;RAM:BF50 DD 21 DB BF                 ld      ix, #sprite_scratchpad
       li   ix,sprite_scratchpad
;RAM:BF54 06 03                       ld      b, #3                                   ; 3 objects max
       movb @b03h,b
;RAM:BF56 21 DC 5B                    ld      hl, #objects_carried
       li   hl,objects_carried
display_object:
;RAM:BF59 C5                          push    bc
       mov  bc,*sp+
;RAM:BF5A E5                          push    hl
       mov  hl,*sp+
;RAM:BF5B 78                          ld      a, b
       movb b,a
;RAM:BF5C ED 44                       neg
       inv  a
       ab   one,a
;RAM:BF5E C6 03                       add     a, #3                                   ; (~b+3)
       ab   @b03h,a
;RAM:BF60 CB 27                       sla     a
;RAM:BF62 CB 27                       sla     a
;RAM:BF64 CB 27                       sla     a                                       ; =(~b+3)*8
       andi a,>ff00
       sla a,3
;RAM:BF66 4F                          ld      c, a
       movb a,@c
;RAM:BF67 CB 27                       sla     a                                       ; (~b+3)*16
       sla  a,1
;RAM:BF69 81                          add     a, c                                    ; =(~b+3)*24
       ab   @c,a
;RAM:BF6A C6 10                       add     a, #16                                  ; =(~b+3)*24+16
       ab   @b10h,a
;RAM:BF6C DD 77 1A                    ld      26(ix), a                               ; pixel X
       movb a,@26(ix)
;RAM:BF6F DD 36 1B 00                 ld      27(ix), #0                              ; pixel Y
       szcb mone,@27(ix)
;RAM:BF73 DD 4E 1A                    ld      c, 26(ix)                               ; pixel X
       movb @26(ix),@c
;RAM:BF76 DD 46 1B                    ld      b, 27(ix)                               ; pixel Y
       movb @27(ix),b
;RAM:BF79 E5                          push    hl                                      ; ptr object
       mov  hl,*sp+
;RAM:BF7A CD 11 D8                    call    calc_vidbuf_addr
       bl   @calc_vidbuf_addr
;RAM:BF7D 69                          ld      l, c
;RAM:BF7E 60                          ld      h, b
       mov  bc,hl
;RAM:BF7F 01 18 03                    ld      bc, #0x318                              ; width=3, height=24
       li   bc,>0318
;RAM:BF82 AF                          xor     a                                       ; fill byte = 0
       clr  a
;RAM:BF83 CD 15 C5                    call    fill_window                             ; wipe 24x24 pixel area
       bl   @fill_window
;RAM:BF86 E1                          pop     hl                                      ; ptr object
       dect sp
       mov  *sp,hl
;RAM:BF87 7E                          ld      a, (hl)                                 ; object (sprite index)
       movb *hl,a
;RAM:BF88 A7                          and     a                                       ; null?
;RAM:BF89 28 06                       jr      Z, loc_BF91                             ; yes, skip
       jeq  loc_BF91
;RAM:BF8B DD 77 00                    ld      0(ix), a                                ; sprite index
       movb a,*ix
;RAM:BF8E CD 18 D7                    call    print_sprite
       bl   @print_sprite
loc_BF91:
;RAM:BF91 DD 4E 1A                    ld      c, 26(ix)                               ; pixel X
       movb @26(ix),@c
;RAM:BF94 DD 46 1B                    ld      b, 27(ix)                               ; pixel Y
       movb @27(ix),b
;RAM:BF97 CD 26 D8                    call    calc_vram_addr
       bl   @calc_vram_addr
;RAM:BF9A CD 11 D8                    call    calc_vidbuf_addr
       bl   @calc_vidbuf_addr
;RAM:BF9D 69                          ld      l, c
;RAM:BF9E 60                          ld      h, b
       mov  bc,hl
;RAM:BF9F 01 03 18                    ld      bc, #0x1803                             ; lines=24, bytes=3
       li   bc,>1803
;RAM:BFA2 CD 7C D6                    call    blit_to_screen
       bl   @blit_to_screen
;RAM:BFA5 E1                          pop     hl                                      ; ptr object
       dect sp
       mov  *sp,hl
;RAM:BFA6 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:BFA7 C5                          push    bc
       mov  bc,*sp+
;RAM:BFA8 E5                          push    hl                                      ; ptr object
       mov  hl,*sp+
;RAM:BFA9 7E                          ld      a, (hl)                                 ; object (sprite index)
       movb *hl,a
;RAM:BFAA E6 0F                       and     #0xF
       andi a,>0f00
;RAM:BFAC 5F                          ld      e, a
;RAM:BFAD 16 00                       ld      d, #0
       clr  de
       movb a,@e
;RAM:BFAF 21 D3 BF                    ld      hl, #object_attributes
       li   hl,object_attributes
;RAM:BFB2 19                          add     hl, de
       a    de,hl
;RAM:BFB3 4E                          ld      c, (hl)                                 ; get fill byte entry
       movb *hl,@c
;RAM:BFB4 DD 6E 1A                    ld      l, 26(ix)                               ; pixel X
       movb @26(ix),@l
;RAM:BFB7 DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
       movb @27(ix),a
;RAM:BFBA C6 17                       add     a, #23
       ab   @b17h,a
;RAM:BFBC 67                          ld      h, a
       movb a,h
;RAM:BFBD CD 48 D8                    call    calc_attrib_addr
       bl   @calc_attrib_addr
;RAM:BFC0 EB                          ex      de, hl
       bl   @ex_de_hl
;RAM:BFC1 79                          ld      a, c                                    ; fill byte
       movb @c,a
;RAM:BFC2 01 03 03                    ld      bc, #0x303                              ; width=3, height=3
       li   bc,>0303
;RAM:BFC5 CD 15 C5                    call    fill_window
       bl   @fill_color_window
;RAM:BFC8 E1                          pop     hl                                      ; ptr object
       dect sp
       mov  *sp,hl
;RAM:BFC9 C1                          pop     bc                                      ; object count
       dect sp
       mov  *sp,bc
;RAM:BFCA 23                          inc     hl
;RAM:BFCB 23                          inc     hl
;RAM:BFCC 23                          inc     hl
;RAM:BFCD 23                          inc     hl                                      ; next entry (4 bytes)
       ai   hl,4
;RAM:BFCE 10 89                       djnz    display_object                          ; loop through all objects
       sb   one,b
       jne  display_object
;RAM:BFD0 DD E1                       pop     ix
       dect sp
       mov *sp,ix
;RAM:BFD2 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
* diamond, poison, boot, challice, cup, bottle, globe, idol
* red, magenta, green, cyan, yellow, white, red, white
object_attributes:
       byte >42, >43, >44, >45, >46, >47, >42, >47
*
* End of function display_objects
*
*
* ---------------------------------------------------------------------------
*
* extra life
*
upd_103:
;RAM:C1AB CD D3 C4                    call    upd_128_to_130
       bl   @upd_128_to_130_0
;RAM:C1AE DD E5                       push    ix
;RAM:C1B0 FD E1                       pop     iy                                      ; iy=extra life object
       mov  ix,iy
;RAM:C1B2 DD 21 08 5C                 ld      ix, #graphic_objs_tbl                   ; ix = player
       li   ix,graphic_objs_tbl
;RAM:C1B6 DD 34 04                    inc     4(ix)                                   ; width
       ab   one,@4(ix)
;RAM:C1B9 DD 34 05                    inc     5(ix)                                   ; depth
       ab   one,@5(ix)
;RAM:C1BC CD 7A C1                    call    is_on_or_near_obj
       bl   @is_on_or_near_obj
       stst tmp0                      ; store status
;RAM:C1BF DD 35 04                    dec     4(ix)                                   ; restore width
       sb   one,@4(ix)
;RAM:C1C2 DD 35 05                    dec     5(ix)                                   ; restore depth
       sb   one,@5(ix)
;RAM:C1C5 FD E5                       push    iy
;RAM:C1C7 DD E1                       pop     ix                                      ; restore ix (extra life object)
       mov  iy,ix
;RAM:C1C9 30 23                       jr      NC, loc_C1EE                            ; not on/near, skip
       andi tmp0,>A000                ; jhe = logical greater or equal bits
       jne  loc_C1EE
;RAM:C1CB DD CB 00 DE                 set     3, 0(ix)                                ; graphic_no
       socb @b08h,*ix
;RAM:C1CF CD D8 C4                    call    adj_m4_m12
       bl   @adj_m4_m12
;RAM:C1D2 DD 6E 10                    ld      l, 16(ix)
       movb @16(ix),@l
;RAM:C1D5 DD 66 11                    ld      h, 17(ix)
       movb @17(ix),h
;RAM:C1D8 36 00                       ld      (hl), #0                                ; zap ptr object table entry
       szcb mone,*hl
;RAM:C1DA 21 BA 5B                    ld      hl, #lives
;RAM:C1DD 34                          inc     (hl)                                    ; extra life!
       ab   one,@lives
;RAM:C1DE AF                          xor     a
;RAM:C1DF 32 C0 5B                    ld      (disable_spike_ball_drop), a
       szcb mone,@disable_spike_ball_drop
;RAM:C1E2 CD A3 B4                    call    toggle_audio_hw_x16
;      TODO
;RAM:C1E5 CD A3 BC                    call    print_lives
       bl   @print_lives
;RAM:C1E8 01 20 20                    ld      bc, #0x2020
       li   bc,>2020
;RAM:C1EB CD 32 C4                    call    blit_2x8
       bl   @blit_2x8
;RAM:C1EE
loc_C1EE:
;RAM:C1EE C3 C6 C4                    jp      dec_dZ_upd_XYZ_wipe_if_moving
       b    @dec_dZ_upd_XYZ_wipe_if_moving
* ---------------------------------------------------------------------------
* special objects being put in cauldron
*
upd_104_to_110:
;RAM:C1F1 CD D8 C4                    call    adj_m4_m12
       b    @adj_m4_m12_1
;RAM:C1F4 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:C1F7 D6 80                       sub     #128
       cb   @b80h,a
;RAM:C1F9 28 07                       jr      Z, loc_C202
       jeq  loc_C202
;RAM:C1FB 3E 01                       ld      a, #1
;RAM:C1FD FA 02 C2                    jp      M, loc_C202
;RAM:C200 ED 44                       neg
       jlt  !
       movb one,a
       jmp  loc_C202
       movb mone,a
loc_C202:
;RAM:C202 DD 77 09                    ld      9(ix), a                                ; dX towards centre of room
       movb a,@9(ix)
;RAM:C205 DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:C208 D6 80                       sub     #128
       sb   @b80h,a
;RAM:C20A 28 07                       jr      Z, loc_C213
       jeq  loc_C213
;RAM:C20C 3E 01                       ld      a, #1
;RAM:C20E FA 13 C2                    jp      M, loc_C213
;RAM:C211 ED 44                       neg
       jlt  !
       movb one,a
       jmp  loc_C213
       movb mone,a
loc_C213:
;RAM:C213 DD 77 0A                    ld      10(ix), a                               ; dY towards cente of room
       movb a,@10(ix)
;RAM:C216 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:C219 FE 80                       cp      #128                                    ; centre of X-axis?
       cb   @b80h,a
;RAM:C21B 20 05                       jr      NZ, loc_C222                            ; no, skip
       jne  loc_C222
;RAM:C21D DD AE 02                    xor     2(ix)                                   ; centre of Y-axis?
       movb @2(ix),tmp0
       xor tmp0,a
;RAM:C220 28 16                       jr      Z, centre_of_room                       ; yes, skip
       jeq  centre_of_room
loc_C222:
;RAM:C222 DD 7E 03                    ld      a, 3(ix)                                ; Z
       movb @3(ix),a
;RAM:C225 FE 98                       cp      #152
;RAM:C227 3E 01                       ld      a, #1
;RAM:C229 30 01                       jr      NC, loc_C22C
;RAM:C22B 3C                          inc     a
       cb   a,@b98h
       jhe  !
       movb @b02h,a
       jmp  loc_C22C
!      movb one,a
loc_C22C:
;RAM:C22C DD 77 0B                    ld      11(ix), a                               ; dZ
       movb a,@11(ix)
loc_C22F:
;RAM:C22F CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
audio_B467_wipe_and_draw:
;RAM:C232 CD 67 B4                    call    audio_B467                              ; audio?
;      TODO
;RAM:C235 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
centre_of_room:
;RAM:C238 3E 80                       ld      a, #128
       li   a,>8000
;RAM:C23A DD BE 03                    cp      3(ix)                                   ; Z
       cb   a,@3(ix)
;RAM:C23D 30 06                       jr      NC, add_obj_to_cauldron
       jhe  add_obj_to_cauldron
;RAM:C23F DD CB 07 CE                 set     1, 7(ix)                                ; ignore in 3D calcs
       socb @b02h,@7(ix)
;RAM:C243 18 EA                       jr      loc_C22F
       jmp  loc_C22F
* ---------------------------------------------------------------------------
add_obj_to_cauldron:
;RAM:C245 DD 36 03 80                 ld      3(ix), #128                             ; Z
       movb @b80h,@3(ix)
;RAM:C249 CD 74 C2                    call    ret_next_obj_required
       bl   @ret_next_obj_required
;RAM:C24C DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:C24F E6 07                       and     #7                                      ; convert to secial object index
       andi a,>0700
;RAM:C251 BE                          cp      (hl)                                    ; same as required?
       cb   a,*hl
;RAM:C252 20 11                       jr      NZ, loc_C265                            ; no, skip
       jne  loc_C265
;RAM:C254 21 BB 5B                    ld      hl, #objects_put_in_cauldron
       li   hl,objects_put_in_cauldron
;RAM:C257 34                          inc     (hl)
       ab   one,*hl
;RAM:C258 CD A5 C2                    call    cycle_colours_with_sound
;      TODO
;RAM:C25B 3A BB 5B                    ld      a, (objects_put_in_cauldron)
       movb @objects_put_in_cauldron,a
;RAM:C25E FE 0E                       cp      #14                                     ; got all objects?
       cb   a,@b0eh
;RAM:C260 20 03                       jr      NZ, loc_C265                            ; no, skip
       jne  loc_C265
;RAM:C262 CD CC C2                    call    prepare_final_animation
;      bl   @prepare_final_animation
loc_C265:
;RAM:C265 AF                          xor     a
;RAM:C266 32 C4 5B                    ld      (obj_dropping_into_cauldron), a
       szcb mone,@obj_dropping_into_cauldron
;RAM:C269 DD 6E 10                    ld      l, 16(ix)
       movb @16(ix),@l
;RAM:C26C DD 66 11                    ld      h, 17(ix)                               ; ptr object table
       movb @17(ix),h
;RAM:C26F 36 00                       ld      (hl), #0                                ; zap graphic no.
       szcb mone,*hl
;RAM:C271 C3 5E B9                    jp      upd_111
       b    @upd_111
* =============== S U B R O U T I N E =======================================
ret_next_obj_required:
;RAM:C274 3A BB 5B                    ld      a, (objects_put_in_cauldron)
       movb @objects_put_in_cauldron,a
;RAM:C277 21 7D C2                    ld      hl, #objects_required
       li   hl,objects_required
;RAM:C27A C3 F2 D4                    jp      add_HL_A
       b    @add_HL_A
*
* End of function ret_next_obj_required
*
* ---------------------------------------------------------------------------
* special objects
upd_96_to_102:
;RAM:C28B CD D8 C4                    call    adj_m4_m12
       bl    @adj_m4_m12
;RAM:C28E CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C291 DD CB 0D 46                 bit     0, 13(ix)                               ; just dropped?
       movb @13(ix),a
       andi a,>0100
;RAM:C295 20 04                       jr      NZ, loc_C29B                            ; no, skip
       jne  loc_C29B
;RAM:C297 CD A1 C1                    call    is_obj_moving
       bl   @is_obj_moving
;RAM:C29A C8                          ret     Z
       jne  loc_C29B
       dect sp
       mov  *sp,r11
       rt
loc_C29B:
;RAM:C29B DD CB 0D 86                 res     0, 13(ix)                                ; clear just dropped flag
       szcb @b01h,@13(ix)
;RAM:C29F CD F3 C9                    call    clear_dX_dY
       bl   @clear_dX_dY
;RAM:C2A2 C3 32 C2                    jp      audio_B467_wipe_and_draw
       b    @audio_B467_wipe_and_draw
* =============== S U B R O U T I N E =======================================
cycle_colours_with_sound:
       movb r11,*sp+
;RAM:C2A5 16 10                       ld      d, #16                                  ; cycle 16 times
       movb @b10h,d
loc_C2A7:
;RAM:C2A7 21 00 58                    ld      hl, #0x5800                             ; attribute memory
;RAM:C2AA 01 00 03                    ld      bc, #0x300                              ; size
;RAM:C2AD
;RAM:C2AD             cycle_attribute_mem:
;RAM:C2AD 7E                          ld      a, (hl)
;RAM:C2AE E6 F8                       and     #0xF8 ; '�'
;RAM:C2B0 5F                          ld      e, a
;RAM:C2B1 7E                          ld      a, (hl)
;RAM:C2B2 3C                          inc     a
;RAM:C2B3 E6 07                       and     #7
;RAM:C2B5 B3                          or      e
;RAM:C2B6 77                          ld      (hl), a
;RAM:C2B7 23                          inc     hl
;RAM:C2B8 0B                          dec     bc
;RAM:C2B9 78                          ld      a, b
;RAM:C2BA B1                          or      c
;RAM:C2BB 20 F0                       jr      NZ, cycle_attribute_mem
;RAM:C2BD CD 03 B4                    call    audio_B403
;RAM:C2C0 01 00 20                    ld      bc, #0x2000                             ; delay
;RAM:C2C3
;RAM:C2C3             loc_C2C3:
;RAM:C2C3 0B                          dec     bc
;RAM:C2C4 78                          ld      a, b
;RAM:C2C5 B1                          or      c
;RAM:C2C6 20 FB                       jr      NZ, loc_C2C3
       movb d,a
       sb   one,a
       bl   @fill_attr
;RAM:C2C8 15                          dec     d
       sb   one,d
;RAM:C2C9 20 DC                       jr      NZ, loc_C2A7
       jne  loc_C2A7
;RAM:C2CB
* ---------------------------------------------------------------------------
no_update:
;RAM:C2CB C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function cycle_colours_with_sound
* =============== S U B R O U T I N E =======================================
prepare_final_animation:
       mov  r11,*sp+
;RAM:C2CC 3E 01                       ld      a, #1
       movb one,a
;RAM:C2CE 32 C3 5B                    ld      (all_objs_in_cauldron), a
       movb @all_objs_in_cauldron,a
;RAM:C2D1 DD E5                       push    ix
       mov  ix,*sp+
;RAM:C2D3 DD 21 68 5C                 ld      ix, #special_objs_here_1                ; special_objs_here[1]
       li   ix,special_objs_here_1
;RAM:C2D7 11 20 00                    ld      de, #32                                 ; entry size
       li   de,32
;RAM:C2DA 06 0B                       ld      b, #11                                  ; wipe 11 objects in the room
       li   bc,11                                                                     ; (1 special, 7 bg, 3 fg)
loc_C2DC:
;RAM:C2DC C5                          push    bc
       mov  bc,*sp+
;RAM:C2DD D5                          push    de
       mov  de,*sp+
;RAM:C2DE CD 92 C6                    call    set_wipe_and_draw_flags
       bl   @set_wipe_and_draw_flags
;RAM:C2E1 D1                           pop     de
       dect sp
       mov  *sp,de
;RAM:C2E2 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:C2E3 DD 36 00 01                 ld      0(ix), #1                               ; set graphic no. = INVALID
       movb one,*ix
;RAM:C2E7 DD 19                       add     ix, de                                  ; next entry
       a    de,ix
;RAM:C2E9 10 F1                       djnz    loc_C2DC
       sb   one,b
       jne  loc_C2DC
;RAM:C2EB 01 08 61                    ld      bc, #font
       li   bc,graphic_objs_tbl_end
loc_C2EE:
;RAM:C2EE DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:C2F1 FE 07                       cp      #7                                      ; block?
       cb   a,@b07h
;RAM:C2F3 20 04                       jr      NZ, loc_C2F9                            ; no, skip
       jne  loc_C2F9
;RAM:C2F5 DD 36 00 83                 ld      0(ix), #131                             ; set to twinkly sprite
       movb @b83h,*ix
loc_C2F9:
;RAM:C2F9 DD 19                       add     ix, de                                  ; next entry
       a    de,ix
;RAM:C2FB DD E5                       push    ix
;RAM:C2FD E1                          pop     hl
       mov  ix,hl
;RAM:C2FE A7                          and     a
;RAM:C2FF ED 42                       sbc     hl, bc                                  ; end of table?
       cb   hl,bc
;RAM:C301 38 EB                       jr      C, loc_C2EE                             ; no, loop
       jl   loc_C2EE
;RAM:C303 DD E1                       pop     ix
       dect sp
       mov  *sp,ix
;RAM:C305 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function prepare_final_animation
*
* =============== S U B R O U T I N E =======================================
*
chk_and_init_transform:
       mov  r11,*sp+
;RAM:C306 3A B1 5B                    ld      a, (transform_flag_graphic)
       movb @transform_flag_graphic,a
;RAM:C309 A7                          and     a
;RAM:C30A C8                          ret     Z
       jeq  chk_and_init_transform_return
;RAM:C30B DD 7E 0C                    ld      a, 12(ix)                               ; entering room?
       movb @12(ix),a
;RAM:C30E E6 F0                       and     #0xF0 ; '�'
       andi a,>f000
;RAM:C310 C0                          ret     NZ
       jne  chk_and_init_transform_return
;RAM:C311 DD CB 0C 5E                 bit     3, 12(ix)                               ; already jumping?
       movb @12(ix),tmp0
       andi tmp0,>0800
;RAM:C315 C0                          ret     NZ                                      ; yes, exit
       jne  chk_and_init_transform_return
;RAM:C316 33                          inc     sp
;RAM:C317 33                          inc     sp
;      Return to caller's caller
       dect sp
;RAM:C318 DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
;RAM:C31B 32 B1 5B                    ld      (transform_flag_graphic), a
       movb *ix,@transform_flag_graphic
;RAM:C31E DD 36 10 08                 ld      16(ix), #8                              ; transform count
       movb @b08h,@16(ix)
;RAM:C322 DD E5                       push    ix
       mov  ix,*sp+
;RAM:C324 11 20 00                    ld      de, #0x20 ; ' '
       li   de,>20
;RAM:C327 DD 19                       add     ix, de
       a    de,ix
;RAM:C329 DD 36 00 01                 ld      0(ix), #1
       movb one,*ix
;RAM:C32D CD 92 C6                    call    set_wipe_and_draw_flags
       bl   @set_wipe_and_draw_flags_0
;RAM:C330 DD E1                       pop     ix
       dect sp
       mov  *sp,ix
;RAM:C332 CD ED C4                    call    upd_11
       bl   @upd_11_0
;RAM:C335 18 20                       jr      rand_legs_sprite
       jmp  rand_legs_sprite
chk_and_init_transform_return:
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
* human/wulf transform
*
upd_92_to_95:
;RAM:C337 CD ED C4                    call    upd_11
       bl   @upd_11_0
;RAM:C33A DD CB 0D 76                 bit     6, 13(ix)
       movb @13(ix),tmp0
       andi tmp0,>0400
;RAM:C33E 28 09                       jr      Z, loc_C349
       jeq  loc_C349
;RAM:C340 3A C3 5B                    ld      a, (all_objs_in_cauldron)
       movb @all_objs_in_cauldron,a
;RAM:C343 A7                          and     a
;RAM:C344 20 03                       jr      NZ, loc_C349
       jne  loc_C349
;RAM:C346 C3 21 BF                    jp      init_death_sparkles
       b    @init_death_sparkles
* ---------------------------------------------------------------------------
loc_C349:
;RAM:C349 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:C34C E6 03                       and     #3                                      ; 1-in-4 chance?
       andi a,>0300
;RAM:C34E C0                          ret     NZ                                      ; no, return
       jne  chk_and_init_transform_return
;RAM:C34F CD 72 B4                    call    audio_B472
;      TODO
;RAM:C352 DD 35 10                    dec     16(ix)                                  ; copy of graphic_no
       sb   one,@16(ix)
;RAM:C355 28 20                       jr      Z, loc_C377
       jeq  loc_C377
rand_legs_sprite:
;RAM:C357 ED 5F                       ld      a, r                                    ; RANDOM
       bl   @ld_a_r
;RAM:C359 4F                          ld      c, a
       movb a,@c
;RAM:C35A 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:C35D 81                          add     a, c
       ab   @c,a
;RAM:C35E E6 03                       and     #3
       andi a,>0300
;RAM:C360 F6 5C                       or      #92                                     ; leg sprite (92-95)
       ori  a,>5c00
;RAM:C362 DD BE 00                    cp      0(ix)                                   ; same as current?
       cb   a,*ix
;RAM:C365 20 02                       jr      NZ, loc_C369                            ; no, skip
       jne  loc_C369
;RAM:C367 EE 01                       xor     #1                                      ; change
       xor  one,a
loc_C369:
;RAM:C369 DD 77 00                    ld      0(ix), a                                ; store new sprite
       movb a,*ix
;RAM:C36C DD 7E 07                    ld      a, 7(ix)
       movb @7(ix),a
;RAM:C36F EE 40                       xor     #0x40 ; '@'                             ; toggle hflip
       li   tmp0,>4000
       xor  tmp0,a
;RAM:C371 DD 77 07                    ld      7(ix), a
       movb a,@7(ix)
;RAM:C374 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
loc_C377:
;RAM:C377 3A B1 5B                    ld      a, (transform_flag_graphic)
       movb @transform_flag_graphic,a
;RAM:C37A EE 20                       xor     #0x20 ; ' '
       li   tmp0,>2000
       xor  tmp0,a
;RAM:C37C DD 77 00                    ld      0(ix), a                                ; graphic_no
       movb a,*ix
;RAM:C37F C6 10                       add     a, #0x10
       ab   @b10h,a
;RAM:C381 DD 77 20                    ld      0x20(ix), a                             ; graphic_no (top half)
       movb a,@>20(ix)
;RAM:C384 AF                          xor     a
       clr  a
;RAM:C385 32 B1 5B                    ld      (transform_flag_graphic), a
       movb a,@transform_flag_graphic
;RAM:C388 CD DD C4                    call    adj_m6_m12
       bl   @adj_m6_m12
;RAM:C38B DD CB 00 6E                 bit     5, 0(ix)
       movb *ix,tmp0
       andi tmp0,>2000
;RAM:C38F 28 03                       jr      Z, loc_C394
       jeq  loc_C394
;RAM:C391 DD 35 13                    dec     19(ix)                                  ; dY_adj
       sb   one,@19(ix)
loc_C394:
;RAM:C394 C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
*
* End of function chk_and_init_transform
*
* =============== S U B R O U T I N E =======================================
*
print_sun_moon:
;RAM:C397 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:C39A E6 07                       and     #7
       andi a,>0700                                                                   ; print every 8th frame
;RAM:C39C C0                          ret     NZ
       jeq  !
       rt
;RAM:C39D DD 21 4D C4                 ld      ix, #sun_moon_scratchpad
!      li   ix,sun_moon_scratchpad
;RAM:C3A1 DD 34 1A                    inc     26(ix)                                  ; pixel X
       ab   one,@26(ix)
*
* End of function print_sun_moon
*
* =============== S U B R O U T I N E =======================================
*
display_sun_moon_frame:
       mov  r11,*sp+
;RAM:C3A4 3A C3 5B                    ld      a, (all_objs_in_cauldron)
;RAM:C3A7 A7                          and     a
       movb @all_objs_in_cauldron,a
;RAM:C3A8 C0                          ret     NZ
       jne  display_sun_moon_frame_return
;RAM:C3A9 DD 7E 1A                    ld      a, 26(ix)                               ; pixel X
       movb @26(ix),a
;RAM:C3AC FE E1                       cp      #225
       cb   a,@be1h
;RAM:C3AE 28 4F                       jr      Z, toggle_day_night
       jeq  toggle_day_night
;RAM:C3B0 DD 7E 1A                    ld      a, 26(ix)                               ; pixel X
       movb @26(ix),a
;RAM:C3B3 C6 10                       add     a, #16
       ab   @b10h,a
;RAM:C3B5 21 40 C4                    ld      hl, #sun_moon_yoff
       li   hl,sun_moon_yoff
;RAM:C3B8 0F                          rrca
;RAM:C3B9 0F                          rrca
       srl  a,2
;RAM:C3BA E6 0F                       and     #0xF
       andi a,>0f00
;RAM:C3BC CD F2 D4                    call    add_HL_A                                ; ptr entry
       bl   @add_HL_A
;RAM:C3BF 7E                          ld      a, (hl)                                 ; get entry
       movb *hl,a
;RAM:C3C0 DD 77 1B                    ld      27(ix), a                               ; pixel Y
       movb a,@27(ix)
display_frame:
;RAM:C3C3 01 06 1F                    ld      bc, #0x1F06                             ; 31 lines, 6 bytes (swapped below)
       li   bc,>1f06
;RAM:C3C6 21 0A D9                    ld      hl, # vidbuf+0x17                       ; (184,0)
       li   hl,vidbuf+>17
;RAM:C3C9 C5                          push    bc
       mov  bc,*sp+
;RAM:C3CA E5                          push    hl
       mov  hl,*sp+
;RAM:C3CB 79                          ld      a, c                                    ; swap b and c
;RAM:C3CC 48                          ld      c, b
;RAM:C3CD 47                          ld      b, a
       swpb bc
;RAM:C3CE AF                          xor     a
       clr  a
;RAM:C3CF CD 15 C5                    call    fill_window
       bl   @fill_window
;RAM:C3D2 CD 18 D7                    call    print_sprite                            ; display sun/moon
       bl   @print_sprite
;RAM:C3D5 DD 21 DB BF                 ld      ix, #sprite_scratchpad
       li   ix,sprite_scratchpad
;RAM:C3D9 DD 36 07 00                 ld      7(ix), #0                               ; clear flags
       szcb mone,@7(ix)
;RAM:C3DD DD 36 00 5A                 ld      0(ix), #0x5A ; 'Z'                      ; sun/moon frame left
       movb @b5ah,*ix
;RAM:C3E1 DD 36 1A B8                 ld      26(ix), #184                            ; pixel X
       movb @bb8h,@26(ix)
;RAM:C3E5 DD 36 1B 00                 ld      27(ix), #0                              ; pixel Y
       szcb mone,@27(ix)
;RAM:C3E9 CD 18 D7                    call    print_sprite
       bl   @print_sprite
;RAM:C3EC DD 36 1A D0                 ld      26(ix), #208                            ; pixel X
       movb @bd0h,@26(ix)
;RAM:C3F0 DD 36 00 BA                 ld      0(ix), #0xBA ; '�'                      ; sun/moon frame right
       movb @bbah,*ix
;RAM:C3F4 CD 18 D7                    call    print_sprite
       bl   @print_sprite
;RAM:C3F7 E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:C3F8 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:C3F9 11 F7 57                    ld      de, # zx_vram+0x17F7                    ; (184,0)
       li   de,PTRNTB+>17bf           ; Different vram layout on 9918A
;RAM:C3FC C3 7C D6                    jp      blit_to_screen
       bl   @blit_to_screen           ; Cannot jump because blit_to_screen doesn't pop return address
;       bl   @update_screen
*      Return
display_sun_moon_frame_return:
       dect sp
       mov  *sp,r11
       rt
sun_moon_yoff:
       byte 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 5
       byte 0 ; Added one extra byte for alignment*
* ---------------------------------------------------------------------------
*
toggle_day_night:
;RAM:C3FF DD 7E 00                    ld      a, 0(ix)                                ; index
       movb *ix,a
;RAM:C402 EE 01                       xor     #1                                      ; toggle sun/moon
       xor  one,a
;RAM:C404 DD 77 00                    ld      0(ix), a
       movb a,*ix
;RAM:C407 CD 0D D3                    call    colour_sun_moon
       bl   @colour_sun_moon
;RAM:C40A DD 36 1A B0                 ld      26(ix), #176                            ; pixel X
       movb @bb0h,@26(ix)
;RAM:C40E 3E 01                       ld      a, #1
;RAM:C410 32 B1 5B                    ld      (transform_flag_graphic), a
       movb one,@transform_flag_graphic
;RAM:C413 3A 4D C4                    ld      a, (sun_moon_scratchpad)
       movb @sun_moon_scratchpad,a
;RAM:C416 E6 01                       and     #1
       andi a,>0100
;RAM:C418 C0                          ret     NZ
       jne  display_sun_moon_frame_return
inc_days:
;RAM:C419 21 B9 5B                    ld      hl, #days
       li   hl,days
;RAM:C41C 7E                          ld      a, (hl)
       movb *hl,a
;RAM:C41D C6 01                       add     a, #1
       ab   one,a
;RAM:C41F 27                          daa
       bl   @daa
;RAM:C420 77                          ld      (hl), a
       movb a,*hl
;RAM:C421 FE 40                       cp      #64
       cb   a,@b40h
;RAM:C423 CA 22 BA                    jp      Z, game_over
       jne  !
       b    @game_over
;RAM:C426 CD 66 BC                    call    print_days
!      bl   @print_days
;RAM:C429 01 78 00                    ld      bc, #0x78 ; 'x'                         ; (120,0)
       li   bc,>0078
;RAM:C42C CD 32 C4                    call    blit_2x8
       bl   @blit_2x8
;RAM:C42F C3 C3 C3                    jp      display_frame
       b    @display_frame
*
* End of function display_sun_moon_frame
*
* =============== S U B R O U T I N E =======================================
*
init_sun:
;RAM:C46D DD 21 4D C4                 ld      ix, #sun_moon_scratchpad
       li   ix,sun_moon_scratchpad
;RAM:C471 DD 36 00 58                 ld      0(ix), #0x58 ; 'X'                      ; sprite index
       movb @b58h,*ix
;RAM:C475 DD 36 1A B0                 ld      26(ix), #176                            ; pixel X
       movb @bb0h,@26(ix)
;RAM:C479 DD 36 1B 09                 ld      27(ix), #9                              ; pixel Y
       movb @b09h,@27(ix)
;RAM:C47D C9                          ret
       rt
*
* End of function init_sun
*
* =============== S U B R O U T I N E =======================================
*
* loops through the object table
* copying start X,Y,Z,screen to current
*
init_special_objects:
       mov  r11,*sp+
;RAM:C47E 21 F2 6F                    ld      hl, #special_objs_tbl
       li   hl,special_objs_tbl
;RAM:C481 3A A0 5B                    ld      a, (seed_1)
       movb @seed_1,a
;RAM:C484 5F                          ld      e, a
       movb a,@e
;RAM:C485 ED 5F                       ld      a, r
       bl   @ld_a_r
;RAM:C487 83                          add     a, e
       ab   @e,a
;RAM:C488 5F                          ld      e, a
       movb @e,a
init_obj_loop:
;RAM:C489 7B                          ld      a, e
       movb @e,a
;RAM:C48A E6 07                       and     #7
       andi a,>0700
;RAM:C48C F6 60                       or      #0x60 ; '`'
       ori  a,>6000
;RAM:C48E 77                          ld      (hl), a                                 ; object graphic no.
;RAM:C48F 23                          inc     hl                                      ; HL=ptr Start X position
       movb a,*hl+
;RAM:C490 1C                          inc     e
       ab   one,@e
;RAM:C491 D5                          push    de
       mov  de,*sp+
;RAM:C492 EB                          ex      de, hl                                  ; DE=ptr Start X position
       mov  hl,de
;RAM:C493 21 04 00                    ld      hl, #4
       li   hl,4
;RAM:C496 19                          add     hl, de                                  ; HL=ptr Current X
       a    de,hl
;RAM:C497 EB                          ex      de, hl                                  ; DE = ptr Current X
       bl   @ex_de_hl
;RAM:C498 01 04 00                    ld      bc, #4
       li   bc,4
;RAM:C49B ED B0                       ldir                                            ; copy Start X,Y,Z,screen to Current
       bl   @ldir
;RAM:C49D EB                          ex      de, hl
       bl   @ex_de_hl
;RAM:C49E E5                          push    hl                                      ; save ptr next Current
;RAM:C49F 01 12 71                    ld      bc, #sprite_tbl                         ; end of object table
;RAM:C4A2 A7                          and     a
;RAM:C4A3 ED 42                       sbc     hl, bc                                  ; done table?
;RAM:C4A5 E1                          pop     hl
*      ai   hl,-sprite_tbl
;RAM:C4A6 D1                          pop     de
       dect sp
       mov  *sp,de
;RAM:C4A7 38 E0                       jr      C, init_obj_loop                        ; no, loop
       ci   hl,special_objs_tbl_end
       jl   init_obj_loop
;RAM:C4A9 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function init_special_objects
*
* ---------------------------------------------------------------------------
* block
*
upd_62:
;RAM:C4AA CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
;RAM:C4AD CD F3 C9                    call    clear_dX_dY
       bl   @clear_dX_dY
;RAM:C4B0 CD E9 B3                    call    audio_B3E9
;      TODO
;RAM:C4B3 C3 AF B5                    jp      dec_dZ_wipe_and_draw
       b    @dec_dZ_wipe_and_draw
* ---------------------------------------------------------------------------
* chest
*
upd_85:
;RAM:C4B6 CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
;RAM:C4B9 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C4BC CD A1 C1                    call    is_obj_moving
       bl   @is_obj_moving
;RAM:C4BF C8                          ret     Z                                       ; no, return
       jeq  upd_84_85_return
;RAM:C4C0 C3 32 C2                    jp      audio_B467_wipe_and_draw
       b    @audio_B467_wipe_and_draw
* ---------------------------------------------------------------------------
* table
*
upd_84:
;RAM:C4C3 CD E3 C4                    call    upd_6_7
       bl   @upd_6_7_0
dec_dZ_upd_XYZ_wipe_if_moving:
;RAM:C4C6 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C4C9 CD A1 C1                    call    is_obj_moving
       bl   @is_obj_moving
;RAM:C4CC C8                          ret     Z
       jeq  upd_84_85_return
;RAM:C4CD CD F3 C9                    call    clear_dX_dY
       bl   @clear_dX_dY
;RAM:C4D0 C3 32 C2                    jp      audio_B467_wipe_and_draw
       b    @audio_B467_wipe_and_draw
* ---------------------------------------------------------------------------
upd_84_85_return:
       dect sp
       mov  *sp,r11
       b    *r11
* =============== S U B R O U T I N E =======================================
*
* tree wall
*
upd_128_to_130_0:
       mov  r11,*sp+
upd_128_to_130:
;RAM:C4D3 21 F8 FE                    ld      hl, #0xFEF8                             ; -2, -8
       li   hl,>fef8
;RAM:C4D6 18 08                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function upd_128_to_130
* =============== S U B R O U T I N E =======================================
adj_m4_m12:
       mov  r11,*sp+
;RAM:C4D8 21 F4 FC                    ld      hl, #0xFCF4                             ; -4, -12
adj_m4_m12_1:
       li   hl,>fcf4
;RAM:C4DB 18 03                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_m4_m12
* =============== S U B R O U T I N E =======================================
adj_m6_m12:
       mov  r11,*sp+
;RAM:C4DD 21 F4 FA                    ld      hl, #0xFAF4                             ; -6, -12
adj_m6_m12_1:
       li   hl,>faf4
;RAM:C4E0 C3 2B C7                    jp      set_pixel_adj
jp_set_pixel_adj:
       b    @set_pixel_adj_1
* End of function adj_m6_m12
* =============== S U B R O U T I N E =======================================
*
* rock and block
*
upd_6_7_0:
       mov  r11,*sp+
;RAM:C4E3 21 F0 F8                    ld      hl, #0xF8F0                             ; -8, -16
upd_6_7:
       li   hl,>f8f0
;RAM:C4E6 18 F8                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function upd_6_7
* =============== S U B R O U T I N E =======================================
*
* bricks
*
upd_10:
;RAM:C4E8 21 EC FF                    ld      hl, #0xFFEC                              ; -1, -20
       li   hl,>ffec
;RAM:C4EB 18 F3                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* bricks
* =============== S U B R O U T I N E =======================================
upd_11_0:
       mov  r11,*sp+
upd_11:
;RAM:C4ED 21 F4 FE                    ld      hl, #0xFEF4                             ; -2, -12
       li   hl,>fef4
;RAM:C4F0 18 EE                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function upd_11
* bricks
* =============== S U B R O U T I N E =======================================
upd_12_to_15_0:
       mov  r11,*sp+
upd_12_to_15:
;RAM:C4F2 21 F8 FC                    ld      hl, #0xFCF8                             ; -4, -8
       li   hl,>fcf8
;RAM:C4F5 18 E9                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function upd_12_to_15
* =============== S U B R O U T I N E =======================================
adj_m8_m12:
       mov  r11,*sp+
;RAM:C4F7 21 F4 F8                    ld      hl, #0xF8F4                             ; -8, -12
adj_m8_m12_1:
       li   hl,>f8f4
;RAM:C4FA 18 E4                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_m8_m12
* =============== S U B R O U T I N E =======================================
adj_m7_m12:
       mov  r11,*sp+
;RAM:C4FC 21 F4 F9                    ld      hl, #0xF9F4                             ; -7, -12
adj_m7_m12_1:
       li   hl,>f9f4
;RAM:C4FF 18 DF                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_m7_m12
* =============== S U B R O U T I N E =======================================
adj_m12_m12:
       mov  r11,*sp+
;RAM:C501 21 F4 F4                    ld      hl, #0xF4F4                             ; -12, -12
       li   hl,>f4f4
;RAM:C504 18 DA                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_m12_m12
* =============== S U B R O U T I N E =======================================
upd_88_to_90:
;RAM:C506 21 F0 F4                    ld      hl, #0xF4F0                            ; -12, -16
       li   hl,>f4f0
;RAM:C509 18 D5                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* =============== S U B R O U T I N E =======================================
adj_p7_m12:
       mov  r11,*sp+
;RAM:C50B 21 F4 07                    ld      hl, #0x7F4                              ; +7, -12
       li   hl,>07f4
;RAM:C50E 18 D0                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_p7_m12
* =============== S U B R O U T I N E =======================================
adj_p3_m12:
       mov  r11,*sp+
;RAM:C510 21 F4 03                    ld      hl, #0x3F4                              ; +3, -12
       li   hl,>03f4
;RAM:C513 18 CB                       jr      jp_set_pixel_adj
       jmp  jp_set_pixel_adj
* End of function adj_p3_m12
*
* =============== S U B R O U T I N E =======================================
*
* Build a list of special objects in this room
* - traverses special object list
* - adds to special_objs_here
*
* IX=graphics object table
*    00=player sprite
*
find_special_objs_here:
       mov  r11,*sp+
;RAM:C525 11 48 5C                    ld      de, #special_objs_here
       li   de,special_objs_here
;RAM:C528 D9                          exx
       bl   @exx
;RAM:C529 FD 21 F2 6F                 ld      iy, #special_objs_tbl
       li   iy,special_objs_tbl
;RAM:C52D DD 46 08                    ld      b, 8(ix)                                ; current screen
       movb @8(ix),b
loc_C530:
;RAM:C530 FD 7E 00                    ld      a, 0(iy)                                ; get graphic no.
       movb *iy,a
;RAM:C533 A7                          and     a                                       ; null?
;RAM:C534 28 3C                       jr      Z, loc_C572                             ; yes, skip
       jeq  loc_C572
;RAM:C536 FD 7E 08                    ld      a, 8(iy)                                ; object current screen
       movb @8(iy),a
;RAM:C539 B8                          cp      b                                       ; same as (player) current screen?
       cb   a,b
;RAM:C53A 20 36                       jr      NZ, loc_C572                            ; no, skip
       jne  loc_C572
;RAM:C53C FD E5                       push    iy
       mov  iy,*sp+
;RAM:C53E D9                          exx
       bl   @exx
;RAM:C53F E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:C540 E5                          push    hl                                      ; ptr special_object_tbl entry
       mov  hl,*sp+
;RAM:C541 7E                          ld      a, (hl)                                 ; get graphic no.
;RAM:C542 23                          inc     hl
;RAM:C543 12                          ld      (de), a                                 ; store in objs_here
;RAM:C544 13                          inc     de
       movb *hl+,*de+
;RAM:C545 23                          inc     hl
;RAM:C546 23                          inc     hl
;RAM:C547 23                          inc     hl
;RAM:C548 23                          inc     hl                                      ; ptr current X, Y, Z
       ai   hl,4
;RAM:C549 01 03 00                    ld      bc, #3                                  ; 3 entries (bytes) to copy
       li   bc,3
;RAM:C54C ED B0                       ldir                                            ; copy to objs_here
       bl   @ldir
;RAM:C54E EB                          ex      de, hl
       bl   @ex_de_hl
;RAM:C54F 36 05                       ld      (hl), #5                                ; width = 5
;RAM:C551 23                          inc     hl
       movb @b05h,*hl+
;RAM:C552 36 05                       ld      (hl), #5                                ; depth = 5
;RAM:C554 23                          inc     hl
       movb @b05h,*hl+
;RAM:C555 36 0C                       ld      (hl), #12                               ; height = 12
;RAM:C557 23                          inc     hl
       movb @b0ch,*hl+
;RAM:C558 36 14                       ld      (hl), #0x14                             ; flag DRAW & MOVEABLE
;RAM:C55A 23                          inc     hl
       movb @b14h,*hl+
;RAM:C55B EB                          ex      de, hl
       bl   @ex_de_hl
;RAM:C55C 7E                          ld      a, (hl)                                 ; get current screen
;RAM:C55D 23                          inc     hl
       movb *hl+,a
;RAM:C55E 12                          ld      (de), a                                 ; store in objs_here
;RAM:C55F 13                          inc     de
       movb a,*de+
;RAM:C560 06 07                       ld      b, #7
       movb @b07h,b
;RAM:C562 CD 08 D5                    call    zero_DE
       bl   @zero_DE
;RAM:C565 C1                          pop     bc                                      ; ptr special_object_tbl entry
       dect sp
       mov  *sp,bc
;RAM:C566 79                          ld      a, c
;RAM:C567 12                          ld      (de), a
;RAM:C568 13                          inc     de
       movb @c,*de+                   ; TODO: Little endian
;RAM:C569 78                          ld      a, b
;RAM:C56A 12                          ld      (de), a                                 ; store
;RAM:C56B 13                          inc     de
       movb b,*de+                    ; TODO: Little endian
;RAM:C56C 06 0E                       ld      b, #14
       movb @b0eh,b
;RAM:C56E CD 08 D5                    call    zero_DE
       bl   @zero_DE
;RAM:C571 D9                          exx
       bl   @exx
loc_C572:
;RAM:C572 11 09 00                    ld      de, #9
       li   de,9
;RAM:C575 FD 19                       add     iy, de                                  ; ptr next special_object_tbl entry
       a    de,iy
;RAM:C577 FD E5                       push    iy
;RAM:C579 E1                          pop     hl
       mov  iy,hl
;RAM:C57A 11 12 71                    ld      de, #sprite_tbl                         ; end of object table
       li   de,special_objs_tbl_end
;RAM:C57D A7                          and     a
;RAM:C57E ED 52                       sbc     hl, de                                  ; past end of table?
       c    hl,de
;RAM:C580 38 AE                       jr      C, loc_C530                             ; no, loop
       jl   loc_C530
;RAM:C582 D9                          exx                                             ; DE=objs_here entry
       bl   @exx
loc_C583:
;RAM:C583 21 88 5C                    ld      hl, #other_objs_here                    ; end of objects here table
       li   hl,other_objs_here
;RAM:C586 A7                          and     a
;RAM:C587 ED 52                       sbc     hl, de                                  ; past end of table (max=2)
       c    hl,de
;RAM:C589 C8                          ret     Z                                       ; yes, exit
       jeq  !
;RAM:C58A 06 20                       ld      b, #32
       movb @b20h,b
;RAM:C58C CD 08 D5                    call    zero_DE                                 ; zero next entry
       bl   @zero_DE
;RAM:C58F 18 F2                       jr      loc_C583                                ; next entry
       jmp  loc_C583
*      Return
!      dect sp
       mov  *sp,r11
       rt
*
* End of function find_special_objs_here
*
* =============== S U B R O U T I N E =======================================
*
* updates special objects table with current data (coords etc)
* - traverses special_objs_here table
* - writes to special_objs_tbl
*
* Another bug related to ptr special_objs_tbl
* - the cauldron bubbles are inserted in the object table
*   dynamically when you enter the room. This routine checks
*   the graphic_no for null, but (again) not the ptr
*   and (again) writes to ROM @$0000
* * VERIFIED on the ZX Spectrum emulator!        ;
*
update_special_objs:
       mov  r11,*sp+
;RAM:C591 FD 21 48 5C                 ld      iy, #special_objs_here
       li   iy,special_objs_here
loc_C595:
;RAM:C595 FD 7E 00                    ld      a, 0(iy)                                ; get graphic no.
       movb *iy,a
;RAM:C598 A7                          and     a                                       ; null?
;RAM:C599 28 1C                       jr      Z, loc_C5B7                             ; yes, skip
       jeq  loc_C5B7
;RAM:C59B FD 5E 10                    ld      e, 16(iy)
       movb @16(iy),@e                ; TODO: Little endian!
;RAM:C59E FD 56 11                    ld      d, 17(iy)                               ; DE=ptr object table entry
       movb @17(iy),d
       jeq  loc_C5B7                  ; Bug fix?
;RAM:C5A1 FD 7E 00                    ld      a, 0(iy)                                ; get graphic no.
;RAM:C5A4 12                          ld      (de), a                                 ; store
       movb *iy,*de
;RAM:C5A5 13                          inc     de
;RAM:C5A6 13                          inc     de
;RAM:C5A7 13                          inc     de
;RAM:C5A8 13                          inc     de
;RAM:C5A9 13                          inc     de
       ai   de,5
;RAM:C5AA FD E5                       push    iy
;RAM:C5AC E1                          pop     hl                                      ; HL=object in 'here' table
       mov  iy,hl
;RAM:C5AD 23                          inc     hl                                      ; ptr x
       inc  hl
;RAM:C5AE 01 03 00                    ld      bc, #3                                  ; 3 bytes
       li   bc,3
;RAM:C5B1 ED B0                       ldir                                            ; copy x, y, z
       bl   @ldir
;RAM:C5B3 FD 7E 08                    ld      a, 8(iy)                                ; screen
;RAM:C5B6 12                          ld      (de), a                                 ; store as current
       movb @8(iy),*de
loc_C5B7:
;RAM:C5B7 01 20 00                    ld      bc, #32
       li   bc,32
;RAM:C5BA FD 09                       add     iy, bc                                  ; next entry in 'here' table
       a    bc,iy
;RAM:C5BC FD E5                       push    iy
;RAM:C5BE E1                          pop     hl
       mov  iy,hl
;RAM:C5BF 01 88 5C                    ld      bc, #other_objs_here                    ; end of table
;RAM:C5C2 A7                          and     a
;RAM:C5C3 ED 42                       sbc     hl, bc                                  ; past end of table?
       ci   hl,other_objs_here
;RAM:C5C5 38 CE                       jr      C, loc_C595                             ; no, loop
       jl   loc_C595
;RAM:C5C7 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function update_special_objs
*
* ---------------------------------------------------------------------------
* ghost
upd_80_to_83:
;RAM:C5C8 CD DD C4                    call    adj_m6_m12
       bl   @adj_m6_m12
;RAM:C5CB CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C5CE DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:C5D1 DD B6 0A                    or      10(ix)                                  ; moving X/Y?
       socb @10(ix),a
;RAM:C5D4 28 07                       jr      Z, loc_C5DD                             ; no, skip
       jeq  loc_C5DD
;RAM:C5D6 DD 7E 0C                    ld      a, 12(ix)
       movb @12(ix),a
;RAM:C5D9 E6 03                       and     #3                                      ; OOB X/Y?
       andi a,>0300
;RAM:C5DB 28 20                       jr      Z, loc_C5FD                             ; no, continue as-is
       jeq  loc_C5FD
loc_C5DD:
;RAM:C5DD 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:C5E0 E6 03                       and     #3
       andi a,>0300
;RAM:C5E2 C6 04                       add     a, #4                                   ; rnd(4-7)= +/-3or4
       ab   @b04h,a
;RAM:C5E4 CD 45 C6                    call    get_delta_from_tbl
       bl   @get_delta_from_tbl
;RAM:C5E7 DD 77 09                    ld      9(ix), a                                ; set dX
       movb a,@9(ix)
;RAM:C5EA 3A A2 5B                    ld      a, (seed_2)
       movb @seed_2,a
;RAM:C5ED E6 03                       and     #3
       andi a,>0300
;RAM:C5EF C6 04                       add     a, #4                                   ; rnd(4-7)= +/-3or4
       ab   @b04h,a
;RAM:C5F1 CD 45 C6                    call    get_delta_from_tbl
       bl   @get_delta_from_tbl
;RAM:C5F4 DD 77 0A                    ld      10(ix), a                               ; dY
       movb a,@10(ix)
;RAM:C5F7 CD 03 C6                    call    calc_ghost_sprite
       bl   @calc_ghost_sprite
;RAM:C5FA CD 67 B4                    call    audio_B467
;      TODO
loc_C5FD:
;RAM:C5FD CD 85 B9                    call    toggle_next_prev_sprite
       bl   @toggle_next_prev_sprite
;RAM:C600 C3 56 B8                    jp      set_deadly_wipe_and_draw_flags
       b    @set_deadly_wipe_and_draw_flags
*
* =============== S U B R O U T I N E =======================================
*
calc_ghost_sprite:
;RAM:C603 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:C606 A7                          and     a
;RAM:C607 F2 0C C6                    jp      P, loc_C60C
;RAM:C60A ED 44                       neg                                             ; abs()
       abs  a
loc_C60C:
;RAM:C60C 4F                          ld      c, a                                    ; c=abs(dX)
       movb a,@c
;RAM:C60D DD 7E 0A                    ld      a, 10(ix)                               ; dY
       movb @10(ix),a
;RAM:C610 A7                          and     a
;RAM:C611 F2 16 C6                    jp      P, loc_C616
;RAM:C614 ED 44                       neg                                             ; abs()
       abs  a
loc_C616:
;RAM:C616 B9                          cp      c                                       ; abs(dX)<abs(dY)?
       cb   a,@c
;RAM:C617 30 16                       jr      NC, loc_C62F                            ; yes, go
       jhe  loc_C62F
;RAM:C619 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb  @9(ix),a
;RAM:C61C A7                          and     a                                       ; negative?
;RAM:C61D FA 29 C6                    jp      M, loc_C629                             ; yes, skip
       jlt  loc_C629
;RAM:C620 DD CB 00 8E                 res     1, 0(ix)                                ; sprite=80/81
       szcb @b02h,*ix
set_ghost_hflip:
;RAM:C624 DD CB 07 F6                 set     6, 7(ix)                                ; hflip
       socb @b40h,@7(ix)
;RAM:C628 C9                          ret
       rt
* ---------------------------------------------------------------------------
loc_C629:
;RAM:C629 DD CB 00 CE                 set     1, 0(ix)                                ; sprite=82/83
       socb @b02h,*ix
;RAM:C62D 18 F5                       jr      set_ghost_hflip
       jmp  set_ghost_hflip
* ---------------------------------------------------------------------------
loc_C62F:
;RAM:C62F DD 7E 0A                    ld      a, 10(ix)                               ; dY
       movb @10(ix),a
;RAM:C632 A7                          and     a                                       ; negative?
;RAM:C633 FA 3F C6                    jp      M, loc_C63F                             ; yes, skip
       jlt  loc_C63F
;RAM:C636 DD CB 00 CE                 set     1, 0(ix)                                ; sprite=82/83
       socb @b02h,*ix
clr_ghost_hflip:
;RAM:C63A DD CB 07 B6                 res     6, 7(ix)                                ; hflip
       szcb @b40h,@7(ix)
;RAM:C63E C9                          ret
       rt
* ---------------------------------------------------------------------------
loc_C63F:
;RAM:C63F DD CB 00 8E                 res     1, 0(ix)                                ; sprite=80/81
       szcb @b02h,*ix
;RAM:C643 18 F5                       jr      clr_ghost_hflip
       jmp   clr_ghost_hflip
*
* End of function calc_ghost_sprite
*
* =============== S U B R O U T I N E =======================================
get_delta_from_tbl:
;RAM:C645 01 4E C6                    ld      bc, #delta_tbl
       li   bc,delta_tbl
;RAM:C648 6F                          ld      l, a
;RAM:C649 26 00                       ld      h, #0
       clr  hl
       movb a,@l
;RAM:C64B 09                          add     hl, bc                                  ; ptr entry
       a    bc,hl
;RAM:C64C 7E                          ld      a, (hl)                                 ; get entry
       movb *hl,a
;RAM:C64D C9                          ret
       rt
* End of function get_delta_from_tbl
* ---------------------------------------------------------------------------
delta_tbl:
       byte >FF, 1, >FE, 2, >FD, 3, >FC, 4, >FB, 5, >FA, 6, >F9, 7, >F8, 8
* ---------------------------------------------------------------------------
* portcullis (static)
upd_8:
;RAM:C65E CD DD C4                    call    adj_m6_m12
       bl   @adj_m6_m12
;RAM:C661 21 AF 5B                    ld      hl, #portcullis_moving
       li   hl,portcullis_moving
;RAM:C664 7E                          ld      a, (hl)
       movb *hl,a
;RAM:C665 A7                          and     a                                       ; moving?
;RAM:C666 C0                          ret     NZ                                      ; yes, exit
       jne  upd_8_return
;RAM:C667 3A AE 5B                    ld      a, (room_size_Z)
       movb @room_size_Z,a
;RAM:C66A DD BE 03                    cp      3(ix)                                   ; objZ = room height?
       cb   a,@3(ix)
;RAM:C66D 28 3E                       jr      Z, init_portcullis_up                   ; yes, skip
       jeq  init_portcullis_up
;RAM:C66F C6 1F                       add     a, #31
       ab   @b1fh,a
;RAM:C671 DD BE 03                    cp      3(ix)                                   ; objZ <= room height+31?
       cb   a,@3(ix)
;RAM:C674 30 37                       jr      NC, init_portcullis_up                  ; yes, skip
       jhe  init_portcullis_up
;RAM:C676 3A B0 5B                    ld      a, (portcullis_move_cnt)
       movb @portcullis_move_cnt,a
;RAM:C679 FE 04                       cp      #4                                      ; moved less than 4 times?
       cb   a,@b04h
;RAM:C67B 38 08                       jr      C, init_portcullis_down                 ; yes, move immediately
       jl   init_portcullis_down
;RAM:C67D 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:C680 E6 1F                       and     #0x1F                                   ; 1in32 chance?
       andi a,>1f00
;RAM:C682 C0                          ret     NZ                                      ; no, return
       jne  upd_8_return
;RAM:C683 F6 80                       or      #0x80 ; '�'                             ; arbitrarily large count
       ori  a,>8000
init_portcullis_down:
;RAM:C685 3C                          inc     a
       ab   one,a
;RAM:C686 32 B0 5B                    ld      (portcullis_move_cnt), a
       movb a,@portcullis_move_cnt
;RAM:C689 DD CB 00 C6                 set     0, 0(ix)                                ; graphic_no=9
       socb one,*ix
;RAM:C68D DD 36 0B FF                 ld      11(ix), #0xFF                           ; dZ=-1 (down)
       movb mone,@11(ix)
loc_C691:
;RAM:C691 34                          inc     (hl)                                    ; flag portculis moving
       ab   one,*hl
;RAM:C692
upd_8_return:
       dect sp
       mov  *sp,r11
       b    *r11
* ---------------------------------------------------------------------------
*
init_portcullis_up:
;RAM:C6AD 3A A5 5B                    ld      a, (seed_3)
       movb @seed_3,a
;RAM:C6B0 E6 1F                       and     #0x1F                                   ; 1in32 chance?
       andi a,>1f00
;RAM:C6B2 C0                          ret     NZ                                      ; yes, exit
       jne  upd_8_return
;RAM:C6B3 DD CB 00 C6                 set     0, 0(ix)                                ; graphic_no=9
       socb one,*ix
;RAM:C6B7 DD 36 0B 01                 ld      11(ix), #1                              ; dZ=1 (up)
       movb one,@11(ix)
;RAM:C6BB 18 D4                       jr      loc_C691
       jmp  loc_C691
* ---------------------------------------------------------------------------
* portcullis (moving)
*
upd_9:
;RAM:C6BD CD DD C4                    call    adj_m6_m12
       bl   @adj_m6_m12
;RAM:C6C0 DD CB 0D FE                 set     7, 13(ix)                               ; fatal if it hits player
       socb @b80h,@13(ix)
;RAM:C6C4 3A 14 5C                    ld      a, (graphic_objs_tbl+0xC)
       movb @graphic_objs_tbl+>0C,a
;RAM:C6C7 E6 F0                       and     #0xF0 ; '�'                             ; entering screen?
       andi a,>f000
;RAM:C6C9 C0                          ret     NZ                                      ; yes, exit
       jne upd_9_return
;RAM:C6CA DD 7E 0B                    ld      a, 11(ix)                               ; dZ
       movb @11(ix),a
;RAM:C6CD A7                          and     a                                       ; up?
;RAM:C6CE F2 EA C6                    jp      P, move_portcullis_up                   ; yes, go
       jgt  move_portcullis_up
       jeq  move_portcullis_up
;RAM:C6D1 DD 35 0B                    dec     11(ix)                                  ; accelerate speed?
       sb   one,@11(ix)
;RAM:C6D4 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C6D7 DD CB 0C 56                 bit     2, 12(ix)                               ; out of bounds?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:C6DB 28 B5                       jr      Z, set_wipe_and_draw_flags              ; no, go
       jeq  set_wipe_and_draw_flags
;RAM:C6DD CD 89 B4                    call    audio_B489
;      TODO
stop_portcullis:
;RAM:C6E0 AF                          xor     a                                       ; flag not moving
;RAM:C6E1 32 AF 5B                    ld      (portcullis_moving), a
       szcb one,@portcullis_moving
;RAM:C6E4 DD CB 00 86                 res     0, 0(ix)                                ; graphic_no=8
       szcb one,*ix
;RAM:C6E8 18 A8                       jr      set_wipe_and_draw_flags
       jmp  set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
move_portcullis_up:
;RAM:C6EA DD 36 0B 02                 ld      11(ix), #2                              ; dZ
       movb @b02h,@11(ix)
;RAM:C6EE CD 67 B4                    call    audio_B467
;      TODO
;RAM:C6F1 CD 00 C7                    call    dec_dZ_and_update_XYZ
       bl   @dec_dZ_and_update_XYZ
;RAM:C6F4 3A AE 5B                    ld      a, (room_size_Z)
       movb @room_size_Z,a
;RAM:C6F7 C6 1F                       add     a, #31
       ab   @b1fh,a
;RAM:C6F9 DD BE 03                    cp      3(ix)                                   ; objZ < room height+31?
       cb   a,@3(ix)
;RAM:C6FC 30 94                       jr      NC, set_wipe_and_draw_flags             ; yes, go
       jhe  set_wipe_and_draw_flags
;RAM:C6FE 18 E0                       jr      stop_portcullis
       jmp  stop_portcullis
upd_9_return:
       dect sp
       mov  *sp,r11
       b    *r11
*
* =============== S U B R O U T I N E =======================================
*
set_wipe_and_draw_flags_0:
       mov  r11,*sp+
set_wipe_and_draw_flags:
;RAM:C692 DD 7E 07                    ld      a, 7(ix)                                ; flags
;RAM:C695 F6 30                       or      #0x30 ; '0'                             ; set WIPE & DRAW
;RAM:C697 DD 77 07                    ld      7(ix), a
       socb @b30h,@7(ix)
;RAM:C69A C3 4D CD                    jp      set_draw_objs_overlapped
       b    @set_draw_objs_overlapped_1
*
* End of function set_wipe_and_draw_flags
*
* =============== S U B R O U T I N E =======================================
*
dec_dZ_and_update_XYZ:
       mov  r11,*sp+
;RAM:C700 DD 35 0B                    dec     11(ix)                                  ; dec dZ?
       sb   one,@11(ix)
;RAM:C703 CD 45 CB                    call    adj_for_out_of_bounds
       bl   @adj_for_out_of_bounds
       jmp  add_dXYZ_1                ; Don't push return address again
add_dXYZ:
       mov  r11,*sp+
add_dXYZ_1
;RAM:C706 DD 7E 01                    ld      a, 1(ix)                                ; X
;RAM:C709 DD 86 09                    add     a, 9(ix)                                ; dX
;RAM:C70C DD 77 01                    ld      1(ix), a                                ; X+=dX
       ab   @9(ix),@1(ix)
;RAM:C70F DD 7E 02                    ld      a, 2(ix)                                ; Y
;RAM:C712 DD 86 0A                    add     a, 10(ix)                               ; dY
;RAM:C715 DD 77 02                    ld      2(ix), a                                ; y+=dY
       ab   @10(ix),@2(ix)
;RAM:C718 DD 7E 03                    ld      a, 3(ix)                                ; Z
;RAM:C71B DD 86 0B                    add     a, 11(ix)                               ; dZ
;RAM:C71E DD 77 03                    ld      3(ix), a                                ; Z+=dZ
       ab   @11(ix),@3(ix)
;RAM:C721 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* End of function dec_dZ_and_update_XYZ
*
* ---------------------------------------------------------------------------
* arch (far side)
upd_3_5:
;RAM:C722 DD CB 07 76                 bit     6, 7(ix)                                ; hflip?
       movb @7(ix),tmp0
       andi tmp0,>4000
;RAM:C726 20 0A                       jr      NZ, adj_3_5_hflip                       ; yes, go
       jne  adj_3_5_hflip
;RAM:C728 21 F7 FD                    ld      hl, #0xFDF7                             ; -3, -9
       li   hl,>FDF7
*      Jump past push of return address
       jmp  set_pixel_adj_1
*
* =============== S U B R O U T I N E =======================================
*
set_pixel_adj:
       mov  r11,*sp+
;RAM:C72B DD 75 12                    ld      18(ix), l                               ; pixel_x adjust
set_pixel_adj_1:
       movb @l,@18(ix)
;RAM:C72E DD 74 13                    ld      19(ix), h                               ; pixel_y adjust
       movb h,@19(ix)
;RAM:C731 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function set_pixel_adj
*
* ---------------------------------------------------------------------------
adj_3_5_hflip:
;RAM:C732 21 F9 FE                    ld      hl, #0xFEF9                             ; -2, -7
       li   hl,>fef9
;RAM:C735 18 F4                       jr      set_pixel_adj
       jmp  set_pixel_adj_1
* ---------------------------------------------------------------------------
adj_m3_p1:
;RAM:C737 21 01 FD                    ld      hl, #0xFD01                             ; -3, +1
       li   hl,>fd01
;RAM:C73A 18 10                       jr      loc_C74C
       jmp  loc_C74C
;* ---------------------------------------------------------------------------
* arch (near side)
upd_2_4:
;RAM:C73C DD CB 07 76                 bit     6, 7(ix)                                 ; hflip?
       movb @7(ix),tmp0
       andi tmp0,>4000
;RAM:C740 20 2A                       jr      NZ, adj_2_4_hflip                       ; yes, go
       jne  adj_2_4_hflip
;RAM:C742 DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:C745 FE 04                       cp      #4                                      ; tree arch?
       cb   a,@b04h
;RAM:C747 28 EE                       jr      Z, adj_m3_p1                            ; yes, exit
       jeq  adj_m3_p1
;RAM:C749 21 F9 FD                    ld      hl, #0xFDF9                             ; -3, -7
       li   hl,>FDF9
loc_C74C:
;RAM:C74C CD 2B C7                    call    set_pixel_adj
       bl   @set_pixel_adj
;RAM:C74F DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:C752 C6 0D                       add     a, #13                                  ; add 13
       ab   @b0dh,a
;RAM:C754 DD 77 0A                    ld      10(ix), a                               ; dY?=Y+13
       movb a,@10(ix)
;RAM:C757 DD 7E 01                    ld      a, 1(ix)                                ; X
;RAM:C75A DD 77 09                    ld      9(ix), a                                ; dX?=X
       movb @1(ix),@9(ix)
;RAM:C75D 21 0F 06                    ld      hl, #0x60F                              ; +6, +15
       li   hl,>060F
loc_C760:
;RAM:C760 DD 7E 03                    ld      a, 3(ix)                                ; Z
;RAM:C763 DD 77 0B                    ld      11(ix), a                               ; dZ?=Z
       movb @3(ix),@11(ix)
;RAM:C766 CD DB C7                    call    chk_plyr_spec_near_arch
       bl   @chk_plyr_spec_near_arch
;RAM:C769 C3 85 C7                    jp      loc_C785
       b    @loc_C785
* ---------------------------------------------------------------------------
adj_2_4_hflip:
;RAM:C76C 21 EF FE                    ld      hl, #0xFEEF                            ; -2, -17
       li   hl,>FEEF
;RAM:C76F CD 2B C7                    call    set_pixel_adj
       bl   @set_pixel_adj
;RAM:C772 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:C775 D6 0D                       sub     #13
       sb   @b0dh,a
;RAM:C777 DD 77 09                    ld      9(ix), a                                ; dX
       movb a,@9(ix)
;RAM:C77A DD 7E 02                    ld      a, 2(ix)                                ; Y
;RAM:C77D DD 77 0A                    ld      10(ix), a                               ; dY
       movb @2(ix),@10(ix)
;RAM:C780 21 06 0F                    ld      hl, #0xF06                              ; +15, +6
       li   hl,>0F06
;RAM:C783 18 DB                       jr      loc_C760
       jmp  loc_C760
* ---------------------------------------------------------------------------
loc_C785:
;RAM:C785 21 0F 0F                    ld      hl, #0xF0F                              ; +15, +15
       li   hl,>0F0F
;RAM:C788 FD 21 08 5C                 ld      iy, #graphic_objs_tbl
       li   iy,graphic_objs_tbl
;RAM:C78C 11 20 00                    ld      de, #32                                 ; entry size
       li   de,32
;RAM:C78F 06 04                       ld      b, #4                                   ; player, special objects only
       movb @b04h,b
loc_C791:
;RAM:C791 FD 7E 00                    ld      a, 0(iy)                                ; graphic no.
       movb *iy,a
;RAM:C794 A7                          and     a                                       ; null?
;RAM:C795 28 3F                       jr      Z, loc_C7D6                             ; yes, skip
       jeq  loc_C7D6
;RAM:C797 FD CB 07 5E                 bit     3, 7(iy)
       movb @7(iy),tmp0
       andi tmp0,>0800
;RAM:C79B 28 39                       jr      Z, loc_C7D6
       jeq  loc_C7D6
;RAM:C79D CD FE C7                    call    is_near_to
       bl   @is_near_to
;RAM:C7A0 30 34                       jr      NC, loc_C7D6
       jhe  loc_C7D6
;RAM:C7A2 C5                          push    bc
       mov  bc,*sp+
;RAM:C7A3 01 A9 C7                    ld      bc, #adj_arch_tbl
       li   bc,adj_arch_tbl
;RAM:C7A6 C3 17 CA                    jp      lookup_plyr_dXY                         ; index into table based on sprite dir
       b    @lookup_plyr_dXY
* ---------------------------------------------------------------------------
adj_arch_tbl:
       data adj_ew
       data adj_ew
       data adj_ns
       data adj_ns
* ---------------------------------------------------------------------------
adj_ew:
;RAM:C7B1 DD 7E 0A                    ld      a, 10(ix)                               ; dY
       movb @10(ix),a
;RAM:C7B4 FD BE 02                    cp      2(iy)                                   ; Y
       cb   a,@2(iy)
;RAM:C7B7 28 1C                       jr      Z, loc_C7D5
       jeq  loc_C7D5
       jl   !
;RAM:C7B9 3E 01                       ld      a, #1
       movb one,a
       jmp  loc_C7BF
;RAM:C7BB 30 02                       jr      NC, loc_C7BF
;RAM:C7BD ED 44                       neg
!      movb mone,a
loc_C7BF:
;RAM:C7BF FD 77 0F                    ld      15(iy), a
       movb a,@15(iy)
;RAM:C7C2 18 11                       jr      loc_C7D5
       jmp  loc_C7D5
* ---------------------------------------------------------------------------
adj_ns:
;RAM:C7C4 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:C7C7 FD BE 01                    cp      1(iy)                                   ; X
       cb   a,@1(iy)
;RAM:C7CA 28 09                       jr      Z, loc_C7D5
       jeq  loc_C7D5
       jl   !
;RAM:C7CC 3E 01                       ld      a, #1
       movb one,a
       jmp  loc_C7D2
;RAM:C7CE 30 02                       jr      NC, loc_C7D2
;RAM:C7D0 ED 44                       neg
!      movb mone,a
loc_C7D2:
;RAM:C7D2 FD 77 0E                    ld      14(iy), a
       movb a,@14(iy)
loc_C7D5:
;RAM:C7D5 C1                          pop     bc                                    ; pushed at RAM:C7A2
       dect sp
       mov  *sp,bc
loc_C7D6:
;RAM:C7D6 FD 19                       add     iy, de
       a    de,iy
;RAM:C7D8 10 B7                       djnz    loc_C791
       sb   one,b
       jne  loc_C791
;RAM:C7DA C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* =============== S U B R O U T I N E =======================================
*
chk_plyr_spec_near_arch:
       mov  r11,*sp+
;RAM:C7DB FD 21 08 5C                 ld      iy, #graphic_objs_tbl
       li   iy,graphic_objs_tbl
;RAM:C7DF 11 20 00                    ld      de, #32                                 ; entry size
       li   de,32
;RAM:C7E2 06 04                       ld      b, #4                                   ; player and special objects only
      movb @b04h,b
;       movb @b02h,b                   ; Rasmus optimize
loc_C7E4:
;RAM:C7E4 FD 7E 00                    ld      a, 0(iy)                                ; graphic no
       movb *iy,a
;RAM:C7E7 A7                          and     a                                       ; null?
;RAM:C7E8 28 0F                       jr      Z, loc_C7F9                             ; yes, skip
       jeq  loc_C7F9
;RAM:C7EA FD CB 07 5E                 bit     3, 7(iy)                                ; auto-adjust?
       movb @7(iy),tmp0
       andi tmp0,>0800
;RAM:C7EE 28 09                       jr      Z, loc_C7F9                             ; no, skip
       jeq  loc_C7F9
;RAM:C7F0 CD FE C7                    call    is_near_to
       bl   @is_near_to
;RAM:C7F3 30 04                       jr      NC, loc_C7F9                            ; no, skip
       jhe  loc_C7F9
;RAM:C7F5 FD CB 07 C6                 set     0, 7(iy)                                ; flag near arch
       socb one,@7(iy)
;       jmp  !                         ; Rasmus optimize
loc_C7F9:
;RAM:C7F9 FD 19                       add     iy, de                                  ; next entry
       a    de,iy
;RAM:C7FB 10 E7                       djnz    loc_C7E4                                ; loop through table
       sb   one,b
       jne  loc_C7E4
;RAM:C7FD C9                          ret
!      dect sp
       mov  *sp,r11
       rt
*
* End of function chk_plyr_spec_near_arch
*
* =============== S U B R O U T I N E =======================================
*
* ix and iy hold the two objects
* l is the x distance
* h is the y distance
* the z distance is fixed at 4
*
* On the Z80 this sets the carry flag if object x is near to object y
* so jr C can be used to test the condition.
* On the TMS9900 we can use JL instead, or JNE for the negative condition.
*
is_near_to:
;RAM:C7FE DD 7E 09                    ld      a, 9(ix)                                ; centre_x
       movb @9(ix),a
;RAM:C801 FD 96 01                    sub     1(iy)                                   ; sub X
;RAM:C804 30 02                       jr      NC, loc_C808
;RAM:C806 ED 44                       neg
       sb   @1(iy),a
       abs  a
;       cb   a,@1(iy)
;       jhe  !
;       sb   @1(iy),a
;       inv  a
;       ab   one,a
;       jmp  loc_C808
;!      sb   @1(iy),a
loc_C808:
;RAM:C808 BD                          cp      l
       cb   a,@l
;RAM:C809 D0                          ret     NC
       jhe  is_near_to_return
;RAM:C80A DD 7E 0A                    ld      a, 10(ix)                               ; centre_y
       movb @10(ix),a
;RAM:C80D FD 96 02                    sub     2(iy)                                   ; sub Y
;RAM:C810 30 02                       jr      NC, loc_C814
;RAM:C812 ED 44                       neg
       sb   @2(iy),a
       abs  a
;       cb   a,@2(iy)
;       jhe  !
;       sb   @2(iy),a
;       inv  a
;       ab   one,a
;       jmp  loc_C814
;!      sb   @2(iy),a
loc_C814:
;RAM:C814 BC                          cp      h
       cb   a,h
;RAM:C815 D0                          ret     NC
       jhe  is_near_to_return
;RAM:C816 DD 7E 0B                    ld      a, 11(ix)                               ; centre_z
       movb @11(ix),a
;RAM:C819 FD 96 03                    sub     3(iy)                                   ; sub Z
;RAM:C81C 30 02                       jr      NC, loc_C820
;RAM:C81E ED 44                       neg
       sb   @3(iy),a
       abs  a
;       cb   a,@3(iy)
;       jhe  !
;       sb   @3(iy),a
;       inv  a
;       ab   one,a
;       jmp  loc_C820
;!      sb   @3(iy),a
loc_C820:
;RAM:C820 FE 04                       cp      #4
       cb   a,@b04h
;RAM:C822 C9                          ret
is_near_to_return:
       b    *r11
*
* End of function is_near_to
*
* ---------------------------------------------------------------------------
* sabreman legs
upd_16_to_21_24_to_29:
;RAM:C823 CD DD C4                    call    adj_m6_m12
;      b    @adj_m6_m12_1
       bl   @adj_m6_m12
;RAM:C826 18 03                       jr      upd_player_bottom
       jmp  upd_player_bottom
* ---------------------------------------------------------------------------
* wulf legs
upd_48_to_53_56_to_61:
;RAM:C828 CD FC C4                    call    adj_m7_m12
       bl   @adj_m7_m12
*
upd_player_bottom:
;RAM:C82B DD CB 0D 76                 bit     6, 13(ix)                               ; dead?
       movb @13(ix),tmp0
       andi tmp0,>4000
;RAM:C82F 28 0D                       jr      Z, loc_C83E                             ; no, skip
       jeq  loc_C83E
;RAM:C831 3A C3 5B                    ld      a, (all_objs_in_cauldron)
       movb @all_objs_in_cauldron,a
;RAM:C834 A7                          and     a
;RAM:C835 20 07                       jr      NZ, loc_C83E
       jne  loc_C83E
;RAM:C837 DD CB 2D F6                 set     6, 0x2D(ix)                             ; set dead top half
       socb @b40h,@>2d(ix)
;RAM:C83B C3 21 BF                    jp      init_death_sparkles
       b    @init_death_sparkles
* ---------------------------------------------------------------------------
loc_C83E:
;RAM:C83E CD 06 C3                    call    chk_and_init_transform                  ; returns to caller if transforming
       bl   @chk_and_init_transform
;RAM:C841 CD 22 D0                    call    check_user_input
       bl   @check_user_input
;RAM:C844 CD 0E C0                    call    handle_pickup_drop
       bl   @handle_pickup_drop
;RAM:C847 CD 9F C8                    call    handle_left_right
       bl   @handle_left_right
;RAM:C84A CD 48 C9                    call    handle_jump
       bl   @handle_jump
;RAM:C84D CD 69 C9                    call    handle_forward
       bl   @handle_forward
;RAM:C850 CD 7A C8                    call    chk_plyr_OOB
       bl   @chk_plyr_OOB
;RAM:C853 30 18                       jr      NC, plyr_OOB
       jhe  plyr_OOB
loc_C855:
;RAM:C855 DD CB 27 CE                 set     1, 0x27(ix)                             ; fudge near arch (or ignore?)
       socb @b02h,@>27(ix)
;RAM:C859 CD A1 C9                    call    move_player                             ; does the moving
       bl   @move_player
;RAM:C85C DD CB 27 8E                 res     1, 0x27(ix)                             ; reset fudge
       szcb @b02h,@>27(ix)
;RAM:C860 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C863 D6 10                       sub     #0x10                                   ; entering room?
       sb   @b10h,a
;RAM:C865 38 03                       jr      C, loc_C86A                             ; no, skip
       jlt   loc_C86A
;RAM:C867 DD 77 0C                    ld      12(ix), a                               ; dec entering room counter
       movb a,@12(ix)
loc_C86A:
;RAM:C86A C3 92 C6                    jp      set_wipe_and_draw_flags
       b    @set_wipe_and_draw_flags
* ---------------------------------------------------------------------------
*
* when walking through arches
*
plyr_OOB:
;RAM:C86D DD 7E 0B                    ld      a, 11(ix)                               ; dZ
       movb @11(ix),a
;RAM:C870 A7                          and     a                                       ; <0?
;RAM:C871 FA 55 C8                    jp      M, loc_C855                             ; yes, go
       jlt  loc_C855
;RAM:C874 AF                          xor     a
       clr  a
;RAM:C875 DD 77 0B                    ld      11(ix), a                               ; dZ=0
       movb a,@11(ix)
;RAM:C878 18 DB                       jr      loc_C855
       jmp  loc_C855
*
* =============== S U B R O U T I N E =======================================
*
* returns NC if out-of-bounds
*
chk_plyr_OOB:
;RAM:C87A 2A AB 5B                    ld      hl, (room_size_X)
       movb @room_size_X,@l
       movb @room_size_Y,h
;RAM:C87D 7D                          ld      a, l                                    ; room_size_X
;RAM:C87E DD 96 04                    sub     4(ix)                                   ; sub width
;RAM:C881 6F                          ld      l, a
       sb   @4(ix),@l
;RAM:C882 7C                          ld      a, h                                    ; room_size_Y
;RAM:C883 DD 96 05                    sub     5(ix)                                   ; sub depth
;RAM:C886 67                          ld      h, a
       sb   @5(ix),h
;RAM:C887 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:C88A D6 80                       sub     #128
       sb   @b80h,a
;RAM:C88C F2 91 C8                    jp      P, loc_C891
       jgt  loc_C891
;RAM:C88F ED 44                       neg
       abs  a
loc_C891:
;RAM:C891 BD                          cp      l
       cb   a,@l
;RAM:C892 D0                          ret     NC                                      ; OOB
       jhe  chk_plyr_OOB_return
;RAM:C893 DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:C896 D6 80                       sub     #128
       sb   @b80h,a
;RAM:C898 F2 9D C8                    jp      P, loc_C89D
       jgt  loc_C89D
;RAM:C89B ED 44                       neg
       abs  a
loc_C89D:
;RAM:C89D BC                          cp      h                                       ; set/clr carry
       cb   a,h
chk_plyr_OOB_return:
;RAM:C89E C9                          ret
       rt
*
* End of function chk_plyr_OOB
*
* =============== S U B R O U T I N E =======================================
*
handle_left_right:
       mov  r11,*sp+
;RAM:C89F 21 A4 5B                    ld      hl, #user_input_method
       li   hl,user_input_method
;RAM:C8A2 7E                          ld      a, (hl)
       movb *hl,a
;RAM:C8A3 E6 06                       and     #6                                      ; joystick/keyboard bits only
       andi a,>0600
;RAM:C8A5 28 4B                       jr      Z, left_right_rotational                ; keybd? yes, skip
       jeq  left_right_rotational
;RAM:C8A7 CB 5E                       bit     3, (hl)                                 ; directional?
       movb *hl,tmp0
       andi tmp0,>0800
;RAM:C8A9 28 47                       jr      Z, left_right_rotational
       jeq  left_right_rotational
;RAM:C8AB DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C8AE E6 F0                       and     #0xF0 ; '�'                             ; entering screen?
       andi a,>f000
;RAM:C8B0 C0                          ret     NZ                                      ; yes, exit
       jne  handle_left_right_return
;RAM:C8B1 DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:C8B5 C8                          ret     Z                                       ; no, exit
       jeq  handle_left_right_return
;RAM:C8B6 CB 41                       bit     0, c                                    ; joystick left?
       mov  bc,tmp1
       mov  tmp1,tmp0
       andi tmp0,>0001
;RAM:C8B8 20 04                       jr      NZ, loc_C8BE                            ; yes, skip
       jne  loc_C8BE
;RAM:C8BA CB 51                       bit     2, c                                    ; joystick up?
       mov  tmp1,tmp0
       andi tmp0,>0004
;RAM:C8BC 20 0F                       jr      NZ, chk_facing_N                        ; yes, skip
       jne  chk_facing_N
loc_C8BE:
;RAM:C8BE CB 49                       bit     1, c                                    ; joystick right?
       mov  tmp1,tmp0
       andi tmp0,>0002
;RAM:C8C0 20 17                       jr      NZ, chk_facing_E                        ; yes, go
       jne  chk_facing_E
;RAM:C8C2 CB 61                       bit     4, c                                    ; joystick down?
       mov  tmp1,tmp0
       andi tmp0,>0010
;RAM:C8C4 20 1A                       jr      NZ, chk_facing_S                        ; yes, go
       jne  chk_facing_S
;RAM:C8C6 CB 41                       bit     0, c                                    ; joystick left?
       mov  tmp1,tmp0
       andi tmp0,>0001
;RAM:C8C8 20 1F                       jr      NZ, chk_facing_W                        ; yes, go
       jne  chk_facing_W
;RAM:C8CA CB 91                       res     2, c
       szcb @b04h,@c
;RAM:C8CC C9                          ret
handle_left_right_return:
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
chk_facing_N:
;RAM:C8CD CD 1E CA                    call    get_sprite_dir
       bl   @get_sprite_dir
;RAM:C8D0 FE 02                       cp      #2                                      ; N?
       cb   @b02h,a
loc_C8D2:
;RAM:C8D2 28 1B                       jr      Z, flag_forward
       jeq  flag_forward
;RAM:C8D4 2F                          cpl
       inv  a
loc_C8D5:
;RAM:C8D5 E6 01                       and     #1
       andi a,>0100
;RAM:C8D7 18 46                       jr      left_right_calc_sprite
       jmp  left_right_calc_sprite
* ---------------------------------------------------------------------------
chk_facing_E:
;RAM:C8D9 CD 1E CA                    call    get_sprite_dir
       bl   @get_sprite_dir
;RAM:C8DC FE 01                       cp      #1                                      ; E?
       cb   a,one
;RAM:C8DE 18 F2                       jr      loc_C8D2
       jmp  loc_C8D2
* ---------------------------------------------------------------------------
chk_facing_S:
;RAM:C8E0 CD 1E CA                    call    get_sprite_dir
       bl   @get_sprite_dir
;RAM:C8E3 FE 03                       cp      #3                                      ; S?
       cb   a,@b03h
loc_C8E5:
;RAM:C8E5 28 08                       jr      Z, flag_forward
       jeq  flag_forward
;RAM:C8E7 18 EC                       jr      loc_C8D5
       jmp  loc_C8D5
* ---------------------------------------------------------------------------
chk_facing_W:
;RAM:C8E9 CD 1E CA                    call    get_sprite_dir
       bl   @get_sprite_dir
;RAM:C8EC A7                          and     a                                       ; W?
       clr  a
;RAM:C8ED 18 F6                       jr      loc_C8E5
       jmp  loc_C8E5
* ---------------------------------------------------------------------------
flag_forward:
;RAM:C8EF CB D1                       set     2, c
       socb @b04h,@c
;RAM:C8F1 C9                          ret
       jmp  handle_left_right_return
* ---------------------------------------------------------------------------
left_right_rotational:
;RAM:C8F2 DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:C8F5 E6 07                       and     #7                                      ; too soon to turn again?
       andi a,>0700
;RAM:C8F7 28 04                       jr      Z, loc_C8FD                             ; no, skip
       jeq  loc_C8FD
;RAM:C8F9 DD 35 0D                    dec     13(ix)                                  ; dec delay counter
       sb   one,@13(ix)
;RAM:C8FC C9                          ret
       jmp  handle_left_right_return
* ---------------------------------------------------------------------------
loc_C8FD:
;RAM:C8FD 79                          ld      a, c                                    ; user input
       movb @c,a
;RAM:C8FE E6 03                       and     #3                                      ; left or right?
       andi a,>0300
;RAM:C900 C8                          ret     Z                                       ; no, return
       jeq  handle_left_right_return
;RAM:C901 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C904 E6 F0                       and     #0xF0 ; '�'                             ; entering screen?
       andi a,>f000
;RAM:C906 C0                          ret     NZ                                      ; yes, exit
       jne  handle_left_right_return
;RAM:C907 DD CB 0C 5E                 bit     3, 12(ix)                               ; already jumping?
       movb @12(ix),tmp0
       andi tmp0,>0800
;RAM:C90B C0                          ret     NZ                                      ; yes, exit
       jne  handle_left_right_return
;RAM:C90C CB 51                       bit     2, c                                    ; forward?
       movb  @c,tmp0
       andi tmp0,>0400
;RAM:C90E 20 05                       jr      NZ, loc_C915                            ; yes, skip
       jne  loc_C915
;RAM:C910 C5                          push    bc
;RAM:C911 CD C1 B4                    call    audio_B4C1
;RAM:C914 C1                          pop     bc
;      TODO
loc_C915:
;RAM:C915 DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:C918 F6 02                       or      #2                                      ; init turning delay counter
       ori  a,>0200
;RAM:C91A DD 77 0D                    ld      13(ix), a
       movb a,@13(ix)
;RAM:C91D CB 49                       bit     1, c                                    ; right?
       movb  @c,tmp0
       andi tmp0,>0200
left_right_calc_sprite:
;RAM:C91F 20 1F                       jr      NZ, loc_C940                            ; yes, skip
       jne  loc_C940
;RAM:C921 DD CB 07 76                 bit     6, 7(ix)                                ; hflip?
       movb @7(ix),tmp0
       andi tmp0,>4000
;RAM:C925 20 08                       jr      NZ, loc_C92F                            ; yes, skip
       jne  loc_C92F
loc_C927:
;RAM:C927 DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
       movb *ix,a
;RAM:C92A EE 08                       xor     #8
       li   tmp0,>0800
       xor  tmp0,a
;RAM:C92C DD 77 00                    ld      0(ix), a
       movb a,*ix
loc_C92F:
;RAM:C92F DD 7E 07                    ld      a, 7(ix)
       movb @7(ix),a
;RAM:C932 EE 40                       xor     #0x40 ; '@'                             ; toggle hflip
       li   tmp0,>4000
       xor  tmp0,a
;RAM:C934 DD 77 07                    ld      7(ix), a
       movb a,@7(ix)
;RAM:C937 DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
       movb *ix,a
;RAM:C93A C6 10                       add     a, #0x10                                ; top half
       ab   @b10h,a
;RAM:C93C DD 77 20                    ld      0x20(ix), a                             ; set sprite for top half
       movb a,@>20(ix)
;RAM:C93F C9                          ret
       jmp  handle_left_right_return
;* ---------------------------------------------------------------------------
loc_C940:
;RAM:C940 DD CB 07 76                 bit     6, 7(ix)                                ; hflip?
       movb @7(ix),tmp0
       andi tmp0,>4000
;RAM:C944 20 E1                       jr      NZ, loc_C927                            ; yes, go
       jne  loc_C927
;RAM:C946 18 E7                       jr      loc_C92F
       jmp  loc_C92F
* End of function handle_left_right
*
* =============== S U B R O U T I N E =======================================
*
handle_jump:
;RAM:C948 CB 59                       bit     3, c                                    ; jump?
       movb  @c,tmp0
       andi tmp0,>0800
;RAM:C94A C8                          ret     Z                                       ; no, exit
       jeq  handle_jump_return
;RAM:C94B DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C94E E6 F0                       and     #0xF0 ; '�'                             ; entering screen?
       andi a,>f000
;RAM:C950 C0                          ret     NZ                                      ; yes, exit
       jne  handle_jump_return
;RAM:C951 DD CB 0C 5E                 bit     3, 12(ix)                               ; already jumping?
       movb @12(ix),tmp0
       andi tmp0,>0800
;RAM:C955 C0                          ret     NZ                                      ; yes, exit
       jne  handle_jump_return
;RAM:C956 DD 7E 0B                    ld      a, 11(ix)                               ; dZ
       movb @11(ix),a
;RAM:C959 3C                          inc     a
       ab   one,a
;RAM:C95A F8                          ret     M                                       ; return if was <-1
       jlt  handle_jump_return
;RAM:C95B DD CB 0C DE                 set     3, 12(ix)                               ; flag jumping
       socb @b08h,@12(ix)
;RAM:C95F DD 36 0B 08                 ld      11(ix), #8                              ; dZ=8?
       movb @b08h,@11(ix)
;RAM:C963 C5                          push    bc
;RAM:C964 CD 41 B4                    call    audio_B441
;RAM:C967 C1                          pop     bc
;      TODO
;RAM:C968 C9                          ret
handle_jump_return:
       rt
*
* End of function handle_jump
*
* =============== S U B R O U T I N E =======================================
*
handle_forward:
;RAM:C969 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C96C E6 F0                       and     #0xF0 ; '�'                             ; entering screen?
       andi a,>f000
;RAM:C96E 20 0A                       jr      NZ, loc_C97A                            ; yes, skip
       jne  loc_C97A
;RAM:C970 DD CB 0C 5E                 bit     3, 12(ix)                               ; already jumping?
       movb @12(ix),tmp0
       andi tmp0,>0800
;RAM:C974 20 04                       jr      NZ, loc_C97A                            ; yes, skip
       jne  loc_C97A
;RAM:C976 CB 51                       bit     2, c                                    ; forward?
       movb @c,tmp0
       andi tmp0,>0400
;RAM:C978 28 1A                       jr      Z, loc_C994                             ; no, go
       jeq  loc_C994
loc_C97A:
;RAM:C97A C5                          push    bc
;RAM:C97B CD BB B4                    call    audio_B4BB
;RAM:C97E C1                          pop     bc
;      TODO
animate_human_legs:
;RAM:C97F DD 7E 00                    ld      a, 0(ix)                                ; graphic_no
       movb *ix,a
;RAM:C982 5F                          ld      e, a
       movb a,@e
;RAM:C983 3C                          inc     a                                       ; next sprite
       ab   one,a
;RAM:C984 E6 07                       and     #7
       andi a,>0700
;RAM:C986 FE 06                       cp      #6                                      ; wrap?
       cb   a,@b06h
;RAM:C988 20 01                       jr      NZ, loc_C98B                            ; no, skip
       jne  loc_C98B
;RAM:C98A AF                          xor     a
       clr  a
loc_C98B:
;RAM:C98B 57                          ld      d, a
       movb a,d
;RAM:C98C 7B                          ld      a, e
       movb @e,a
;RAM:C98D E6 F8                       and     #0xF8 ; '�'
       andi a,>f800
;RAM:C98F B2                          or      d
       socb d,a
;RAM:C990 DD 77 00                    ld      0(ix), a                                ; update sprite
       movb a,*ix
;RAM:C993 C9                          ret
handle_forward_return:
       b    *r11
* ---------------------------------------------------------------------------
loc_C994:
;RAM:C994 DD 7E 00                    ld      a, 0(ix)                               ; graphic_no
       movb *ix,a
;RAM:C997 E6 07                       and     #7
       andi a,>0700
;RAM:C999 FE 02                       cp      #2
       cb   a,@b02h
;RAM:C99B C8                          ret     Z
       jeq  handle_forward_return
;RAM:C99C FE 04                       cp      #4
       cb   a,@b04h
;RAM:C99E C8                          ret     Z
       jeq  handle_forward_return
;RAM:C99F 18 DE                       jr      animate_human_legs
       jmp  animate_human_legs
*
* End of function handle_forward
*
* =============== S U B R O U T I N E =======================================
*
move_player:
       mov  r11,*sp+
;RAM:C9A1 3A C4 5B                    ld      a, (obj_dropping_into_cauldron)
       movb @obj_dropping_into_cauldron,a
;RAM:C9A4 A7                          and     a
;RAM:C9A5 28 04                       jr      Z, loc_C9AB
       jeq  loc_C9AB
;RAM:C9A7 DD 36 0B 02                 ld      11(ix), #2                              ; dZ=2
       movb @b02h,@11(ix)
loc_C9AB:
;RAM:C9ABDD CB 0C 5E                  bit     3, 12(ix)                               ; already jumping?
       movb @12(ix),tmp0
       andi tmp0,>0800
;RAM:C9AF 20 0B                       jr      NZ, loc_C9BC                            ; yes, skip
       jne  loc_C9BC
;RAM:C9B1 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:C9B4 E6 F0                       and     #0xF0 ; '�'                            ; entering screen?
       andi a,>f000
;RAM:C9B6 20 04                       jr      NZ, loc_C9BC                            ; yes, skip
       jne  loc_C9BC
;RAM:C9B8 CB 51                       bit     2, c                                    ; forward?
       movb @c,tmp0
       andi tmp0,>0400
;RAM:C9BA 28 05                       jr      Z, loc_C9C1                             ; no, skip
       jeq  loc_C9C1
loc_C9BC:
;RAM:C9BC C5                          push    bc
       mov  bc,*sp+
;RAM:C9BD CD FB C9                    call    calc_plyr_dXY
       bl   @calc_plyr_dXY
;RAM:C9C0 C1                          pop     bc
       dect sp
       mov  *sp,bc
loc_C9C1:
;RAM:C9C1 DD 7E 0B                    ld      a, 11(ix)                                ; dZ
       movb @11(ix),a
;RAM:C9C4 A7                          and     a
;RAM:C9C5 FA CC C9                    jp      M, loc_C9CC
       jlt  loc_C9CC
;RAM:C9C8 CB 59                       bit     3, c                                    ; jump?
       movb @c,tmp0
       andi tmp0,>0800
;RAM:C9CA 20 01                       jr      NZ, loc_C9CD                            ; yes, skip
       jne  loc_C9CD
loc_C9CC:
;RAM:C9CC 3D                          dec     a
       sb   one,a
loc_C9CD:
;RAM:C9CD 3D                          dec     a
       sb   one,a
;RAM:C9CE DD 77 0B                    ld      11(ix), a                               ; dZ
       movb a,@11(ix)
;RAM:C9D1 32 C1 5B                    ld      (tmp_dZ), a
       movb a,@tmp_dZ
;RAM:C9D4 C6 02                       add     a, #2
       ab   @b02h,a
;RAM:C9D6 FC 51 B4                    call    M, audio_B451
;      TODO
;RAM:C9D9 CD 45 CB                    call    adj_for_out_of_bounds
       bl   @adj_for_out_of_bounds
;RAM:C9DC CD 70 CA                    call    handle_exit_screen
       bl   @handle_exit_screen
;RAM:C9DF CD 06 C7                    call    add_dXYZ
       bl   @add_DXYZ
;RAM:C9E2 DD CB 0C 56                 bit     2, 12(ix)                               ; Z OOB?
       movb @12(ix),tmp0
       andi tmp0,>0400
;RAM:C9E6 28 0B                       jr      Z, clear_dX_dY                          ; no, go
       jeq  call_clear_dX_dY
;RAM:C9E8 3A C1 5B                    ld      a, (tmp_dZ)
       movb @tmp_dZ,a
;RAM:C9EB A7                          and     a
       andi a,>ff00
;RAM:C9EC F2 F3 C9                    jp      P, clear_dX_dY
       jgt  call_clear_dX_dY
       jeq  call_clear_dX_dY
;RAM:C9EF DD CB 0C 9E                 res     3, 12(ix)                               ; clear jumping flag
       szcb @b08h,@12(ix)
call_clear_dX_dY:
       bl   @clear_dX_dY
;RAM:C9FA C9                          ret
move_player_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function move_player
*
* =============== S U B R O U T I N E =======================================
*
* Extracted from move_player
*
clear_dX_dY:
;RAM:C9F3 AF                          xor     a
       clr  a
;RAM:C9F4 DD 77 09                    ld      9(ix), a                                ; dX=0
       movb a,@9(ix)
;RAM:C9F7 DD 77 0A                    ld      10(ix), a                               ; dY=0
       movb a,@10(ix)
*      Return
       rt
*
* End of function clear_dX_dY
*
* =============== S U B R O U T I N E =======================================
*
calc_plyr_dXY:
       mov  r11,*sp+
;RAM:C9FB DD 7E 09                    ld      a, 9(ix)                                ; dX
;RAM:C9FE DD 86 0E                    add     a, 14(ix)                               ; dX_adjust
;RAM:CA01 DD 77 09                    ld      9(ix), a
       ab   @14(ix),@9(ix)
;RAM:CA04 DD 7E 0A                    ld      a, 10(ix)                               ; dY
;RAM:CA07 DD 86 0F                    add     a, 15(ix)                               ; dY_adj
;RAM:CA0A DD 77 0A                    ld      10(ix), a
       ab   @15(ix),@10(ix)
;RAM:CA0D AF                          xor     a
       clr  a
;RAM:CA0E DD 77 0E                    ld      14(ix), a                               ; zap adjustment
       movb a,@14(ix)
;RAM:CA11 DD 77 0F                    ld      15(ix), a                               ; zap adjustment
       movb a,@15(ix)
;RAM:CA14 01 32 CA                    ld      bc, #off_CA32
       li   bc,off_CA32
lookup_plyr_dXY:
;RAM:CA17 CD 1E CA                    call    get_sprite_dir
       bl   @get_sprite_dir
;RAM:CA1A 6F                          ld      l, a
       movb a,@l
;RAM:CA1B C3 DB AF                    jp      jump_to_tbl_entry
       b    @jump_to_tbl_entry
*
* End of function calc_plyr_dXY
*
* =============== S U B R O U T I N E =======================================
*
get_sprite_dir:
;RAM:CA1E DD 7E 07                    ld      a, 7(ix)                                ; flags
       movb @7(ix),a
;RAM:CA21 0F                          rrca
;RAM:CA22 0F                          rrca
       srl  a,2
;RAM:CA23 E6 10                       and     #0x10                                   ; hflip
       andi a,>1000
;RAM:CA25 6F                          ld      l, a
       movb a,@l
;RAM:CA26 DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:CA29 E6 08                       and     #8
       andi a,>0800
;RAM:CA2B B5                          or      l                                       ; bits 4,3
       socb @l,a
;RAM:CA2C 0F                          rrca
;RAM:CA2D 0F                          rrca
;RAM:CA2E 0F                          rrca
       srl  a,3
;RAM:CA2F E6 03                       and     #3                                      ; 1=hflip, 0=graphic no & 8
       andi a,>0300
;RAM:CA31 C9                          ret
       rt
*
* End of function get_sprite_dir
*
* ---------------------------------------------------------------------------
off_CA32:
       data move_plyr_W                                 ; dX -= 3
       data move_plyr_E                                 ; dX += 3
       data move_plyr_N                                 ; dY += 3
       data move_plyr_S                                 ; dY -= 3
* ---------------------------------------------------------------------------
move_plyr_W:
;RAM:CA3A DD 7E 09                    ld      a, 9(ix)                                 ; dX
       movb @9(ix),a
;RAM:CA3D C6 FD                       add     a, #0xFD ; '�'                          ; -3
       sb   @b03h,a
loc_CA3F:
;RAM:CA3F DD 77 09                    ld      9(ix), a
       movb a,@9(ix)
;RAM:CA42 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
move_plyr_E:
;RAM:CA43 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:CA46 C6 03                       add     a, #3                                   ; +3
       ab   @b03h,a
;RAM:CA48 18 F5                       jr      loc_CA3F
       jmp  loc_CA3F
* ---------------------------------------------------------------------------
move_plyr_N:
;RAM:CA4A DD 7E 0A                    ld      a, 10(ix)                               ; dY
       movb @10(ix),a
;RAM:CA4D C6 03                       add     a, #3                                   ; +3
       ab   @b03h,a
loc_CA4F:
;RAM:CA4F DD 77 0A                    ld      10(ix), a
       movb a,@10(ix)
;RAM:CA52 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
move_plyr_S:
;RAM:CA53 DD 7E 0A                    ld      a, 10(ix)                                ; dY
       movb @10(ix),a
;RAM:CA56 C6 FD                       add     a, #0xFD ; '�'                          ; -3
       sb   @b03h,a
;RAM:CA58 18 F5                       jr      loc_CA4F
       jmp  loc_CA4F
*
* =============== S U B R O U T I N E =======================================
*
* adjust dX/dY/dZ when out of bounds
* A = dX/dY/dZ
*
adj_d_for_out_of_bounds:
;RAM:CA89 A7                          and     a                                       ; zero?
       movb a,a
;RAM:CA8A C8                          ret     Z                                       ; yes, exit
       jeq  adj_d_for_out_of_bounds_return
;RAM:CA8B F2 90 CA                    jp      P, loc_CA90                             ; skip if >0
       jgt  loc_CA90
;RAM:CA8E 3C                          inc     a
;RAM:CA8F 3C                          inc     a
       ab   @b02h,a
loc_CA90:
;RAM:CA90 3D                          dec     a
       sb   one,a
adj_d_for_out_of_bounds_return:
;RAM:CA91 C9                          ret
       rt
*
* End of function adj_d_for_out_of_bounds
*
* =============== S U B R O U T I N E =======================================
*
handle_exit_screen:
       mov  r11,*sp+
;RAM:CA70 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:CA73 E6 F0                       and     #0xF0 ; '�'                            ; entering room?
       andi a,>f000
;RAM:CA75 C0                          ret     NZ                                      ; yes, exit
       jne  handle_exit_screen_return
;RAM:CA76 DD CB 07 46                 bit     0, 7(ix)                                ; near an arch?
       movb @7(ix),tmp0
       andi tmp0,>0100
;RAM:CA7A C8                          ret     Z                                       ; no, return
       jeq  handle_exit_screen_return
;RAM:CA7B DD CB 07 86                 res     0, 7(ix)                                ; reset flag
       szcb one,@7(ix)
;RAM:CA7F 01 92 CA                    ld      bc, #screen_move_tbl
       li   bc,screen_move_tbl
;RAM:CA82 2A AB 5B                    ld      hl, (room_size_X)
       movb @room_size_X,@l
       movb @room_size_Y,h
;RAM:CA85 E5                          push    hl
       mov  hl,*sp+
;RAM:CA86 C3 17 CA                    jp      lookup_plyr_dXY
       b    @lookup_plyr_dXY
handle_exit_screen_return:
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
screen_move_tbl:
       data screen_west
       data screen_east
       data screen_north
       data screen_south
* ---------------------------------------------------------------------------
screen_west:
;RAM:CA9A E1                          pop     hl                                      ; room sizes
       dect sp
       mov  *sp,hl
;RAM:CA9B 3E 80                       ld      a, #128
       movb @b80h,a
;RAM:CA9D 95                          sub     l                                       ; room_size_X
       sb   @l,a
;RAM:CA9E 6F                          ld      l, a
       movb a,@l
;RAM:CA9F DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:CAA2 DD 86 09                    add     a, 9(ix)                                ; +dX
       ab   @9(ix),a
;RAM:CAA5 DD 86 04                    add     a, 4(ix)                                ; +width
       ab   @4(ix),a
;RAM:CAA8 BD                          cp      l
       cb   a,@l
;RAM:CAA9 D0                          ret     NC
       jhe  handle_exit_screen_return
;RAM:CAAA DD 36 01 00                 ld      1(ix), #0                               ; X
       szcb mone,@1(ix)
;RAM:CAAE DD 7E 08                    ld      a, 8(ix)                                ; screen
       movb @8(ix),a
;RAM:CAB1 6F                          ld      l, a
       movb a,@l
;RAM:CAB2 3D                          dec     a                                       ; screen to the west
       sb   one,a
screen_e_w:
;RAM:CAB3 E6 0F                       and     #0xF                                    ; low nibble
       andi a,>0f00
;RAM:CAB5 67                          ld      h, a
       movb a,h
;RAM:CAB6 7D                          ld      a, l
       movb @l,a
;RAM:CAB7 E6 F0                       and     #0xF0 ; '�'                            ; high nibble - don't change row
       andi a,>f000
;RAM:CAB9 B4                          or      h                                       ; same row - wraps???
       socb h,a
* ---------------------------------------------------------------------------
exit_screen:
;RAM:CABA DD 77 08                    ld      8(ix), a                                ; store new screen
       movb a,@8(ix)
;RAM:CABD DD 7E 0C                    ld      a, 12(ix)                               ; flags12
;RAM:CAC0 F6 30                       or      #0x30 ; '0'                             ; init enter room counter
;RAM:CAC2 DD 77 0C                    ld      12(ix), a                               ; save
       socb @b30h,@12(ix)
;RAM:CAC5 DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:CAC8 D6 10                       sub     #0x10
       sb   @b10h,a
;RAM:CACA FE 40                       cp      #0x40 ; '@'                             ; wulf?
       cb   a,@b40h
;RAM:CACC D0                          ret     NC                                      ; WHY is wulf handled differently???
       jhe  handle_exit_screen_return
;RAM:CACD 33                          inc     sp
;RAM:CACE 33                          inc     sp
;RAM:CACF 33                          inc     sp
;RAM:CAD0 33                          inc     sp
       ai   sp,-6                     ; We seem to have pushed one less item on the TI
;RAM:CAD1 DD E5                       push    ix
;RAM:CAD3 E1                          pop     hl
       mov  ix,hl
;RAM:CAD4 11 61 D1                    ld      de, #plyr_spr_1_scratchpad
       li   de,plyr_spr_1_scratchpad
;RAM:CAD7 01 40 00                    ld      bc, #64
       li   bc,64
;RAM:CADA ED B0                       ldir
       bl   @ldir
;RAM:CADC 3A 61 D1                    ld      a, (plyr_spr_1_scratchpad)              ; graphic no.
;RAM:CADF 32 71 D1                    ld      (byte_D171), a
       movb @plyr_spr_1_scratchpad,@byte_D171
;RAM:CAE2 3A 81 D1                    ld      a, (plyr_spr_2_scratchpad)              ; graphic no.
;RAM:CAE5 32 91 D1                    ld      (byte_D191), a
       movb @plyr_spr_2_scratchpad,@byte_D191
;RAM:CAE8 3E 78                       ld      a, #120                                 ; sparkly transform #1
       movb @b78h,a
;RAM:CAEA 32 61 D1                    ld      (plyr_spr_1_scratchpad), a              ; graphic no.
       movb a,@plyr_spr_1_scratchpad
;RAM:CAED 32 81 D1                    ld      (plyr_spr_2_scratchpad), a              ; graphic no.
       movb a,@plyr_spr_2_scratchpad
;RAM:CAF0 C3 BA AF                    jp      game_loop
       b    @game_loop
* ---------------------------------------------------------------------------
screen_east:
;RAM:CAF3 E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:CAF4 7D                          ld      a, l
;RAM:CAF5 C6 80                       add     a, #128
;RAM:CAF7 6F                          ld      l, a                                    ; room_size_X + 128
       ab   @b80h,@l
;RAM:CAF8 DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:CAFB DD 86 09                    add     a, 9(ix)                                ; +dX
       ab   @9(ix),a
;RAM:CAFE DD 96 04                    sub     4(ix)                                   ; -width
       sb   @4(ix),a
;RAM:CB01 BD                          cp      l
       cb   a,@l
;RAM:CB02 D8                          ret     C
       jl   handle_exit_screen_return
;RAM:CB03 DD 36 01 FF                 ld      1(ix), #0xFF                            ; X
       movb mone,@1(ix)
;RAM:CB07 DD 7E 08                    ld      a, 8(ix)                                ; screen
       movb @8(ix),a
;RAM:CB0A 6F                          ld      l, a
       movb a,@l
;RAM:CB0B 3C                          inc     a                                       ; screen to the east
       ab   one,a
;RAM:CB0C 18 A5                       jr      screen_e_w
       jmp  screen_e_w
* ---------------------------------------------------------------------------
screen_north:
;RAM:CB0E E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:CB0F 7C                          ld      a, h                                    ; room_size_Y
;RAM:CB10 C6 80                       add     a, #128
;RAM:CB12 67                          ld      h, a
       ab   @b80h,h
;RAM:CB13 DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:CB16 DD 86 0A                    add     a, 10(ix)                               ; +dY
       ab   @10(ix),a
;RAM:CB19 DD 96 05                    sub     5(ix)                                   ; -depth
       sb   @5(ix),a
;RAM:CB1C BC                          cp      h
       cb   a,h
;RAM:CB1D D8                          ret     C
       jl   handle_exit_screen_return
;RAM:CB1E DD 36 02 FF                 ld      2(ix), #0xFF                            ; Y
       movb mone,@2(ix)
;RAM:CB22 DD 7E 08                    ld      a, 8(ix)                                ; screen
       movb @8(ix),a
;RAM:CB25 C6 10                       add     a, #16                                  ; screen to the north
       ab   @b10h,a
;RAM:CB27 18 91                       jr      exit_screen
       jmp  exit_screen
* ---------------------------------------------------------------------------
screen_south:
;RAM:CB29 E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:CB2A 3E 80                       ld      a, #128
       movb @b80h,a
;RAM:CB2C 94                          sub     h                                       ; room_size_Y
       sb   h,a
;RAM:CB2D 67                          ld      h, a
       movb a,h
;RAM:CB2E DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:CB31 DD 86 0A                    add     a, 10(ix)                               ; +dY
       ab   @10(ix),a
;RAM:CB34 DD 86 05                    add     a, 5(ix)                                ; +depth
       ab   @5(ix),a
;RAM:CB37 BC                          cp      h
       cb   a,h
;RAM:CB38 D0                          ret     NC
       jl   !
       b    @handle_exit_screen_return
;RAM:CB39 DD 36 02 00                 ld      2(ix), #0                               ; Y
!      szcb mone,@2(ix)
;RAM:CB3D DD 7E 08                    ld      a, 8(ix)                                ; screen
       movb @8(ix),a
;RAM:CB40 D6 10                       sub     #16                                     ; screen to the south
       sb   @b10h,a
;RAM:CB42 C3 BA CA                    jp      exit_screen
       jmp  exit_screen
*
* End of function handle_exit_screen
*
* =============== S U B R O U T I N E =======================================
*
adj_for_out_of_bounds:
       mov  r11,*sp+
;RAM:CB45 DD CB 07 4E                 bit     1, 7(ix)                                ; ignore bit
       movb @7(ix),tmp0
       andi tmp0,>0200
;RAM:CB49 C0                          ret     NZ
       jne  adj_for_out_of_bounds_return
;RAM:CB4A DD CB 07 CE                 set     1, 7(ix)                                ; set ignore bit
       socb @b02h,@7(ix)
;RAM:CB4E DD 7E 0C                    ld      a, 12(ix)
       movb @12(ix),a
;RAM:CB51 E6 F8                       and     #0xF8 ; '�'                             ; clear X,Y,Z OOB
       andi a,>f800
;RAM:CB53 DD 77 0C                    ld      12(ix), a
       movb a,@12(ix)
;RAM:CB56 2E 00                       ld      l, #0
       szcb mone,@l
;RAM:CB58 4D                          ld      c, l
       movb @l,@c
;RAM:CB59 DD 7E 0B                    ld      a, 11(ix)                               ; dZ
       movb @11(ix),a
;RAM:CB5C A7                          and     a                                       ; zero?
;RAM:CB5D 67                          ld      h, a
       movb a,h
;RAM:CB5E 28 0A                       jr      Z, dZ_ok                                ; yes, skip
       jeq  dZ_ok
;RAM:CB60 CD 5A CA                    call    adj_dZ_for_out_of_bounds
       bl   @adj_dZ_for_out_of_bounds
;RAM:CB63 7C                          ld      a, h                                    ; new dZ
       movb h,a
;RAM:CB64 A7                          and     a                                       ; zero?
;RAM:CB65 28 03                       jr      Z, dZ_ok                                ; yes, skip
       jeq  dZ_ok
;RAM:CB67 CD 38 CC                    call    adj_dZ_for_obj_intersect
       bl   @adj_dZ_for_obj_intersect
dZ_ok:
;RAM:CB6A DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb  @9(ix),a
;RAM:CB6D A7                          and     a                                       ; zero?
;RAM:CB6E 4F                          ld      c, a
       movb a,@c
;RAM:CB6F 28 0A                       jr      Z, loc_CB7B                             ; yes, skip
       jeq  loc_CB7B
;RAM:CB71 CD DD CC                    call    adj_dX_for_out_of_bounds
       bl   @adj_dX_for_out_of_bounds
;RAM:CB74 79                          ld      a, c                                    ; new dX
       movb @c,a
;RAM:CB75 A7                          and     a                                       ; zero?
;RAM:CB76 28 03                       jr      Z, loc_CB7B                             ; yes, skip
       jeq  loc_CB7B
;RAM:CB78 CD 9A CB                    call    adj_dX_for_obj_intersect
       bl   @adj_dX_for_obj_intersect
loc_CB7B:
;RAM:CB7B DD 7E 0A                    ld      a, 10(ix)                               ; dY
       movb @10(ix),a
;RAM:CB7E A7                          and     a                                       ; zero?
;RAM:CB7F 6F                          ld      l, a
       movb a,@l
;RAM:CB80 28 0A                       jr      Z, loc_CB8C                             ; yes, skip
       jeq  loc_CB8C
;RAM:CB82 CD 08 CD                    call    adj_dY_for_out_of_bounds
       bl   @adj_dY_for_out_of_bounds
;RAM:CB85 7D                          ld      a, l                                    ; new dY
       movb @l,a
;RAM:CB86 A7                          and     a                                       ; zero?
;RAM:CB87 28 03                       jr      Z, loc_CB8C                             ; yes, skip
       jeq  loc_CB8C
;RAM:CB89 CD E9 CB                    call    adj_dY_for_obj_intersect
       bl   @adj_dY_for_obj_intersect
loc_CB8C:
;RAM:CB8C DD 71 09                    ld      9(ix), c                                ; new dX
       movb @c,@9(ix)
;RAM:CB8F DD 75 0A                    ld      10(ix), l                               ; new dY
       movb @l,@10(ix)
;RAM:CB92 DD 74 0B                    ld      11(ix), h                               ; new dZ
       movb h,@11(ix)
;RAM:CB95 DD CB 07 8E                 res     1, 7(ix)                                ; clear ignore bit
       szcb @b02h,@7(ix)
;RAM:CB99 C9                          ret
adj_for_out_of_bounds_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_for_out_of_bounds
*
* =============== S U B R O U T I N E =======================================
*
adj_dX_for_obj_intersect:
       mov  r11,*sp+
;RAM:CB9A FD 21 08 5C                 ld      iy, #graphic_objs_tbl
       li   iy,graphic_objs_tbl
;RAM:CB9E 06 28                       ld      b, #40                                  ; max objects
       movb @b28h,b
loc_CBA0:
;RAM:CBA0 CD 38 B5                    call    is_object_not_ignored
       bl   @is_object_not_ignored
;RAM:CBA3 28 3C                       jr      Z, loc_CBE1                             ; ignored, skip
       jeq  loc_CBE1
;RAM:CBA5 CD B2 CC                    call    do_objs_intersect_on_y
       bl   @do_objs_intersect_on_y
;RAM:CBA8 30 37                       jr      NC, loc_CBE1
       jhe  loc_CBE1
;RAM:CBAA CD C7 CC                    call    do_objs_intersect_on_z
       bl   @do_objs_intersect_on_z
;RAM:CBAD 30 32                       jr      NC, loc_CBE1
       jhe  loc_CBE1
loc_CBAF:
;RAM:CBAF CD 9D CC                    call    do_objs_intersect_on_x
       bl   @do_objs_intersect_on_x
;RAM:CBB2 30 2D                       jr      NC, loc_CBE1
       jhe  loc_CBE1
;RAM:CBB4 DD CB 0C C6                 set     0, 12(ix)                               ; set X OOB
       socb one,@12(ix)
;RAM:CBB8 DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:CBBB 0F                          rrca
       srl  a,1
;RAM:CBBC E6 40                       and     #0x40 ; '@'                             ; bit 7->6
       andi a,>4000
;RAM:CBBE FD B6 0D                    or      13(iy)                                  ; obj2 destroyed?
;RAM:CBC1 FD 77 0D                    ld      13(iy), a
       socb a,@13(iy)
;RAM:CBC4 07                          rlca
       sla  a,1
;RAM:CBC5 E6 40                       and     #0x40 ; '@'                             ; bit 5->6
       andi a,>4000
;RAM:CBC7 DD B6 0D                    or      13(ix)                                  ; obj1 destroyed?
;RAM:CBCA DD 77 0D                    ld      13(ix), a
       socb a,@13(ix)
;RAM:CBCD FD CB 07 56                 bit     2, 7(iy)                                ; moveable?
       movb @7(iy),tmp0
       andi tmp0,>0400
;RAM:CBD1 28 06                       jr      Z, loc_CBD9                             ; no, skip
       jeq  loc_CBD9
;RAM:CBD3 DD 7E 09                    ld      a, 9(ix)
;RAM:CBD6 FD 77 09                    ld      9(iy), a                                ; copy dX
       movb @9(ix),@9(iy)
loc_CBD9:
;RAM:CBD9 79                          ld      a, c
       movb @c,a
;RAM:CBDA CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CBDD 4F                          ld      c, a
       movb a,@c
;RAM:CBDE C8                          ret     Z
       jeq  adj_dX_for_obj_intersect_return
;RAM:CBDF 18 CE                       jr      loc_CBAF
       jmp  loc_CBAF
* ---------------------------------------------------------------------------
loc_CBE1:
;RAM:CBE1 11 20 00                    ld      de, #32                                 ; entry size
;RAM:CBE4 FD 19                       add     iy, de                                  ; next entry
       ai   iy,32
;RAM:CBE6 10 B8                       djnz    loc_CBA0
       sb   one,b
       jne  loc_CBA0
;RAM:CBE8 C9                          ret
adj_dX_for_obj_intersect_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dX_for_obj_intersect
*
* =============== S U B R O U T I N E =======================================
*
adj_dY_for_obj_intersect:
       mov  r11,*sp+
;RAM:CBE9 FD 21 08 5C                 ld      iy, #graphic_objs_tbl
       li   iy,graphic_objs_tbl
;RAM:CBED 06 28                       ld      b, #40                                  ; max objects
       movb @b28h,b
loc_CBEF:
;RAM:CBEF CD 38 B5                    call    is_object_not_ignored
       bl   @is_object_not_ignored
;RAM:CBF2 28 3C                       jr      Z, loc_CC30                             ; next entry
       jeq  loc_CC30
;RAM:CBF4 CD 9D CC                    call    do_objs_intersect_on_x
       bl   @do_objs_intersect_on_x
;RAM:CBF7 30 37                       jr      NC, loc_CC30                            ; next entry
       jhe  loc_CC30
;RAM:CBF9 CD C7 CC                    call    do_objs_intersect_on_z
       bl   @do_objs_intersect_on_z
;RAM:CBFC 30 32                       jr      NC, loc_CC30                            ; next entry
       jhe  loc_CC30
loc_CBFE:
;RAM:CBFE CD B2 CC                    call    do_objs_intersect_on_y
       bl   @do_objs_intersect_on_y
;RAM:CC01 30 2D                       jr      NC, loc_CC30                            ; next entry
       jhe  loc_CC30
;RAM:CC03 DD CB 0C CE                 set     1, 12(ix)                               ; set Y OOB
       socb @b02h,@12(ix)
;RAM:CC07 DD 7E 0D                    ld      a, 13(ix)
       movb @13(ix),a
;RAM:CC0A 0F                          rrca
       srl  a,1
;RAM:CC0B E6 40                       and     #0x40 ; '@'                             ; bit 7->6
       andi a,>4000
;RAM:CC0D FD B6 0D                    or      13(iy)                                  ; obj2 destroyed?
;RAM:CC10 FD 77 0D                    ld      13(iy), a
       socb a,@13(iy)
;RAM:CC13 07                          rlca
       sla  a,1
;RAM:CC14 E6 40                       and     #0x40 ; '@'                             ; bit 5->6
       andi a,>4000
;RAM:CC16 DD B6 0D                    or      13(ix)                                  ; obj1 destroyed?
;RAM:CC19 DD 77 0D                    ld      13(ix), a
       socb a,@13(ix)
;RAM:CC1C FD CB 07 56                 bit     2, 7(iy)                                ; moveable?
       movb @7(iy),tmp0
       andi tmp0,>0400
;RAM:CC20 28 06                       jr      Z, loc_CC28                             ; no, skip
       jeq  loc_CC28
;RAM:CC22 DD 7E 0A                    ld      a, 10(ix)
;RAM:CC25 FD 77 0A                    ld      10(iy), a                               ; copy dY
       movb @10(ix),@10(iy)
loc_CC28:
;RAM:CC28 7D                          ld      a, l
       movb @l,a
;RAM:CC29 CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CC2C 6F                          ld      l, a
       movb a,@l
;RAM:CC2D C8                          ret     Z
       jeq  adj_dY_for_obj_intersect_return
;RAM:CC2E 18 CE                       jr      loc_CBFE
       jmp  loc_CBFE
* ---------------------------------------------------------------------------
loc_CC30:
;RAM:CC30 11 20 00                    ld      de, #32                                 ; entry size
;RAM:CC33 FD 19                       add     iy, de                                  ; next entry
       ai   iy,32
;RAM:CC35 10 B8                       djnz    loc_CBEF                                ; loop through table
       sb   one,b
       jne  loc_CBEF
;RAM:CC37 C9                          ret
adj_dY_for_obj_intersect_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dY_for_obj_intersect
*
* =============== S U B R O U T I N E =======================================
*
adj_dZ_for_obj_intersect:
       mov  r11,*sp+
;RAM:CC38 FD 21 08 5C                 ld      iy, #graphic_objs_tbl
       li   iy,graphic_objs_tbl
;RAM:CC3C 06 28                       ld      b, #40                                  ; max objects
       movb  @b28h,b
loc_CC3E:
;RAM:CC3E CD 38 B5                    call    is_object_not_ignored
       bl   @is_object_not_ignored
;RAM:CC41 28 52                       jr      Z, loc_CC95                             ; next entry
       jeq  loc_CC95
;RAM:CC43 CD 9D CC                    call    do_objs_intersect_on_x
       bl   @do_objs_intersect_on_x
;RAM:CC46 30 4D                       jr      NC, loc_CC95                            ; next entry
       jhe  loc_CC95
;RAM:CC48 CD B2 CC                    call    do_objs_intersect_on_y
       bl   @do_objs_intersect_on_y
;RAM:CC4B 30 48                       jr      NC, loc_CC95                            ; next entry
       jhe  loc_CC95
loc_CC4D:
;RAM:CC4D CD C7 CC                    call    do_objs_intersect_on_z
       bl   @do_objs_intersect_on_z
;RAM:CC50 30 43                       jr      NC, loc_CC95                            ; next entry
       jhe  loc_CC95
;RAM:CC52 DD CB 0C D6                 set     2, 12(ix)                               ; set Z OOB
       socb @b04h,@12(ix)
;RAM:CC56 DD 7E 0D                    ld      a, 13(ix)
       movb  @13(ix),a
;RAM:CC59 0F                          rrca
       srl  a,1
;RAM:CC5A E6 40                       and     #0x40 ; '@'                             ; bit 7->6
       andi a,>4000
;RAM:CC5C FD B6 0D                    or      13(iy)                                  ; obj2 destroyed?
;RAM:CC5F FD 77 0D                    ld      13(iy), a
       socb a,@13(iy)
;RAM:CC62 07                          rlca
       sla  a,1
;RAM:CC63 E6 40                       and     #0x40 ; '@'                             ; bit 5->6
       andi a,>4000
;RAM:CC65 DD B6 0D                    or      13(ix)                                  ; obj1 destroyed?
;RAM:CC68 DD 77 0D                    ld      13(ix), a
       socb a,@13(ix)
;RAM:CC6B FD CB 0D DE                 set     3, 13(iy)                               ; triggered (falling, collapsing blocks)
       socb @b08h,@13(iy)
;RAM:CC6F DD CB 07 56                 bit     2, 7(ix)                                ; moveable?
       movb @7(ix),tmp0
       andi tmp0,>0400
;RAM:CC73 28 18                       jr      Z, loc_CC8D                             ; no, skip
       jeq  loc_CC8D
;RAM:CC75 DD 7E 09                    ld      a, 9(ix)                                ; dX
       movb @9(ix),a
;RAM:CC78 A7                          and     a                                       ; zero?
;RAM:CC79 20 06                       jr      NZ, loc_CC81                            ; no, skip
       jne  loc_CC81
;RAM:CC7B FD 7E 09                    ld      a, 9(iy)
;RAM:CC7E DD 77 09                    ld      9(ix), a                                ; copy dX
       movb  @9(iy),@9(ix)
loc_CC81:
;RAM:CC81 DD 7E 0A                    ld      a, 10(ix)                               ; objdY
       movb @10(ix),a
;RAM:CC84 A7                          and     a                                       ; moving along Y?
;RAM:CC85 20 06                       jr      NZ, loc_CC8D                            ; yes, skip
       jne  loc_CC8D
;RAM:CC87 FD 7E 0A                    ld      a, 10(iy)
;RAM:CC8A DD 77 0A                    ld      10(ix), a                               ; copy dY
       movb @10(iy),@10(ix)
loc_CC8D:
;RAM:CC8D 7C                          ld      a, h
       movb h,a
;RAM:CC8E CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CC91 67                          ld      h, a
       movb a,h
;RAM:CC92 C8                          ret     Z
       jeq  adj_dZ_for_obj_intersect_return
;RAM:CC93 18 B8                       jr      loc_CC4D
       jmp  loc_CC4D
* ---------------------------------------------------------------------------
loc_CC95:
;RAM:CC95 11 20 00                    ld      de, #32                                 ; entry size
;RAM:CC98 FD 19                       add     iy, de                                  ; next entry
       ai   iy,32
;RAM:CC9A 10 A2                       djnz    loc_CC3E                                ; loop through table
       sb   one,b
       jne  loc_CC3E
;RAM:CC9C C9                          ret
adj_dZ_for_obj_intersect_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dZ_for_obj_intersect
*
* =============== S U B R O U T I N E =======================================
*
do_objs_intersect_on_x:
;RAM:CC9D DD 7E 04                    ld      a, 4(ix)                                ; objW (width)
       movb @4(ix),a
;RAM:CCA0 FD 86 04                    add     a, 4(iy)                                ; thisW
       ab   @4(iy),a
;RAM:CCA3 57                          ld      d, a                                    ; objW+thisW
       movb a,d
;RAM:CCA4 DD 7E 01                    ld      a, 1(ix)                                ; obj X
       movb @1(ix),a
;RAM:CCA7 81                          add     a, c                                    ; new dX
       ab   @c,a
;RAM:CCA8 FD 96 01                    sub     1(iy)                                   ; objX + newdX - thisX
       sb   @1(iy),a
;RAM:CCAB F2 B0 CC                    jp      P, loc_CCB0
;RAM:CCAE ED 44                       neg                                             ; abs()
       abs  a
loc_CCB0:
;RAM:CCB0 92                          sub     d                                       ; abs(objX+newdX-thisX)-(objW+thisW)
       cb   a,d
;RAM:CCB1 C9                          ret                                             ; C flag set indicates intersection
       rt
*
* End of function do_objs_intersect_on_x
*
* =============== S U B R O U T I N E =======================================
*
do_objs_intersect_on_y:
;RAM:CCB2 DD 7E 05                    ld      a, 5(ix)                                ; objD (depth)
       movb @5(ix),a
;RAM:CCB5 FD 86 05                    add     a, 5(iy)                                ; thisD
       ab   @5(iy),a
;RAM:CCB8 57                          ld      d, a                                    ; (objD+thisD)
       movb a,d
;RAM:CCB9 DD 7E 02                    ld      a, 2(ix)                                ; objY
       movb @2(ix),a
;RAM:CCBC 85                          add     a, l
       ab   @l,a
;RAM:CCBD FD 96 02                    sub     2(iy)                                   ; (objY+new dY-thisY)
       sb   @2(iy),a
;RAM:CCC0 F2 C5 CC                    jp      P, loc_CCC5
;RAM:CCC3 ED 44                       neg                                             ; abs()
       abs  a
loc_CCC5:
;RAM:CCC5 92                          sub     d                                       ; (objY+l+thisY)-(objD+thisD)
       cb   a,d
;RAM:CCC6 C9                          ret                                             ; C flag set indicates intersection
       rt
*
* End of function do_objs_intersect_on_y
*
* =============== S U B R O U T I N E =======================================
*
do_objs_intersect_on_z:
;RAM:CCC7 DD 7E 03                    ld      a, 3(ix)                                ; objZ
       movb @3(ix),a
;RAM:CCCA 84                          add     a, h
       ab   h,a
;RAM:CCCB FD 96 03                    sub     3(iy)                                   ; (objZ+new dZ-thisZ)
       sb   @3(iy),a
;RAM:CCCE F2 D8 CC                    jp      P, loc_CCD8
       jgt  loc_CCD8
       jeq  loc_CCD8
;RAM:CCD1 ED 44                       neg                                             ; abs()
       abs  a
;RAM:CCD3 DD 56 06                    ld      d, 6(ix)                                ; objH (height)
       movb @6(ix),d
loc_CCD6:
;RAM:CCD6 92                          sub     d                                       ; (objZ+H-thisZ)-(objH or thisH)
       cb   a,d
;RAM:CCD7 C9                          ret                                             ; C flag set indicates intersection
       rt
* ---------------------------------------------------------------------------
loc_CCD8:
;RAM:CCD8 FD 56 06                    ld      d, 6(iy)                                ; thisH (height)
       movb @6(iy),d
;RAM:CCDB 18 F9                       jr      loc_CCD6
       jmp  loc_CCD6
*
* End of function do_objs_intersect_on_z
*
* =============== S U B R O U T I N E =======================================
*
adj_dX_for_out_of_bounds:
       mov  r11,*sp+
;RAM:CCDD DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:CCE0 E6 F0                       and     #0xF0 ; '�'                             ; entering room?
       andi a,>f000
;RAM:CCE2 C0                          ret     NZ                                      ; yes, exit
       jne  adj_dX_for_out_of_bounds_return
;RAM:CCE3 DD CB 07 46                 bit     0, 7(ix)                                ; near an arch?
       movb @7(ix),tmp0
       andi tmp0,>0100
;RAM:CCE7 C0                          ret     NZ                                      ; yes, exit
       jne  adj_dX_for_out_of_bounds_return
;RAM:CCE8 3A AB 5B                    ld      a, (room_size_X)
       movb @room_size_x,a
;RAM:CCEB 47                          ld      b, a
       movb a,b
loc_CCEC:
;RAM:CCEC DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:CCEF 81                          add     a, c                                    ; +dX
       ab   @c,a
;RAM:CCF0 D6 80                       sub     #128
;RAM:CCF2 30 02                       jr      NC, loc_CCF6
;RAM:CCF4 ED 44                       neg
       sb   @b80h,a
       abs  a
;       cb   a,@b80h
;       jhe  !
;       sb   @b80h,a
;       inv  a
;       ab   one,a
;       jmp  loc_CCF6
;!      sb   @b80h,a
loc_CCF6:
;RAM:CCF6 DD 86 04                    add     a, 4(ix)                                ; X+dX+width
       ab   @4(ix),a
;RAM:CCF9 B8                          cp      b                                       ; < room width?
       cb   a,b
;RAM:CCFA 38 0B                       jr      C, dX_ok                                ; yes, skip
       jl   dX_ok
;RAM:CCFC DD CB 0C C6                 set     0, 12(ix)                               ; set X OOB
       socb one,@12(ix)
;RAM:CD00 79                          ld      a, c                                    ; dX
       movb @c,a
;RAM:CD01 CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CD04 4F                          ld      c, a                                    ; new dX
       movb a,@c
;RAM:CD05 20 E5                       jr      NZ, loc_CCEC                            ; check again
       jne  loc_CCEC
dX_ok:
;RAM:CD07 C9                          ret
adj_dX_for_out_of_bounds_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dX_for_out_of_bounds
*
* =============== S U B R O U T I N E =======================================
*
adj_dY_for_out_of_bounds:
       mov  r11,*sp+
;RAM:CD08 DD 7E 0C                    ld      a, 12(ix)                               ; flags12
       movb @12(ix),a
;RAM:CD0B E6 F0                       and     #0xF0 ; '�'                             ; entering room?
       andi a,>f000
;RAM:CD0D C0                          ret     NZ                                      ; yes, exit
       jne  adj_dY_for_out_of_bounds_return
;RAM:CD0E DD CB 07 46                 bit     0, 7(ix)                                ; near and arch?
       movb @7(ix),tmp0
       andi tmp0,>0100
;RAM:CD12 C0                          ret     NZ                                      ; yes, exit
       jne  adj_dY_for_out_of_bounds_return
;RAM:CD13 3A AC 5B                    ld      a, (room_size_Y)
       movb @room_size_Y,a
;RAM:CD16 47                          ld      b, a
       movb a,b
loc_CD17:
;RAM:CD17 DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb @2(ix),a
;RAM:CD1A 85                          add     a, l                                    ; +dY
       ab   @l,a
;RAM:CD1B D6 80                       sub     #128
;RAM:CD1D 30 02                       jr      NC, loc_CD21
;RAM:CD1F ED 44                       neg
       sb   @b80h,a
       abs  a
;       cb   a,@b80h
;       jhe  !
;       sb   @b80h,a
;       inv  a
;       ab   one,a
;       jmp  loc_CD21
;!      sb   @b80h,a
loc_CD21:
;RAM:CD21 DD 86 05                    add     a, 5(ix)                                ; Y+dY+depth
       ab   @5(ix),a
;RAM:CD24 B8                          cp      b                                       ; < room depth?
       cb   a,b
;RAM:CD25 38 0B                       jr      C, dY_ok                                ; yes, skip
       jl   dY_ok
;RAM:CD27 DD CB 0C CE                 set     1, 12(ix)                               ; set Y OOB
       socb @b02h,@12(ix)
;RAM:CD2B 7D                          ld      a, l                                    ; dY
       movb @l,a
;RAM:CD2C CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CD2F 6F                          ld      l, a                                    ; new dY
       movb a,@l
;RAM:CD30 20 E5                       jr      NZ, loc_CD17                            ; check again
       jne  loc_CD17
dY_ok:
;RAM:CD32 C9                          ret
adj_dY_for_out_of_bounds_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dY_for_out_of_bounds
*
* =============== S U B R O U T I N E =======================================
*
adj_dZ_for_out_of_bounds:
       mov  r11,*sp+
;RAM:CA5A 3A AE 5B                    ld      a, (room_size_Z)
;RAM:CA5D 57                          ld      d, a
       movb @room_size_Z,d
loc_CA5E:
;RAM:CA5E DD 7E 03                    ld      a, 3(ix)                                ; Z
       movb @3(ix),a
;RAM:CA61 84                          add     a, h                                    ; Z+=dZ
       ab   h,a
;RAM:CA62 BA                          cp      d                                       ; >= room height?
       cb   a,d
;RAM:CA63 D0                          ret     NC                                      ; yes, return
       jhe  adj_dZ_for_out_of_bounds_return
;RAM:CA64 DD CB 0C D6                 set     2, 12(ix)
       socb @b04h,@12(ix)
;RAM:CA68 7C                          ld      a, h                                    ; Z+dZ
       movb h,a
;RAM:CA69 CD 89 CA                    call    adj_d_for_out_of_bounds
       bl   @adj_d_for_out_of_bounds
;RAM:CA6C 67                          ld      h, a                                    ; new dZ
       movb a,h
;RAM:CA6D 20 EF                       jr      NZ, loc_CA5E                            ; check again
       jne  loc_CA5E
;RAM:CA6F C9                          ret
adj_dZ_for_out_of_bounds_return:
       dect sp
       mov  *sp,r11
       rt
*
* End of function adj_dZ_for_out_of_bounds
*
* =============== S U B R O U T I N E =======================================
*
set_draw_objs_overlapped:
       mov  r11,*sp+
;RAM:CD4D FD 21 08 5C                 ld      iy, #graphic_objs_tbl
set_draw_objs_overlapped_1:
       li   iy,graphic_objs_tbl
;RAM:CD51 CD 33 CD                    call    calc_2d_info
       bl   @calc_2d_info
;RAM:CD54 06 28                       ld      b, #40                                  ; max objects
       movb @b28h,b
;RAM:CD56 DD 7E 1A                    ld      a, 26(ix)                               ; pixelX
       movb @26(ix),a
;RAM:CD59 0F                          rrca
;RAM:CD5A 0F                          rrca
;RAM:CD5B 0F                          rrca
       srl  a,3
;RAM:CD5C E6 1F                       and     #0x1F                                   ; byte address
       andi a,>1f00
;RAM:CD5E 6F                          ld      l, a
       movb a,@l
;RAM:CD5F DD 7E 1E                    ld      a, 30(ix)                               ; old pixelX
       movb @30(ix),a
;RAM:CD62 0F                          rrca
;RAM:CD63 0F                          rrca
;RAM:CD64 0F                          rrca
       srl a,3
;RAM:CD65 E6 1F                       and     #0x1F                                   ; bytes address
       andi a,>1f00
;RAM:CD67 67                          ld      h, a
       movb a,h
;RAM:CD68 BD                          cp      l
       cb   a,@l
;RAM:CD69 38 01                       jr      C, loc_CD6C
       jl   loc_CD6C                  ; TODO: test if this works
;RAM:CD6B 7D                          ld      a, l
       movb @l,a
loc_CD6C:
;RAM:CD6C 5F                          ld      e, a                                    ; left extremity (byte address)
       movb a,@e
;RAM:CD6D 7D                          ld      a, l                                    ; byte address
       movb @l,a
;RAM:CD6E DD 86 18                    add     a, 24(ix)                               ; + data width (bytes)
       ab   @24(ix),a
;RAM:CD71 6F                          ld      l, a
       movb a,@l
;RAM:CD72 7C                          ld      a, h                                    ; old byte address
       movb h,a
;RAM:CD73 DD 86 1C                    add     a, 28(ix)                               ; + old data width bytes
       ab   @28(ix),a
;RAM:CD76 BD                          cp      l
       cb   a,@l
;RAM:CD77 30 01                       jr      NC, loc_CD7A
       jhe  loc_CD7A                  ; TODO: test if this works
;RAM:CD79 7D                          ld      a, l
       movb @l,a
loc_CD7A:
;RAM:CD7A 93                          sub     e                                       ; combined width old & new
       sb   @e,a
;RAM:CD7B 57                          ld      d, a
       movb a,d
;RAM:CD7C DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
       movb @27(ix),a
;RAM:CD7F DD BE 1F                    cp      31(ix)                                  ; old pixelY
       cb   a,@31(ix)
;RAM:CD82 38 03                       jr      C, loc_CD87
       jl   loc_CD87                  ; TODO: test if this works
;RAM:CD84 DD 7E 1F                    ld      a, 31(ix)                               ; old pixelY
       movb @31(ix),a
loc_CD87:
;RAM:CD87 6F                          ld      l, a                                    ; lowest Y
       movb a,@l
;RAM:CD88 DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
       movb   @27(ix),a
;RAM:CD8B DD 86 19                    add     a, 25(ix)                               ; + data height (lines)
       ab   @25(ix),a
;RAM:CD8E 67                          ld      h, a
       movb a,h
;RAM:CD8F DD 7E 1F                    ld      a, 31(ix)                               ; old pixelY
       movb @31(ix),a
;RAM:CD92 DD 86 1D                    add     a, 29(ix)                               ; + old data height (lines)
       ab   @29(ix),a
;RAM:CD95 BC                          cp      h
       cb   a,h
;RAM:CD96 30 01                       jr      NC, loc_CD99
       jhe  loc_CD99                 ; TODO: test if this works
;RAM:CD98 7C                          ld      a, h
       movb h,a
loc_CD99:
;RAM:CD99 95                          sub     l
       sb   @l,a
;RAM:CD9A 67                          ld      h, a                                    ; combined height (lines)
       movb a,h
test_overlap_obj:
;RAM:CD9B FD 7E 00                    ld      a, 0(iy)                                ; graphic_no
       movb *iy,a
;RAM:CD9E A7                          and     a                                       ; null?
;RAM:CD9F 28 21                       jr      Z, next_overlap_obj                     ; yes, skip
       jeq  next_overlap_obj
;RAM:CDA1 FD CB 07 66                 bit     4, 7(iy)                                ; DRAW flag already set?
       movb @7(iy),tmp0
       andi tmp0,>1000
;RAM:CDA5 20 1B                       jr      NZ, next_overlap_obj                    ; yes, skip
       jne  next_overlap_obj
;RAM:CDA7 FD 7E 1A                    ld      a, 26(iy)                               ; pixel X
       movb @26(iy),a
;RAM:CDAA 0F                          rrca
;RAM:CDAB 0F                          rrca
;RAM:CDAC 0F                          rrca
       srl  a,3
;RAM:CDAD E6 1F                       and     #0x1F                                   ; byte address of pixel
       andi a,>1f00
;RAM:CDAF 93                          sub     e                                       ; < left extremity (to the left)?
;RAM:CDB0 38 1A                       jr      C, loc_CDCC                             ; yes, go
       cb   a,@e                       ; TODO: test if this works
       jhe  !
       sb   @e,a
       jmp  loc_CDCC
!      sb   @e,a
;RAM:CDB2 BA                          cp      d                                       ; < right extermity (overlapping)?
       cb   a,d
loc_CDB3:
;RAM:CDB3 30 0D                       jr      NC, next_overlap_obj                    ; no, skip
       jhe  next_overlap_obj
;RAM:CDB5 FD 7E 1B                    ld      a, 27(iy)                               ; pixel Y
       movb @27(iy),a
;RAM:CDB8 95                          sub     l                                       ; < lowest Y (below)?
;RAM:CDB9 38 18                       jr      C, loc_CDD3                             ; yes, go
       cb   a,@l                      ; TODO: test if this works
       jhe  !
       sb   @l,a
       jmp  loc_CDD3
!      sb   @l,a
;RAM:CDBB BC                          cp      h                                       ; < height (overlapping)?
       cb   a,h
loc_CDBC:
;RAM:CDBC 30 04                       jr      NC, next_overlap_obj                    ; no, skip
       jhe  next_overlap_obj
;RAM:CDBE FD CB 07 E6                 set     4, 7(iy)                                ; set DRAW flag
       socb @b10h,@7(iy)
next_overlap_obj:
;RAM:CDC2 D9                          exx
;      bl   @exx
;RAM:CDC3 11 20 00                    ld      de, #32                                 ; entry size
;      li   de,32
;RAM:CDC6 FD 19                       add     iy, de                                  ; next entry
;      a    de,iy
;RAM:CDC8 D9                          exx
;      bl   @exx
*      Replaced by:
       ai   iy,32
;RAM:CDC9 10 D0                       djnz    test_overlap_obj
       sb   one,b
       jne  test_overlap_obj
;RAM:CDCB C9                          ret
       dect sp
       mov  *sp,r11
       b    *r11
* ---------------------------------------------------------------------------
loc_CDCC:
;RAM:CDCC ED 44                       neg
       abs  a
;RAM:CDCE FD BE 18                    cp      24(iy)                                  ; data width (bytes)
       cb   a,@24(iy)
;RAM:CDD1 18 E0                       jr      loc_CDB3
       jmp  loc_CDB3
* ---------------------------------------------------------------------------
loc_CDD3:
;RAM:CDD3 ED 44                       neg
       abs  a
;RAM:CDD5 FD BE 19                    cp      25(iy)                                  ; data height (lines)
       cb   a,@25(iy)
;RAM:CDD8 18 E2                       jr      loc_CDBC
       jmp  loc_CDBC
*
* End of function set_draw_objs_overlapped
*
* ---------------------------------------------------------------------------
* player (human top half)
upd_32_to_47:
;RAM:CDDA CD F7 C4                    call    adj_m8_m12
       bl   @adj_m8_m12
;RAM:CDDD 18 03                       jr      upd_player_top
       jmp  upd_player_top
* ---------------------------------------------------------------------------
* player (wulf top half)
upd_64_to_79:
;RAM:CDDF CD 01 C5                    call    adj_m12_m12
       bl   @adj_m12_m12
* ---------------------------------------------------------------------------
* copies most information from bottom half object
* handles randomly looking around
*
upd_player_top:
;RAM:CDE2 3A C3 5B                    ld      a, (all_objs_in_cauldron)
       movb @all_objs_in_cauldron,a
;RAM:CDE5 A7                          and     a
;RAM:CDE6 20 07                       jr      NZ, loc_CDEF
       jne  loc_CDEF
;RAM:CDE8 DD CB 0D 76                 bit     6, 13(ix)
       movb @13(ix),tmp0
       andi tmp0,>4000
;RAM:CDEC C2 21 BF                    jp      NZ, init_death_sparkles
       jeq  loc_CDEF
       b    @init_death_sparkles
loc_CDEF:
;RAM:CDEF DD E5                       push    ix
;RAM:CDF1 D1                          pop     de                                      ; DE=top
       mov  ix,de
;RAM:CDF2 21 E0 FF                    ld      hl, #0xFFE0                             ; -32
       li   hl,-32
;RAM:CDF5 19                          add     hl, de
       a    de,hl
;RAM:CDF6 E5                          push    hl                                      ; HL=bottom
;RAM:CDF7 FD E1                       pop     iy                                      ; IY=player bottom half
       mov  hl,iy
;RAM:CDF9 13                          inc     de                                      ; DE=top+1
       inc  de
;RAM:CDFA 23                          inc     hl                                      ; HL=bottom+1
       inc  hl
;RAM:CDFB 01 07 00                    ld      bc, #7
       li   bc,7
;RAM:CDFE ED B0                       ldir                                            ; copy x,y,z,w,d,h,flags
       bl   @ldir
;RAM:CE00 DD 36 06 00                 ld      6(ix), #0                               ; height (top)
       szcb mone,@6(ix)
;RAM:CE04 DD CB 07 CE                 set     1, 7(ix)                                ; ignore in 3D calcs
       socb @b02h,@7(ix)
;RAM:CE08 DD 7E 0D                    ld      a, 13(ix)                               ; flags13
       movb @13(ix),a
;RAM:CE0B E6 0F                       and     #0xF                                    ; look around counter
       andi a,>0f00
;RAM:CE0D 28 05                       jr      Z, loc_CE14                             ; maybe look around again?
       jeq  loc_CE14
;RAM:CE0F DD 35 0D                    dec     13(ix)                                  ; dec look around counter
       sb   one,@13(ix)
;RAM:CE12 18 13                       jr      loc_CE27
       jmp  loc_CE27
* ---------------------------------------------------------------------------
loc_CE14:
;RAM:CE14 3A A5 5B                    ld      a, (seed_3)                             ; look in a random direction
       movb @seed_3,a
;RAM:CE17 FE 02                       cp      #2                                      ; one way?
       cb   a,@b02h
;RAM:CE19 38 18                       jr      C, loc_CE33                             ; yes, go
       jl   loc_CE33
;RAM:CE1B FE FE                       cp      #0xFE ; '�'                             ; other way?
       cb   a,@bfeh
;RAM:CE1D 30 21                       jr      NC, loc_CE40                            ; yes, go
       jhe  loc_CE40
;RAM:CE1F FD 7E 00                    ld      a, 0(iy)                                ; straight ahead
       movb *iy,a
set_top_sprite:
;RAM:CE22 C6 10                       add     a, #16
       ab   @b10h,a
;RAM:CE24 DD 77 00                    ld      0(ix), a                                ; graphic_no (top half)
       movb a,*ix
loc_CE27:
;RAM:CE27 FD 7E 03                    ld      a, 3(iy)                                ; Z (bottom half)
       movb @3(iy),a
;RAM:CE2A C6 0C                       add     a, #12                                  ; directly above
       ab   @b0ch,a
;RAM:CE2C DD 77 03                    ld      3(ix), a                                ; store in top half
       movb a,@3(ix)
;RAM:CE2F CD 4D CD                    call    set_draw_objs_overlapped
       bl   @set_draw_objs_overlapped
;RAM:CE32 C9                          ret
       dect sp
       mov  *sp,r11
       bl   *r11
* ---------------------------------------------------------------------------
loc_CE33:                                                       ; graphic_no (bottom half)
;RAM:CE33 FD 7E 00                    ld      a, 0(iy)
       movb *iy,a
;RAM:CE36 E6 F8                       and     #0xF8 ; '�'
       andi a,>f800
;RAM:CE38 F6 06                       or      #6                                      ; look one way
       ori  a,>0600
loc_CE3A:
;RAM:CE3A DD 36 0D 08                 ld      13(ix), #8                              ; look for 8 iterations
       movb @b08h,@13(ix)
;RAM:CE3E 18 E2                       jr      set_top_sprite
       jmp  set_top_sprite
* ---------------------------------------------------------------------------
loc_CE40:
;RAM:CE40 FD 7E 00                    ld      a, 0(iy)
       movb *iy,a
;RAM:CE43 E6 F8                       and     #0xF8 ; '�'
       andi a,>f800
;RAM:CE45 F6 07                       or      #7                                      ; look the other way
       ori  a,>0700
;RAM:CE47 18 F1                       jr      loc_CE3A
       jmp  loc_CE3A
*
* =============== S U B R O U T I N E =======================================
*
save_2d_info:
;RAM:CE49 DD 7E 18                    ld      a, 24(ix)                               ; data width (bytes)
;RAM:CE4C DD 77 1C                    ld      28(ix), a
       movb @24(ix),@28(ix)
;RAM:CE4F DD 7E 19                    ld      a, 25(ix)                               ; data height (lines)
;RAM:CE52 DD 77 1D                    ld      29(ix), a
       movb @25(ix),@29(ix)
;RAM:CE55 DD 7E 1A                    ld      a, 26(ix)                               ; pixel X
;RAM:CE58 DD 77 1E                    ld      30(ix), a
       movb @26(ix),@30(ix)
;RAM:CE5B DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
;RAM:CE5E DD 77 1F                    ld      31(ix), a
       movb @27(ix),@31(ix)
;RAM:CE61 C9                          ret
       rt
*
* End of function save_2d_info
*
* =============== S U B R O U T I N E =======================================
*
list_objects_to_draw:
;RAM:CE62 DD E5                       push    ix
       mov  ix,*sp+
;RAM:CE64 06 28                       ld      b, #40                                  ; max 40 objects in list
       movb @b28h,b
;RAM:CE66 11 20 00                    ld      de, #32                                 ; object size = 32 bytes
       li   de,32
;RAM:CE69 DD 21 08 5C                 ld      ix, #graphic_objs_tbl                   ; base of object table
       li   ix,graphic_objs_tbl
;RAM:CE6D 21 8B CE                    ld      hl, #objects_to_draw
       li   hl,objects_to_draw
;RAM:CE70 0E 00                       ld      c, #0                                   ; init object index
       szcb mone,@c
loc_CE72:
;RAM:CE72 DD 7E 00                    ld      a, 0(ix)                                ; graphic no.
       movb *ix,a
;RAM:CE75 A7                          and     a                                       ; null?
;RAM:CE76 28 08                       jr      Z, loc_CE80                             ; yes, skip
       jeq  loc_CE80
;RAM:CE78 DD CB 07 66                 bit     4, 7(ix)                                ; draw flag set?
       movb @7(ix),tmp0
       andi tmp0,>1000
;RAM:CE7C 28 02                       jr      Z, loc_CE80                             ; no, skip
       jeq  loc_CE80
;RAM:CE7E 71                          ld      (hl), c                                 ; add object index to list
;RAM:CE7F 23                          inc     hl                                      ; ptr next list address
       movb @c,*hl+
loc_CE80:
;RAM:CE80 0C                          inc     c                                       ; next object index
       ab   one,@c
;RAM:CE81 DD 19                       add     ix, de                                  ; ptr next object in table
       a    de,ix
;RAM:CE83 10 ED                       djnz    loc_CE72                                ; loop through all objects
       sb   one,b
       jne  loc_CE72
;RAM:CE85 3E FF                       ld      a, #0xFF
       li   a,>ff00
;RAM:CE87 77                          ld      (hl), a                                 ; flag end of list
       movb a,*hl
;RAM:CE88 DD E1                       pop     ix
       dect sp
       mov  *sp,ix
;RAM:CE8A C9                          ret
       rt
*
* End of function list_objects_to_draw
*
* =============== S U B R O U T I N E =======================================
*
calc_display_order_and_render:
       mov  r11,*sp+
;RAM:CEBB AF                          xor     a
;RAM:CEBC 32 BE 5B                    ld      (rendered_objs_cnt), a
       szcb mone,@rendered_objs_cnt
;RAM:CEBF DD E5                       push    ix
       mov  ix,*sp+
;RAM:CEC1 FD E5                       push    iy
       mov  iy,*sp+
process_remaining_objs:
;RAM:CEC3 11 8B CE                    ld      de, #objects_to_draw
       li   de,objects_to_draw
loc_CEC6:
;RAM:CEC6 1A                          ld      a, (de)                                 ; graphic no.
;RAM:CEC7 13                          inc     de
       movb *de+,a
;RAM:CEC8 FE FF                       cp      #0xFF                                   ; end of list?
       cb   a,mone
;RAM:CECA CA 15 D0                    jp      Z, render_done                          ; yes, exit
       jne  !
       b    @render_done
;RAM:CECD CB 7F                       bit     7, a                                    ; already rendered?
!      movb  a,tmp0
       andi tmp0,>8000
;RAM:CECF 20 F5                       jr      NZ, loc_CEC6                            ; yes, skip
       jne  loc_CEC6
;RAM:CED1 CD B5 D3                    call    get_ptr_object                          ; ret=HL
       bl   @get_ptr_object
;RAM:CED4 ED 53 CD 5B                 ld      (render_obj_1), de
       mov  de,@render_obj_1
;RAM:CED8 E5                          push    hl
;RAM:CED9 DD E1                       pop     ix                                      ; IX=ptr graphic object table entry #1
       mov  hl,ix
loc_CEDB:
;RAM:CEDB 1A                          ld      a, (de)                                 ; next object graphic no.
;RAM:CEDC 13                          inc     de
       movb *de+,a
;RAM:CEDD FE FF                       cp      #0xFF                                   ; end of list?
       cb   a,mone
;RAM:CEDF CA 00 D0                    jp      Z, render_obj_no1
       jne  !
       b    @render_obj_no1
;RAM:CEE2 CB 7F                       bit     7, a
!      movb a,tmp0
       andi tmp0,>8000
;RAM:CEE4 20 F5                       jr      NZ, loc_CEDB
       jne  loc_CEDB
;RAM:CEE6 CD B5 D3                    call    get_ptr_object
       bl   @get_ptr_object
;RAM:CEE9 ED 53 CF 5B                 ld      (render_obj_2), de
       mov  de,@render_obj_2
;RAM:CEED E5                          push    hl
;RAM:CEEE FD E1                       pop     iy                                      ; HL,IY=ptr graphic object table entry #2
       mov  hl,iy
;RAM:CEF0 DD E5                       push    ix
;RAM:CEF2 C1                          pop     bc                                      ; IX,BC=ptr graphic object table entry #1
       mov  ix,bc
;RAM:CEF3 A7                          and     a
;RAM:CEF4 ED 42                       sbc     hl, bc                                  ; same objects?
       s    bc,hl
;RAM:CEF6 28 E3                       jr      Z, loc_CEDB                             ; yes, loop
       jeq  loc_CEDB
;RAM:CEF8 0E 00                       ld      c, #0
       szcb mone,@c
;RAM:CEFA FD 7E 03                    ld      a, 3(iy)                                ; Z2
       movb @3(iy),a
;RAM:CEFD FD 86 06                    add     a, 6(iy)                                ; add height(H2)
       ab   @6(iy),a
;RAM:CF00 6F                          ld      l, a                                    ; Z2+H2
       movb a,@l
;RAM:CF01 DD 7E 03                    ld      a, 3(ix)                                ; Z1
       movb @3(ix),a
;RAM:CF04 95                          sub     l                                       ; Z1-(Z2+H2)
       cb   a,@l                      ; TODO: is this correct?
;RAM:CF05 30 0F                       jr      NC, loc_CF16                            ; no overlap (C+=0)
       jhe  loc_CF16
;RAM:CF07 DD 7E 03                    ld      a, 3(ix)                                ; Z1
       movb @3(ix),a
;RAM:CF0A DD 86 06                    add     a, 6(ix)                                ; add H1
       ab   @6(ix),a
;RAM:CF0D 6F                          ld      l, a
       movb a,@l
;RAM:CF0E FD 7E 03                    ld      a, 3(iy)                                ; Z2
       movb @3(iy),a
;RAM:CF11 95                          sub     l                                       ; Z2-(Z1+H1)
       cb   a,@l                      ; TODO: is this correct?
;RAM:CF12 38 01                       jr      C, loc_CF15                             ; overlap (C+=1)
       jl   loc_CF15
;RAM:CF14 0C                          inc     c                                       ; no overlap (C+=2)
       ab   one,@c
loc_CF15:
;RAM:CF15 0C                          inc     c
       ab   one,@c
loc_CF16:
;RAM:CF16 FD 7E 02                    ld      a, 2(iy)                                ; Y2
       movb @2(iy),a
;RAM:CF19 FD 86 05                    add     a, 5(iy)                                ; add depth (D2)
       ab   @5(iy),a
;RAM:CF1C 6F                          ld      l, a
       movb a,@l
;RAM:CF1D DD 7E 02                    ld      a, 2(ix)                                ; Y1
       movb @2(ix),a
;RAM:CF20 DD 96 05                    sub     5(ix)                                   ; sub D1
       sb   @5(ix),a
;RAM:CF23 95                          sub     l                                       ; Y1-D1-(Y2+d2)
       cb   a,@l                      ; TODO: is this correct?
;RAM:CF24 30 16                       jr      NC, loc_CF3C                            ; no overlap (C+=0)
       jhe  loc_CF3C
;RAM:CF26 DD 7E 02                    ld      a, 2(ix)                                ; Y1
       movb @2(ix),a
;RAM:CF29 DD 86 05                    add     a, 5(ix)                                ; add D1
       ab   @5(ix),a
;RAM:CF2C 6F                          ld      l, a
       movb a,@l
;RAM:CF2D FD 7E 02                    ld      a, 2(iy)                                ; Y2
       movb @2(iy),a
;RAM:CF30 FD 96 05                    sub     5(iy)                                   ; sub D2
       sb   @5(iy),a
;RAM:CF33 95                          sub     l                                       ; Y2-D2-(Y1+D1)
;RAM:CF34 79                          ld      a, c
       movb a,tmp0                      ; TODO: is this correct?
       movb @c,a
       cb   tmp0,@l
;RAM:CF35 38 02                       jr      C, loc_CF39                             ; overlap (C+=3)
       jl   loc_CF39
;RAM:CF37 C6 03                       add     a, #3                                   ; no overlap (C+=6)
       ab   @b03h,a
loc_CF39:
;RAM:CF39 C6 03                       add     a, #3
       ab   @b03h,a
;RAM:CF3B 4F                          ld      c, a
       movb   a,@c
loc_CF3C:
;RAM:CF3C FD 7E 01                    ld      a, 1(iy)                                ; X2
       movb @1(iy),a
;RAM:CF3F FD 86 04                    add     a, 4(iy)                                ; add width (W2)
       ab   @4(iy),a
;RAM:CF42 6F                          ld      l, a
       movb a,@l
;RAM:CF43 DD 7E 01                    ld      a, 1(ix)                                ; X1
       movb @1(ix),a
;RAM:CF46 DD 96 04                    sub     4(ix)                                   ; sub W1
       sb   @4(ix),a
;RAM:CF49 95                          sub     l                                       ; X1-W1-(X2+W2)
       cb   a,@l                     ; TODO: is this correct?
;RAM:CF4A 30 16                       jr      NC, loc_CF62                            ; no overlap (C+=0)
       jhe  loc_CF62
;RAM:CF4C DD 7E 01                    ld      a, 1(ix)                                ; X1
       movb @1(ix),a
;RAM:CF4F DD 86 04                    add     a, 4(ix)                                ; add W1
       ab   @4(ix),a
;RAM:CF52 6F                          ld      l, a
       movb a,@l
;RAM:CF53 FD 7E 01                    ld      a, 1(iy)                                ; X2
       movb @1(iy),a
;RAM:CF56 FD 96 04                    sub     4(iy)                                   ; sub W2
       sb   @4(iy),a
;RAM:CF59 95                          sub     l                                       ; X2-W2-(X1+W1)
;RAM:CF5A 79                          ld      a, c
       movb a,tmp0
       movb @c,a
       cb   tmp0,@l
;RAM:CF5B 38 02                       jr      C, loc_CF5F                             ; overlap (C+=9)
       jl   loc_Cf5F
;RAM:CF5D C6 09                       add     a, #9                                   ; no overlap (c+=18)
       ab   @b09h,a
loc_CF5F:
;RAM:CF5F C6 09                       add     a, #9
       ab   @b09h,a
;RAM:CF61 4F                          ld      c, a
       movb a,@c
loc_CF62:
;RAM:CF62 69                          ld      l, c
       movb @c,@l
;RAM:CF63 01 69 CF                    ld      bc, #off_CF69                           ; jump table
       li   bc,calc_display_order_and_render_jmp_tbl
;RAM:CF66 C3 DB AF                    jp      jump_to_tbl_entry
       b    @jump_to_tbl_entry
* ---------------------------------------------------------------------------
calc_display_order_and_render_jmp_tbl:
       data continue_1
       data continue_1
       data continue_1
       data d_3467121516
       data d_3467121516
       data continue_1
       data d_3467121516
       data d_3467121516
       data continue_1
       data continue_1
       data continue_2
       data continue_2
       data d_3467121516
       data objs_coincide
       data continue_2
       data d_3467121516
       data d_3467121516
       data continue_1
       data continue_1
       data continue_2
       data continue_2
       data continue_1
       data continue_2
       data continue_2
       data continue_1
       data continue_1
       data continue_1
* ---------------------------------------------------------------------------
continue_1:
;RAM:CF9F C3 DB CE                    jp      loc_CEDB
       b    @loc_CEDB
* ---------------------------------------------------------------------------
continue_2:
;RAM:CFA2 C3 DB CE                    jp      loc_CEDB
       b    @loc_CEDB
* ---------------------------------------------------------------------------
d_3467121516:
;RAM:CFA5 2A CF 5B                    ld      hl, (render_obj_2)                      ; object following obj#2
       mov  @render_obj_2,hl
;RAM:CFA8 2B                          dec     hl                                      ; ptr obj#2
       dec  hl
;RAM:CFA9 4E                          ld      c, (hl)                                 ; index
       movb *hl,@c
;RAM:CFAA 11 1A D0                    ld      de, #render_list
       li   de,render_list
loc_CFAD:
;RAM:CFAD 1A                          ld      a, (de)
       movb *de,a
;RAM:CFAE FE FF                       cp      #0xFF                                   ; empty entry?
       cb   a,mone
;RAM:CFB0 28 06                       jr      Z, loc_CFB8                             ; yes, go
       jeq  loc_CFB8
;RAM:CFB2 B9                          cp      c                                       ; already listed?
       cb   a,@c
;RAM:CFB3 28 19                       jr      Z, loc_CFCE                             ; yes, go
       jeq  loc_CFCE
;RAM:CFB5 13                          inc     de                                      ; next entry
       inc  de
;RAM:CFB6 18 F5                       jr      loc_CFAD                                ; loop
       jmp  loc_CFAD
* ---------------------------------------------------------------------------
loc_CFB8:
;RAM:CFB8 79                          ld      a, c                                    ; index
;RAM:CFB9 12                          ld      (de), a                                 ; add to list
;RAM:CFBA 13                          inc     de                                      ; next entry
       movb @c,*de+
;RAM:CFBB 3E FF                       ld      a, #0xFF
;RAM:CFBD 12                          ld      (de), a                                 ; flag empty
       movb mone,*de
;RAM:CFBE FD E5                       push    iy
;RAM:CFC0 DD E1                       pop     ix                                      ; obj#2=obj#1
       mov  iy,ix
;RAM:CFC2 2A CF 5B                    ld      hl, (render_obj_2)                      ; object following obj#2
       mov  @render_obj_2,hl
;RAM:CFC5 22 CD 5B                    ld      (render_obj_1), hl                      ; set to object following #1
       mov  hl,@render_obj_1
;RAM:CFC8 11 8B CE                    ld      de, #objects_to_draw
       li   de,objects_to_draw
;RAM:CFCB C3 DB CE                    jp      loc_CEDB                                ; go again
       b    @loc_CEDB
* ---------------------------------------------------------------------------
loc_CFCE:
;RAM:CFCE 21 8B CE                    ld      hl, #objects_to_draw
       li   hl,objects_to_draw
loc_CFD1:
;RAM:CFD1 7E                          ld      a, (hl)                                 ; graphic_no
;RAM:CFD2 23                          inc     hl
       movb *hl+,a
;RAM:CFD3 FE FF                       cp      #0xFF                                   ; end of list?
       cb   a,mone
;RAM:CFD5 CA C3 CE                    jp      Z, process_remaining_objs               ; yes, exit
       jne  !
       b    @process_remaining_objs
;RAM:CFD8 B9                          cp      c                                       ; what we're looking for?
!      cb   a,@c
;RAM:CFD9 20 F6                       jr      NZ, loc_CFD1                            ; no, loop
       jne  loc_CFD1
;RAM:CFDB FD E5                       push    iy
;RAM:CFDD DD E1                       pop     ix                                      ; obj#2=obj#1
       mov  iy,ix
;RAM:CFDF 18 22                       jr      render_obj
       jmp  render_obj
* ---------------------------------------------------------------------------
objs_coincide:
;RAM:CFE1 DD 7E 00                    ld      a, 0(ix)                                ; obj#1 graphic no.
       movb *ix,a
;RAM:CFE4 D6 60                       sub     #0x60 ; '`'
       sb   @b60h,a
;RAM:CFE6 FE 07                       cp      #7                                      ; special object?
       cb   a,@b07h
;RAM:CFE8 30 06                       jr      NC, loc_CFF0                            ; no, skip
       jhe  loc_CFF0
;RAM:CFEA DD 36 00 BB                 ld      0(ix), #187                             ; set to twinkle sprite
       movb @bbbh,*ix
;RAM:CFEE 18 0D                       jr      loc_CFFD
       jmp  loc_CFFD
* ---------------------------------------------------------------------------
loc_CFF0:
;RAM:CFF0 FD 7E 00                    ld      a, 0(iy)                                ; object #2 graphic no.
       movb *iy,a
;RAM:CFF3 D6 60                       sub     #0x60 ; '`'
       sb   @b60h,a
;RAM:CFF5 FE 07                       cp      #7                                      ; special object?
       cb   a,@b07h
;RAM:CFF7 30 04                       jr      NC, loc_CFFD                            ; no, skip
       jhe  loc_CFFD
;RAM:CFF9 FD 36 00 BB                 ld      0(iy), #187                             ; set to twinkle sprite
       movb @bbbh,*iy
loc_CFFD:
;RAM:CFFD C3 DB CE                    jp      loc_CEDB                                ; continue
       b    @loc_CEDB
* ---------------------------------------------------------------------------
render_obj_no1:
;RAM:D000 2A CD 5B                    ld      hl, (render_obj_1)
       mov  @render_obj_1,hl
render_obj:
;RAM:D003 2B                          dec     hl                                      ; back to entry we're searching for
       dec  hl
;RAM:D004 CB FE                       set     7, (hl)                                 ; flag as rendered
       socb @b80h,*hl
;RAM:D006 3E FF                       ld      a, #0xFF
;RAM:D008 32 1A D0                    ld      (render_list), a                        ; set entry to empty
       movb mone,@render_list
;RAM:D00B 21 BE 5B                    ld      hl, #rendered_objs_cnt
       li   hl,rendered_objs_cnt
;RAM:D00E 34                          inc     (hl)
       ab   one,*hl
;RAM:D00F CD 04 D7                    call    calc_pixel_XY_and_render                ; render object to video buffer
       bl   @calc_pixel_XY_and_render
;RAM:D012 C3 C3 CE                    jp      process_remaining_objs                  ; restart processing again
       b    @process_remaining_objs
* ---------------------------------------------------------------------------
render_done:
;RAM:D015 FD E1                       pop     iy
       dect sp
       mov  *sp,iy
;RAM:D017 DD E1                       pop     ix
       dect sp
       mov  *sp,ix
;RAM:D019 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function calc_display_order_and_render
*
* =============== S U B R O U T I N E =======================================
*
lose_life:
       mov  r11,*sp+
;RAM:D12A 21 61 D1                    ld      hl, #plyr_spr_1_scratchpad
       li   hl,plyr_spr_1_scratchpad
;RAM:D12D 11 08 5C                    ld      de, #graphic_objs_tbl
       li   de,graphic_objs_tbl
;RAM:D130 D5                          push    de
;RAM:D131 DD E1                       pop     ix
       mov  de,ix
;RAM:D133 01 40 00                    ld      bc, #64                                 ; 1st 2 entries
       li   bc,64
;RAM:D136 ED B0                       ldir                                            ; copy scratchpad back to object table
       bl   @ldir
;RAM:D138 AF                          xor     a
;RAM:D139 32 B1 5B                    ld      (transform_flag_graphic), a
       szcb mone,@transform_flag_graphic
;RAM:D13C 21 BA 5B                    ld      hl, #lives
       li   hl,lives
;RAM:D13F 35                          dec     (hl)                                    ; decrement life
       sb   one,*hl
;RAM:D140 FA 22 BA                    jp      M, game_over                            ; any left? no, exit
       jgt  !
       jeq  !
       b    @game_over
;RAM:D143 3A 4D C4                    ld      a, (sun_moon_scratchpad)                ; sprite index
!      movb @sun_moon_scratchpad,a
;RAM:D146 0F                          rrca
;RAM:D147 0F                          rrca
;RAM:D148 0F                          rrca
       sla  a,5                        ; Move bit 0 to bit 5
;RAM:D149 E6 20                       and     #0x20 ; ' '                             ; day/night?
       andi a,>2000
;RAM:D14B 4F                          ld      c, a
       movb a,@c
;RAM:D14C DD 7E 10                    ld      a, 16(ix)                               ; plyr graphic no
       movb @16(ix),a
;RAM:D14F E6 1F                       and     #0x1F
       andi a,>1f00
;RAM:D151 81                          add     a, c                                    ; legs human/wulf?
       ab   @c,a
;RAM:D152 DD 77 10                    ld      16(ix), a
       movb a,@16(ix)
;RAM:D155 DD 7E 30                    ld      a, 0x30(ix)                             ; top half player graphic no
       movb @>30(ix),a
;RAM:D158 E6 0F                       and     #0xF
       andi a,>0f00
;RAM:D15A 81                          add     a, c
       ab   @c,a
;RAM:D15B C6 20                       add     a, #32                                  ; top half human/wulf
       ab   @b20h,a
;RAM:D15D DD 77 30                    ld      0x30(ix), a
       movb a,@>30(ix)
;RAM:D160 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function lose_life
*
* =============== S U B R O U T I N E =======================================
*
init_start_location:
       mov  r11,*sp+
;RAM:D1B1 21 A1 D1                    ld      hl, #plyr_spr_init_data
       li   hl,plyr_spr_init_data
;RAM:D1B4 11 61 D1                    ld      de, #plyr_spr_1_scratchpad
       li   de,plyr_spr_1_scratchpad
;RAM:D1B7 01 08 00                    ld      bc, #8
       li   bc,8
;RAM:D1BA ED B0                       ldir
       bl   @ldir
;RAM:D1BC 11 81 D1                    ld      de, #plyr_spr_2_scratchpad
       li   de,plyr_spr_2_scratchpad
;RAM:D1BF 01 08 00                    ld      bc, #8
       li   bc,8
;RAM:D1C2 ED B0                       ldir
       bl   @ldir
;RAM:D1C4 3E 12                       ld      a, #18                                  ; graphic_no (player top half)
;RAM:D1C6 32 71 D1                    ld      (byte_D171), a                          ; plyr_spr_1_scratchpad (byte 16)
       movb @b12h,@byte_D171
;RAM:D1C9 3E 22                       ld      a, #34                                  ; graphic_no (player bottom half)
;RAM:D1CB 32 91 D1                    ld      (byte_D191), a                          ; plyr_spr_2_scratchpad (byte 16)
       movb @b22h,@byte_D191
;RAM:D1CE 3A A0 5B                    ld      a, (seed_1)
       movb @seed_1,a
;RAM:D1D1 E6 03                       and     #3                                      ; random 0-3
       andi a,>0300
;RAM:D1D3 6F                          ld      l, a
       movb a,@l
;RAM:D1D4 26 00                       ld      h, #0
       szcb mone,h
;RAM:D1D6 01 E2 D1                    ld      bc, #start_locations
       li   bc,start_locations
;RAM:D1D9 09                          add     hl, bc                                  ; offset to random entry
       a    bc,hl
;RAM:D1DA 7E                          ld      a, (hl)                                 ; start location
       movb *hl,a
;RAM:D1DB 32 69 D1                    ld      (start_loc_1), a
       movb a,@start_loc_1
;RAM:D1DE 32 89 D1                    ld      (start_loc_2), a
       movb a,@start_loc_2
;RAM:D1E1 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
plyr_spr_init_data:
       byte >78, >80, >80, >80, >05, >05, >17, >1C
       byte >78, >80, >80, >8C, >05, >05, >00, >1E
* ---------------------------------------------------------------------------
start_locations:
;       byte >2F, >44, >B3, >8F         ; Standard
       byte >b3,>b3,>b3,>b3
;       byte >8a,>8a,>8a,>8a            ; Near cauldron room
;       byte >87,>87,>87,>87            ; Portcullis room
* ---------------------------------------------------------------------------
*
* End of function init_start_location
*
* =============== S U B R O U T I N E =======================================
*
build_screen_objects:
       mov  r11,*sp+
;RAM:D1E6 3A B2 5B                    ld      a, (not_1st_screen)
       movb @not_1st_screen,a
;RAM:D1E9 A7                          and     a                                       ; 1st screen of the game?
;RAM:D1EA 28 03                       jr      Z, loc_D1EF                             ; yes, skip updating special objects
       jeq  loc_D1EF
;RAM:D1EC CD 91 C5                    call    update_special_objs                     ; save state in special_objs_tbl
       bl   @update_special_objs
loc_D1EF:
;RAM:D1EF CD 67 D5                    call    clear_scrn_buffer
       bl   @clear_scrn_buffer
;RAM:D1F2 CD C6 D3                    call    retrieve_screen
       bl   @retrieve_screen
;RAM:D1F5 CD 25 C5                    call    find_special_objs_here                  ; find special objects in new room
       bl   @find_special_objs_here
;RAM:D1F8 CD 20 D3                    call    adjust_plyr_xyz_for_room_size
       bl   @adjust_plyr_xyz_for_room_size
;RAM:D1FB AF                          xor     a
       clr  a
;RAM:D1FC 32 AF 5B                    ld      (portcullis_moving), a                  ; flag not moving
       movb a,@portcullis_moving
;RAM:D1FF 32 B0 5B                    ld      (portcullis_move_cnt), a
       movb a,@portcullis_move_cnt
;RAM:D202 32 BD 5B                    ld      (ball_bounce_height), a
       movb a,@ball_bounce_height
;RAM:D205 32 BF 5B                    ld      (is_spike_ball_dropping), a
       movb a,@is_spike_ball_dropping
;RAM:D208 3E 01                       ld      a, #1                                   ; flag rendering of status information
       movb one,a
;RAM:D20A 32 B7 5B                    ld      (render_status_info), a
       movb a,@render_status_info
;RAM:D20D 3A 10 5C                    ld      a, (graphic_objs_tbl+8)                 ; plyr_spr_1 screen
       movb @graphic_objs_tbl+8,a
;RAM:D210 E6 01                       and     #1
       andi a,>0100
;RAM:D212 32 C0 5B                    ld      (disable_spike_ball_drop), a
       movb a,@disable_spike_ball_drop
;RAM:D215 CD 19 D2                    call    flag_room_visited
       bl   @flag_room_visited
;RAM:D218 C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function build_screen_objects
*
* ---------------------------------------------------------------------------
*
* Set bit n of the scrn_visited table
*
flag_room_visited:
;RAM:D219 3A 10 5C                    ld      a, (graphic_objs_tbl+8)                 ; plyr_spr_1_screen
       clr  tmp0
       movb @graphic_objs_tbl+8,@r0lb
       mov  tmp0,tmp1
       li   a,>8000
       andi tmp0,>0007
       jeq  !
       srl  a,0
!      srl  tmp1,3
       socb a,@scrn_visited(tmp1)
;RAM:D21C 4F                          ld      c, a
;RAM:D21D 0F                          rrca
;RAM:D21E 0F                          rrca
;RAM:D21F 0F                          rrca
;RAM:D220 E6 1F                       and     #0x1F                                   ; /8 (byte offset)
;RAM:D222 6F                          ld      l, a
;RAM:D223 26 00                       ld      h, #0
;RAM:D225 79                          ld      a, c
;RAM:D226 07                          rlca
;RAM:D227 07                          rlca
;RAM:D228 07                          rlca
;RAM:D229 E6 38                       and     #0x38 ; '8'
;RAM:D22B F6 C6                       or      #0xC6 ; '�'                             ; SET 0,(HL)
;RAM:D22D 32 35 D2                    ld      (byte_D235), a                          ; self-modifying code
;RAM:D230 01 E8 5B                    ld      bc, #scrn_visited
;RAM:D233 09                          add     hl, bc                                  ; offset to room flag
;RAM:D233             ; ---------------------------------------------------------------------------
;RAM:D234 CB                          .db 0xCB ; �                                    ; SET n,(HL)
;RAM:D235 C6          byte_D235:      .db 0xC6                                        ; flag as visited?
;RAM:D236             ; ---------------------------------------------------------------------------
;RAM:D236 C9                          ret
       rt
* =============== S U B R O U T I N E =======================================
*
adjust_plyr_xyz_for_room_size:
       mov  r11,*sp+
;RAM:D320 3A AB 5B                    ld      a, (room_size_X)
       movb  @room_size_X,a
;RAM:D323 D6 02                       sub     #2
       sb   @b02h,a
;RAM:D325 6F                          ld      l, a
       movb a,@l
;RAM:D326 3A AC 5B                    ld      a, (room_size_Y)
       movb  @room_size_Y,a
;RAM:D329 D6 02                       sub     #2
       sb   @b02h,a
;RAM:D32B 67                          ld      h, a
       movb a,h
;RAM:D32C DD 7E 01                    ld      a, 1(ix)                                ; X
       movb @1(ix),a
;RAM:D32F A7                          and     a                                       ; 0?
;RAM:D330 28 4D                       jr      Z, enter_arch_e                         ; yes, go
       jeq  enter_arch_e
;RAM:D332 3C                          inc     a                                       ; -1?
       ab   one,a
;RAM:D333 28 3A                       jr      Z, enter_arch_w                         ; yes, go
       jeq  enter_arch_w
;RAM:D335 DD 7E 02                    ld      a, 2(ix)                                ; Y
       movb  @2(ix),a
;RAM:D338 A7                          and     a                                       ; 0?
;RAM:D339 28 27                       jr      Z, enter_arch_n                         ; yes, go
       jeq  enter_arch_n
;RAM:D33B 3C                          inc     a                                       ; -1?
       ab   one,a
;RAM:D33C 28 01                       jr      Z, enter_arch_s                         ; yes, go
       jeq  enter_arch_s
;RAM:D33E C9                          ret
       rt
* ---------------------------------------------------------------------------
enter_arch_s:
;RAM:D33F 0E C8                       ld      c, #200
       movb @bc8h,@c
;RAM:D341 CD 8C D3                    call    adjust_plyr_Z_for_arch
       bl   @adjust_plyr_Z_for_arch
;RAM:D344 3E 80                       ld      a, #128                                 ; 128
       movb @b80h,a
;RAM:D346 94                          sub     h                                       ; sub (room_size_Y-2)
       sb   h,a
;RAM:D347 DD 96 05                    sub     5(ix)                                   ; sub depth
       sb   @5(ix),a
adjust_plyr_y:
;RAM:D34A DD 77 02                    ld      2(ix), a                                ; plyr_spr_1 Y
       movb a,@2(ix)
copy_spr_1_xy_2:
;RAM:D34D DD CB 07 E6                 set     4, 7(ix)                                ; set draw plyr_spr_1
       socb @b10h,@7(ix)
;RAM:D351 DD CB 27 E6                 set     4, 0x27(ix)                             ; set draw_plyr_spr_2
       socb @b10h,@>27(ix)
;RAM:D355 DD 7E 01                    ld      a, 1(ix)                                ; plyr_spr_1 X
;RAM:D358 DD 77 21                    ld      0x21(ix), a                             ; set plyr_spr_2 X
       movb @1(ix),@>21(ix)
;RAM:D35B DD 7E 02                    ld      a, 2(ix)                                ; plyr_spr_1 Y
;RAM:D35E DD 77 22                    ld      0x22(ix), a                             ; set plyr_spr_2 Y
       movb @2(ix),@>22(ix)
;RAM:D361 C9                          ret
       dect sp
       mov  *sp,r11
       rt
* ---------------------------------------------------------------------------
enter_arch_n:
;RAM:D362 0E 51                       ld      c, #81
       movb @b51h,@c
;RAM:D364 CD 8C D3                    call    adjust_plyr_Z_for_arch
       bl   @adjust_plyr_Z_for_arch
;RAM:D367 7C                          ld      a, h                                    ; room_size_Y-2
       movb h,a
;RAM:D368 C6 80                       add     a, #128
       ab   @b80h,a
;RAM:D36A DD 86 05                    add     a, 5(ix)                                ; add depth
       ab   @5(ix),a
;RAM:D36D 18 DB                       jr      adjust_plyr_y
       jmp  adjust_plyr_y
* ---------------------------------------------------------------------------
enter_arch_w:
;RAM:D36F 0E AE                       ld      c, #174
       movb @baeh,@c
;RAM:D371 CD 8C D3                    call    adjust_plyr_Z_for_arch
       bl   @adjust_plyr_Z_for_arch
;RAM:D374 3E 80                       ld      a, #128
       movb @b80h,a
;RAM:D376 95                          sub     l                                       ; sub (room_size_X-2)
       sb   @l,a
;RAM:D377 DD 96 04                    sub     4(ix)                                   ; sub width
       sb   @4(ix),a
adjust_plyr_x:
;RAM:D37A DD 77 01                    ld      1(ix), a
       movb a,@1(ix)
;RAM:D37D 18 CE                       jr      copy_spr_1_xy_2
       jmp  copy_spr_1_xy_2
* ---------------------------------------------------------------------------
enter_arch_e:
;RAM:D37F 0E 37                       ld      c, #55
       movb @b37h,@c
;RAM:D381 CD 8C D3                    call    adjust_plyr_Z_for_arch
       bl   @adjust_plyr_Z_for_arch
;RAM:D384 7D                          ld      a, l                                    ; room_size_X-2
       movb @l,a
;RAM:D385 C6 80                       add     a, #128                                 ; add 128
       ab   @b80h,a
;RAM:D387 DD 86 04                    add     a, 4(ix)                                ; add width
       ab   @4(ix),a
;RAM:D38A 18 EE                       jr      adjust_plyr_x
       jmp  adjust_plyr_x
*
* End of function adjust_plyr_xyz_for_room_size
*
* =============== S U B R O U T I N E =======================================
*
adjust_plyr_Z_for_arch:
;RAM:D38C FD 21 88 5C                 ld      iy, #other_objs_here
       li   iy,other_objs_here
;RAM:D390 11 40 00                    ld      de, #0x40 ; '@'                         ; 2 object entries
       li   de,>0040
;RAM:D393 06 04                       ld      b, #4                                   ; max 4 arches/location
       movb @b04h,b
loc_D395:
;RAM:D395 FD 7E 00                    ld      a, 0(iy)                                ; graphic no.
       movb *iy,a
;RAM:D398 FE 06                       cp      #6                                      ; arch?
       cb   a,@b06h
;RAM:D39A D0                          ret     NC                                      ; no, return
       jl   !
       rt
;RAM:D39B FD 7E 01                    ld      a, 1(iy)                                ; X
!      movb @1(iy),a
;RAM:D39E FD 86 02                    add     a, 2(iy)                                ; (X+Y)=pixelY
       ab   @2(iy),a
;RAM:D3A1 B9                          cp      c                                       ; match?
       cb   a,@c
;RAM:D3A2 28 05                       jr      Z, adj_plyr_Z                           ; yes, adjust player
       jeq  adj_plyr_Z
;RAM:D3A4 FD 19                       add     iy, de                                  ; next object sprite pair
       a    de,iy
;RAM:D3A6 10 ED                       djnz    loc_D395                                ; loop through all arches
       sb   one,b
       jne  loc_D395
;RAM:D3A8 C9                          ret
       rt
* ---------------------------------------------------------------------------
adj_plyr_Z:
;RAM:D3A9 FD 7E 03                    ld      a, 3(iy)                                ; arch Z
       movb @3(iy),a
;RAM:D3AC DD 77 03                    ld      3(ix), a                                ; set player_sprite_1 Z
       movb a,@3(ix)
;RAM:D3AF C6 0C                       add     a, #12
       ab   @b0ch,a
;RAM:D3B1 DD 77 23                    ld      0x23(ix), a                             ; set player_sprite_2 Z
       movb a,@>23(ix)
;RAM:D3B4 C9                          ret
       rt
*
* End of function adjust_plyr_Z_for_arch
*
* =============== S U B R O U T I N E =======================================
*
get_ptr_object:
;RAM:D3B5 C5                          push    bc
;RAM:D3B6 E6 7F                       and     #0x7F ; ''
       andi a,>7f00
;RAM:D3B8 6F                          ld      l, a
;RAM:D3B9 26 00                       ld      h, #0                                   ; HL=A
       clr  hl
       movb a,@l
;RAM:D3BB 29                          add     hl, hl                                  ; x2
;RAM:D3BC 29                          add     hl, hl                                  ; x4
;RAM:D3BD 29                          add     hl, hl                                  ; x8
;RAM:D3BE 29                          add     hl, hl                                  ; x16
;RAM:D3BF 29                          add     hl, hl                                  ; x32
       sla  hl,5
;RAM:D3C0 01 08 5C                    ld      bc, #graphic_objs_tbl                   ; base of graphical object table
;RAM:D3C3 09                          add     hl, bc                                  ; get table entry
       ai   hl,graphic_objs_tbl
;RAM:D3C4 C1                          pop     bc
;RAM:D3C5 C9                          ret
       rt
*
* End of function get_ptr_object
*
* =============== S U B R O U T I N E =======================================
*
* Retrieves graphics objects to render screen
* - background object sprites, then
* - foreground object sprites
* Populates graphics_object_tbl
*
* IX=player object
*
retrieve_screen:
       mov  r11,*sp+
;RAM:D3C6 11 88 5C                    ld      de, #other_objs_here
       li   de,other_objs_here
;RAM:D3C9 01 D1 6B                    ld      bc, #block_type_tbl                     ; end of location table
       li   bc,block_type_tbl
;RAM:D3CC 21 51 62                    ld      hl, #location_tbl
       li   hl,location_tbl
find_screen:                                                                          ; get location ID
;RAM:D3CF 7E                          ld      a, (hl)
;RAM:D3D0 23                          inc     hl
       movb *hl+,a
;RAM:D3D1 DD BE 08                    cp      8(ix)                                   ; same as player (current) screen?
       cb   a,@8(ix)
;RAM:D3D4 28 1A                       jr      Z, found_screen                         ; yes, exit
       jeq  found_screen
;RAM:D3D6 7E                          ld      a, (hl)                                 ; get entry size
       movb *hl,a
;RAM:D3D7 CD F2 D4                    call    add_HL_A                                ; ptr next entry
       bl   @add_HL_A
;RAM:D3DA A7                          and     a
*      Clear carry flag
;RAM:D3DB ED 42                       sbc     hl, bc                                  ; end of location table?
       c    hl,bc
;RAM:D3DD 30 03                       jr      NC, zero_end_of_graphic_objs_tbl        ; yes, exit
       jhe  zero_end_of_graphic_objs_tbl
;RAM:D3DF 09                          add     hl, bc
;RAM:D3E0 18 ED                       jr      find_screen                             ; loop
       jmp  find_screen
;RAM:D3E2             ; ---------------------------------------------------------------------------
;RAM:D3E2
zero_end_of_graphic_objs_tbl:
;RAM:D3E2 21 08 61                    ld      hl, #font                               ; start of program data
       li   hl,graphic_objs_tbl_end
;RAM:D3E5 A7                          and     a
*      Clear carry flag
;RAM:D3E6 ED 52                       sbc     hl, de                                  ; done?
       s    de,hl
;RAM:D3E8 C8                          ret     Z                                       ; yes, exit
       jne  !
       dect sp
       mov  *sp,r11
       rt
;RAM:D3E9 06 20                       ld      b, #32                                  ; 32 bytes to clear
!      movb @b20h,b
;RAM:D3EB CD 08 D5                    call    zero_DE
       bl   @zero_DE
;RAM:D3EE 18 F2                       jr      zero_end_of_graphic_objs_tbl
       jmp  zero_end_of_graphic_objs_tbl
*
* ---------------------------------------------------------------------------
*
found_screen:
;RAM:D3F0 46                          ld      b, (hl)                                 ; get entry size
;RAM:D3F1 23                          inc     hl
       movb *hl+,b
;RAM:D3F2 7E                          ld      a, (hl)                                 ; get attributes
       movb *hl,a
;RAM:D3F3 E6 07                       and     #7                                      ; mask off unused bits
       andi a,>0700
;RAM:D3F5 F6 40                       or      #0x40 ; '@'                             ; bright ON
       ori  a,>4000
;RAM:D3F7 32 AD 5B                    ld      (curr_room_attrib), a                   ; store
       movb a,@curr_room_attrib
;RAM:D3FA D5                          push    de
       mov  de,*sp+
;RAM:D3FB EB                          ex      de, hl                                  ; DE=attributes
       bl   @ex_de_hl
;RAM:D3FC 1A                          ld      a, (de)                                 ; get attributes
;RAM:D3FD 13                          inc     de                                      ; ptr background type
       movb *de+,a
;RAM:D3FE 0F                          rrca
;RAM:D3FF 0F                          rrca
;RAM:D400 0F                          rrca
       srl  a,3
;RAM:D401 E6 1F                       and     #0x1F                                   ; get room size
       andi a,>1f00
;RAM:D403 4F                          ld      c, a                                    ; C=room size
       movb a,@c
;RAM:D404 87                          add     a, a
       ab   a,a
;RAM:D405 81                          add     a, c                                    ; A=room size x3
       ab   @c,a
;RAM:D406 21 48 62                    ld      hl, #room_size_tbl
       li   hl,room_size_tbl
;RAM:D409 CD F2 D4                    call    add_HL_A                                ; ptr entry
       bl   @add_HL_A
;RAM:D40C 7E                          ld      a, (hl)                                 ; room size X
;RAM:D40D 23                          inc     hl
;RAM:D40E 32 AB 5B                    ld      (room_size_X), a
       movb *hl+,@room_size_X
;RAM:D411 7E                          ld      a, (hl)                                 ; room size Y
;RAM:D412 23                          inc     hl
;RAM:D413 32 AC 5B                    ld      (room_size_Y), a
       movb *hl+,@room_size_Y
;RAM:D416 7E                          ld      a, (hl)                                 ; room size Z
;RAM:D417 32 AE 5B                    ld      (room_size_Z), a
       movb *hl,@room_size_Z
;RAM:D41A 05                          dec     b
;RAM:D41B 05                          dec     b                                       ; adjust entry size
       sb   @b02h,b
;RAM:D41C EB                          ex      de, hl
       mov  de,hl
;RAM:D41D D1                          pop     de
       dect sp
       mov  *sp,de
next_bg_obj:
;RAM:D41E 7E                          ld      a, (hl)                                 ; get background type
;RAM:D41F 23                          inc     hl                                      ; next entry
       movb *hl+,a
;RAM:D420 FE FF                       cp      #0xFF                                   ; done all background types?
       cb   a,mone
;RAM:D422 28 28                       jr      Z, find_fg_objs                         ; yes, exit
       jeq  find_fg_objs
;RAM:D424 C5                          push    bc
       mov  bc,*sp+
;RAM:D425 E5                          push    hl
       mov  hl,*sp+
;RAM:D426 6F                          ld      l, a
;RAM:D427 26 00                       ld      h, #0
       clr  hl
       movb a,@l
;RAM:D429 29                          add     hl, hl                                  ; word offset
       a    hl,hl
;RAM:D42A 01 E2 6C                    ld      bc, #background_type_tbl
       li   bc,background_type_tbl
;RAM:D42D 09                          add     hl, bc                                  ; ptr entry
       a    bc,hl
;RAM:D42E 7E                          ld      a, (hl)                                 ; little endian!
;RAM:D42F 23                          inc     hl
;RAM:D430 66                          ld      h, (hl)
;RAM:D431 6F                          ld      l, a                                    ; HL=ptr to background object
       mov  *hl,hl
next_bg_obj_sprite:                                                                   ; 8 bytes/entry
;RAM:D432 01 08 00                    ld      bc, #8
       li   bc,8
;RAM:D435 ED B0                       ldir                                            ; copy to graphic_object_tbl
       bl   @ldir
;RAM:D437 DD 7E 08                    ld      a, 8(ix)                                ; player (current) screen
       movb @8(ix),a
;RAM:D43A 12                          ld      (de), a                                 ; store
;RAM:D43B 13                          inc     de
       movb a,*de+
;RAM:D43C 06 17                       ld      b, #23
       li   b,>1700
;RAM:D43E CD 08 D5                    call    zero_DE                                 ; 8+1+23 = 32 bytes/entry
       bl   @zero_DE
;RAM:D441 7E                          ld      a, (hl)
       movb *hl,a
;RAM:D442 A7                          and     a                                       ; done object?
;RAM:D443 20 ED                       jr      NZ, next_bg_obj_sprite                  ; no, loop
       jne  next_bg_obj_sprite
;RAM:D445 E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:D446 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:D447 10 D5                       djnz    next_bg_obj                             ; done location? no, loop
       sb   one,b
       jne  next_bg_obj
;RAM:D449 C3 E2 D3                    jp      zero_end_of_graphic_objs_tbl
       b    @zero_end_of_graphic_objs_tbl
*
* ---------------------------------------------------------------------------
*
find_fg_objs:                                                                         ; adjust bytes remaining
;RAM:D44C 05                          dec     b
       sb    one,b
;RAM:D44D FD E5                       push    iy
       mov  iy,*sp+
;RAM:D44F D5                          push    de                                      ; graphic object table
;RAM:D450 FD E1                       pop     iy                                      ; IY = graphic object table
       mov  de,iy
next_fg_obj:
;RAM:D452 7E                          ld      a, (hl)                                 ; block/count
       movb *hl,a
;RAM:D453 E6 07                       and     #7                                      ; count
       andi a,>0700
;RAM:D455 3C                          inc     a                                       ; adjust to 1-8
       ab   one,a
;RAM:D456 4F                          ld      c, a                                    ; C = count
       movb a,@c
;RAM:D457 7E                          ld      a, (hl)                                 ; block/count
;RAM:D458 23                          inc     hl
       movb *hl+,a
;RAM:D459 05                          dec     b                                       ; adjust bytes remaining
       sb    one,b
;RAM:D45A 56                          ld      d, (hl)                                 ; location (x/y/z)
;RAM:D45B 23                          inc     hl
       movb *hl+,d
;RAM:D45C E5                          push    hl
       mov  hl,*sp+
;RAM:D45D 0F                          rrca
;RAM:D45E 0F                          rrca
       srl  a,2
;RAM:D45F E6 3E                       and     #0x3E ; '>'                             ; block x2
       andi a,>3E00
;RAM:D461 21 D1 6B                    ld      hl, #block_type_tbl
       li   hl,block_type_tbl
;RAM:D464 CD F2 D4                    call    add_HL_A                                ; ptr entry
       bl   @add_HL_A
;RAM:D467 7E                          ld      a, (hl)                                 ; little endian!
;RAM:D468 23                          inc     hl
;RAM:D469 66                          ld      h, (hl)
;RAM:D46A 6F                          ld      l, a                                    ; HL=ptr object
       mov  *hl,hl
next_fg_obj_in_count:
;RAM:D46B E5                          push    hl
       mov  hl,*sp+
next_fg_obj_sprite:                                                                   ; sprite
;RAM:D46C 7E                          ld      a, (hl)
;RAM:D46D 23                          inc     hl
;RAM:D46E FD 77 00                    ld      0(iy), a
       movb *hl+,*iy
;RAM:D471 7E                          ld      a, (hl)                                 ; width
;RAM:D472 23                          inc     hl
;RAM:D473 FD 77 04                    ld      4(iy), a
       movb *hl+,@4(iy)
;RAM:D476 7E                          ld      a, (hl)                                 ; depth
;RAM:D477 23                          inc     hl
;RAM:D478 FD 77 05                    ld      5(iy), a
       movb *hl+,@5(iy)
;RAM:D47B 7E                          ld      a, (hl)                                 ; height
;RAM:D47C 23                          inc     hl
;RAM:D47D FD 77 06                    ld      6(iy), a
       movb *hl+,@6(iy)
;RAM:D480 7E                          ld      a, (hl)                                 ; flags
;RAM:D481 23                          inc     hl
;RAM:D482 FD 77 07                    ld      7(iy), a
       movb *hl+,@7(iy)
;RAM:D485 DD 7E 08                    ld      a, 8(ix)
;RAM:D488 FD 77 08                    ld      8(iy), a
       movb @8(ix),@8(iy)
;RAM:D48B 7E                          ld      a, (hl)                                 ; offsets
       movb *hl,a
;RAM:D48C 07                          rlca
;RAM:D48D 07                          rlca
;RAM:D48E 07                          rlca
       sla  a,3
;RAM:D48F E6 08                       and     #8                                      ; x1 in bit3
       andi a,>0800
;RAM:D491 5F                          ld      e, a                                    ; E=x1*8
       movb a,@e
;RAM:D492 7A                          ld      a, d                                    ; location (x/y/z)
       movb d,a
;RAM:D493 07                          rlca
;RAM:D494 07                          rlca
;RAM:D495 07                          rlca
;RAM:D496 07                          rlca
       sla  a,4
;RAM:D497 E6 70                       and     #0x70 ; 'p'                             ; x*16
       andi a,>7000
;RAM:D499 83                          add     a, e                                    ; x*16+x1*8
       ab   @e,a
;RAM:D49A C6 48                       add     a, #72                                  ; x*16+x1*8+72
       ai   a,>4800
;RAM:D49C FD 77 01                    ld      1(iy), a                                ; store X
       movb a,@1(iy)
;RAM:D49F 7E                          ld      a, (hl)                                 ; offsets
       movb *hl,a
;RAM:D4A0 07                          rlca
;RAM:D4A1 07                          rlca
       sla  a,2
;RAM:D4A2 E6 08                       and     #8                                      ; y1 in bit3
       andi a,>0800
;RAM:D4A4 5F                          ld      e, a                                    ; E=y1*8
       movb a,@e
;RAM:D4A5 7A                          ld      a, d                                    ; location (x/y/z)
       movb d,a
;RAM:D4A6 07                          rlca
       sla  a,1
;RAM:D4A7 E6 70                       and     #0x70 ; 'p'                             ; Y*16
       andi a,>7000
;RAM:D4A9 83                          add     a, e                                    ; Y*16+Y1*8
       ab   @e,a
;RAM:D4AA C6 48                       add     a, #72                                  ; Y*16+Y1*8+72
       ai   a,>4800
;RAM:D4AC FD 77 02                    ld      2(iy), a                                ; store Y
       movb a,@2(iy)
;RAM:D4AF 7A                          ld      a, d                                    ; location (x/y/z)
       movb d,a
;RAM:D4B0 07                          rlca
;RAM:D4B1 07                          rlca
;RAM:D4B2 E6 03                       and     #3                                      ; z
;RAM:D4B4 87                          add     a, a
;RAM:D4B5 87                          add     a, a                                    ; z*4
       andi a,>c000
       srl  a,4
;RAM:D4B6 5F                          ld      e, a
       movb a,@e
;RAM:D4B7 87                          add     a, a                                    ; z*8
       ab   a,a
;RAM:D4B8 83                          add     a, e                                    ; z*12
       ab   @e,a
;RAM:D4B9 86                          add     a, (hl)                                 ; z*12+z1*4+rubbish
;RAM:D4BA 23                          inc     hl
       ab   *hl+,a
;RAM:D4BB E6 FC                       and     #0xFC ; '�'                             ; mask off rubbish bits
       andi a,>fc00
;RAM:D4BD 5F                          ld      e, a
       movb a,@e
;RAM:D4BE 3A AE 5B                    ld      a, (room_size_Z)
       movb @room_size_Z,a
;RAM:D4C1 83                          add     a, e                                    ; z*12+z1*4+room_size_Z
       ab   @e,a
;RAM:D4C2 FD 77 03                    ld      3(iy), a                                ; store Z
       movb a,@3(iy)
;RAM:D4C5 C5                          push    bc
       mov  bc,*sp+
;RAM:D4C6 01 09 00                    ld      bc, #9
       li   bc,9
;RAM:D4C9 FD 09                       add     iy, bc
       a    bc,iy
;RAM:D4CB 06 17                       ld      b, #23                                  ; 9+23=32 bytes/entry
       movb @b17h,b
loc_D4CD:
;RAM:D4CD FD 36 00 00                 ld      0(iy), #0                               ; zero byte
;RAM:D4D1 FD 23                       inc     iy
       szcb mone,*iy+
;RAM:D4D3 10 F8                       djnz    loc_D4CD
       sb   one,b
       jne  loc_D4CD
;RAM:D4D5 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:D4D6 7E                          ld      a, (hl)                                 ; next entry
       movb *hl,a
;RAM:D4D7 A7                          and     a                                       ; done?
;RAM:D4D8 20 92                       jr      NZ, next_fg_obj_sprite                  ; no, loop
       jne  next_fg_obj_sprite
;RAM:D4DA D1                          pop     de
       dect sp
       mov  *sp,de
;RAM:D4DB E1                          pop     hl
       dect sp
       mov  *sp,hl
;RAM:D4DC 05                          dec     b
       sb   one,b
;RAM:D4DD 28 0B                       jr      Z, loc_D4EA
       jeq  loc_D4EA
;RAM:D4DF 0D                          dec     c                                       ; done count blocks?
       sb   one,@c
;RAM:D4E0 CA 52 D4                    jp      Z, next_fg_obj                          ; yes, exit loop
       jeq  next_fg_obj
;RAM:D4E3 7E                          ld      a, (hl)
;RAM:D4E4 23                          inc     hl
       movb *hl+,a
;RAM:D4E5 E5                          push    hl
       mov  hl,*sp+
;RAM:D4E6 EB                          ex      de, hl
       bl   @ex_de_hl
;RAM:D4E7 57                          ld      d, a
       movb a,d
;RAM:D4E8 18 81                       jr      next_fg_obj_in_count
       jmp  next_fg_obj_in_count
* ---------------------------------------------------------------------------
loc_D4EA:
;RAM:D4EA FD E5                       push    iy
;RAM:D4EC D1                          pop     de
       mov  iy,de
;RAM:D4ED FD E1                       pop     iy
       dect sp
       mov  *sp,iy
;RAM:D4EF C3 E2 D3                    jp      zero_end_of_graphic_objs_tbl
       b    @zero_end_of_graphic_objs_tbl
*
* End of function retrieve_screen
*
* =============== S U B R O U T I N E =======================================
*
render_dynamic_objects:
       mov  r11,*sp+
;RAM:D59F AF                          xor     a
;RAM:D5A0 32 A8 5B                    ld      (objs_wiped_cnt), a                     ; zero count of wiped objects
       szcb mone,@objs_wiped_cnt
;RAM:D5A3 DD E5                       push    ix
       mov  ix,*sp+
;RAM:D5A5 3A B7 5B                    ld      a, (render_status_info)
       movb @render_status_info,a
;RAM:D5A8 A7                          and     a                                       ; initial rendering?
;RAM:D5A9 C2 53 D6                    jp      NZ, loc_D653                            ; yes, no need to wipe anything
       jeq  !
       b    @loc_D653
;RAM:D5AC 21 8B CE                    ld      hl, #objects_to_draw
!      li   hl,objects_to_draw
;RAM:D5AF 22 CB 5B                    ld      (tmp_objects_to_draw), hl               ; temp storage
       mov  hl,@tmp_objects_to_draw
wipe_next_object:
;RAM:D5B2 2A CB 5B                    ld      hl, (tmp_objects_to_draw)
       mov  @tmp_objects_to_draw,hl
;RAM:D5B5 7E                          ld      a, (hl)                                 ; object index
;RAM:D5B6 23                          inc     hl                                      ; next list entry
       movb *hl+,a
;RAM:D5B7 22 CB 5B                    ld      (tmp_objects_to_draw), hl               ; store
       mov  hl,@tmp_objects_to_draw
;RAM:D5BA FE FF                       cp      #0xFF                                   ; end of list?
       cb   a,mone
;RAM:D5BC CA 53 D6                    jp      Z, loc_D653                             ; yes, skip
       jeq  loc_D653
;RAM:D5BF CD B5 D3                    call    get_ptr_object
       bl   @get_ptr_object
;RAM:D5C2 E5                          push    hl
;RAM:D5C3 DD E1                       pop     ix
       mov  hl,ix
;RAM:D5C5 DD CB 07 6E                 bit     5, 7(ix)                                ; wipe flag?
       movb @7(ix),tmp0
       andi tmp0,>2000
;RAM:D5C9 28 E7                       jr      Z, wipe_next_object                     ; no, go
       jeq  wipe_next_object
;RAM:D5CB DD CB 07 AE                 res     5, 7(ix)                                ; clear wipe flag
       szcb @b20h,@7(ix)
;RAM:D5CF DD 7E 1A                    ld      a, 26(ix)                               ; pixel X
       movb @26(ix),a
;RAM:D5D2 DD 96 1E                    sub     30(ix)                                  ; old pixel X
       cb   a,@30(ix)
;RAM:D5D5 DA 49 D6                    jp      C, loc_D649
       jl loc_D649                   ; TODO: test if this works
;RAM:D5D8 DD 4E 1E                    ld      c, 30(ix)                               ; old pixel X
       movb @30(ix),@c
loc_D5DB:
;RAM:D5DB DD 7E 1E                    ld      a, 30(ix)                               ; old pixel X
       movb @30(ix),a
;RAM:D5DE 0F                          rrca
;RAM:D5DF 0F                          rrca
;RAM:D5E0 0F                          rrca
       srl  a,3
;RAM:D5E1 E6 1F                       and     #0x1F                                   ; old pixel X byte address
       andi a,>1f00
;RAM:D5E3 DD 86 1C                    add     a, 28(ix)                               ; old data width (bytes)
       ab   @28(ix),a
;RAM:D5E6 5F                          ld      e, a
       movb a,@e
;RAM:D5E7 DD 7E 1A                    ld      a, 26(ix)                               ; pixel X
       movb @26(ix),a
;RAM:D5EA 0F                          rrca
;RAM:D5EB 0F                          rrca
;RAM:D5EC 0F                          rrca
       srl  a,3
;RAM:D5ED E6 1F                       and     #0x1F                                   ; pixel X byte address
       andi a,>1f00
;RAM:D5EF DD 86 18                    add     a, 24(ix)                               ; data width (bytes)
       ab   @24(ix),a
;RAM:D5F2 BB                          cp      e
       cb   a,@e
;RAM:D5F3 38 01                       jr      C, loc_D5F6
       jl   loc_D5F6                  ; TODO: test if this works
;RAM:D5F5 5F                          ld      e, a
       movb a,@e
loc_D5F6:
;RAM:D5F6 79                          ld      a, c
       movb @c,a
;RAM:D5F7 0F                          rrca
;RAM:D5F8 0F                          rrca
;RAM:D5F9 0F                          rrca
       srl  a,3
;RAM:D5FA E6 1F                       and     #0x1F                                   ; old/pixel X byte address
       andi a,>1f00
;RAM:D5FC 47                          ld      b, a
       movb a,b
;RAM:D5FD 7B                          ld      a, e
       movb @e,a
;RAM:D5FE 90                          sub     b
       sb   b,a
;RAM:D5FF 67                          ld      h, a                                    ; H=number of bytes to wipe
       movb a,h
;RAM:D600 DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
       movb @27(ix),a
;RAM:D603 DD 96 1F                    sub     31(ix)                                  ; pixel Y < old pixel Y?
       cb   a,@31(ix)
;RAM:D606 38 46                       jr      C, loc_D64E                             ; yes, go
       jl   loc_D64E                  ; TODO: test if this works
;RAM:D608 DD 46 1F                    ld      b, 31(ix)                               ; old pixel Y
       movb @31(ix),b
loc_D60B:
;RAM:D60B DD 7E 1F                    ld      a, 31(ix)                               ; old pixel Y
       movb @31(ix),a
;RAM:D60E DD 86 1D                    add     a, 29(ix)                               ; old data height (lines)
       ab   @29(ix),a
;RAM:D611 5F                          ld      e, a
       movb a,@e
;RAM:D612 DD 7E 1B                    ld      a, 27(ix)                               ; pixel Y
       movb @27(ix),a
;RAM:D615 DD 86 19                    add     a, 25(ix)                               ; data height (lines)
       ab   @25(ix),a
;RAM:D618 BB                          cp      e
       cb   a,@e
;RAM:D619 30 01                       jr      NC, loc_D61C
       jhe  loc_D61C                   ; TODO: test if this works
;RAM:D61B 7B                          ld      a, e
       movb @e,a
loc_D61C:
;RAM:D61C 90                          sub     b
       sb   b,a
;RAM:D61D 6F                          ld      l, a
       movb a,@l
;RAM:D61E 78                          ld      a, b
       movb b,a
;RAM:D61F FE C0                       cp      #192                                    ; off bottom of screen?
       cb   a,@bc0h
;RAM:D621 30 8F                       jr      NC, wipe_next_object                    ; yes, go
       jhe  wipe_next_object          ; TODO: test if this works
;RAM:D623 85                          add     a, l
       ab   @l,a
;RAM:D624 D6 C0                       sub     #192
       cb   a,@bc0h
;RAM:D626 38 04                       jr      C, loc_D62C
       jl   loc_D62C                  ; TODO: test if this works
       sb   @bc0h,a
;RAM:D628 ED 44                       neg
       inv  a
       ab   one,a
;RAM:D62A 85                          add     a, l
       ab   @l,a
;RAM:D62B 6F                          ld      l, a
       movb a,@l
loc_D62C:
;RAM:D62C CD 26 D8                    call    calc_vram_addr                          ; in DE
       bl   @calc_vram_addr
;RAM:D62F CD 11 D8                    call    calc_vidbuf_addr                        ; in BC
       bl   @calc_vidbuf_addr
;RAM:D632 7D                          ld      a, l
;RAM:D633 69                          ld      l, c
;RAM:D634 4F                          ld      c, a
;RAM:D635 7C                          ld      a, h
;RAM:D636 60                          ld      h, b
;RAM:D637 47                          ld      b, a                                    ; swap HL & BC
       mov  hl,tmp0
       mov  bc,hl
       mov  tmp0,bc
;RAM:D638 3A A8 5B                    ld      a, (objs_wiped_cnt)
;RAM:D63B 3C                          inc     a
;RAM:D63C 32 A8 5B                    ld      (objs_wiped_cnt), a
       ab   one,@objs_wiped_cnt
;RAM:D63F C5                          push    bc
       mov  bc,*sp+
;RAM:D640 D5                          push    de
       mov  de,*sp+
;RAM:D641 E5                          push    hl                                      ; screen buffer address
       mov  hl,*sp+
;RAM:D642 AF                          xor     a                                       ; wipe sprite
       clr  a
;RAM:D643 CD 15 C5                    call    fill_window
       bl   @fill_window
;RAM:D646 C3 B2 D5                    jp      wipe_next_object
       b    @wipe_next_object
* ---------------------------------------------------------------------------
loc_D649:
;RAM:D649 DD 4E 1A                    ld      c, 26(ix)                               ; pixel X
       movb @26(ix),@c
;RAM:D64C 18 8D                       jr      loc_D5DB
       jmp  loc_D5DB
* ---------------------------------------------------------------------------
loc_D64E:
;RAM:D64E DD 46 1B                    ld      b, 27(ix)                               ; pixel Y
       movb @27(ix),b
;RAM:D651 18 B8                       jr      loc_D60B
       jmp  loc_D60B
* ---------------------------------------------------------------------------
loc_D653:
;RAM:D653 CD BB CE                    call    calc_display_order_and_render
       bl   @calc_display_order_and_render
;RAM:D656 CD 97 C3                    call    print_sun_moon
       bl   @print_sun_moon
;RAM:D659 CD 45 BF                    call    display_objects_carried
       bl   @display_objects_carried
;RAM:D65C 21 A8 5B                    ld      hl, #objs_wiped_cnt
       li   hl,objs_wiped_cnt
;RAM:D65F 3A BE 5B                    ld      a, (rendered_objs_cnt)
       movb @rendered_objs_cnt,a
;RAM:D662 86                          add     a, (hl)                                 ; add the number of wipes
       ab   *hl,a
;RAM:D663 32 BE 5B                    ld      (rendered_objs_cnt), a
       movb a,@rendered_objs_cnt
loc_D666:
;RAM:D666 21 A8 5B                    ld      hl, #objs_wiped_cnt
       li   hl,objs_wiped_cnt
;RAM:D669 7E                          ld      a, (hl)
       movb *hl,a
;RAM:D66A A7                          and     a                                       ; done all wipes?
;RAM:D66B 28 0C                       jr      Z, loc_D679                             ; yes, exit
       jeq  loc_D679
;RAM:D66D 35                          dec     (hl)
       sb   one,*hl
;RAM:D66E E1                          pop     hl                                      ; source
       dect sp
       mov  *sp,hl
;RAM:D66F D1                          pop     de                                      ; destination
       dect sp
       mov  *sp,de
;RAM:D670 C1                          pop     bc
       dect sp
       mov  *sp,bc
;RAM:D671 78                          ld      a, b
       movb b,a
;RAM:D672 41                          ld      b, c                                    ; lines
       movb @c,b
;RAM:D673 4F                          ld      c, a                                    ; bytes/line
       movb a,@c
;RAM:D674 CD 7C D6                    call    blit_to_screen
       bl   @blit_to_screen
;RAM:D677 18 ED                       jr      loc_D666                                ; loop
       jmp  loc_D666
* ---------------------------------------------------------------------------
loc_D679:
;RAM:D679 DD E1                       pop     ix
       dect sp
       mov  *sp,ix
;RAM:D67B C9                          ret
       dect sp
       mov  *sp,r11
       rt
*
* End of function render_dynamic_objects

*
* End of lower memory
*
